//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18063
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18063.
// 
#pragma warning disable 1591

namespace TENCENT.OSS.CFT.KF.KF_Web.IVRService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="IVRServiceSoap", Namespace="http://tempuri.org/")]
    public partial class IVRService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetIVRDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendIVRResultOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetIVRDataNewOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendIVRResultNewOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public IVRService() {
            this.Url = global::TENCENT.OSS.CFT.KF.KF_Web.Properties.Settings.Default.finance_web_IVRService_IVRService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetIVRDataCompletedEventHandler GetIVRDataCompleted;
        
        /// <remarks/>
        public event SendIVRResultCompletedEventHandler SendIVRResultCompleted;
        
        /// <remarks/>
        public event GetIVRDataNewCompletedEventHandler GetIVRDataNewCompleted;
        
        /// <remarks/>
        public event SendIVRResultNewCompletedEventHandler SendIVRResultNewCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetIVRData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetIVRData(out string strCheckID, out string strUserID, out string strMobile, out int intCallNum) {
            object[] results = this.Invoke("GetIVRData", new object[0]);
            strCheckID = ((string)(results[1]));
            strUserID = ((string)(results[2]));
            strMobile = ((string)(results[3]));
            intCallNum = ((int)(results[4]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetIVRData(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetIVRData", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetIVRData(System.IAsyncResult asyncResult, out string strCheckID, out string strUserID, out string strMobile, out int intCallNum) {
            object[] results = this.EndInvoke(asyncResult);
            strCheckID = ((string)(results[1]));
            strUserID = ((string)(results[2]));
            strMobile = ((string)(results[3]));
            intCallNum = ((int)(results[4]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetIVRDataAsync() {
            this.GetIVRDataAsync(null);
        }
        
        /// <remarks/>
        public void GetIVRDataAsync(object userState) {
            if ((this.GetIVRDataOperationCompleted == null)) {
                this.GetIVRDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIVRDataOperationCompleted);
            }
            this.InvokeAsync("GetIVRData", new object[0], this.GetIVRDataOperationCompleted, userState);
        }
        
        private void OnGetIVRDataOperationCompleted(object arg) {
            if ((this.GetIVRDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIVRDataCompleted(this, new GetIVRDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendIVRResult", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SendIVRResult(string strCheckID, string strUserID, string strMobile, int intResult, string strMemo, string MD5) {
            object[] results = this.Invoke("SendIVRResult", new object[] {
                        strCheckID,
                        strUserID,
                        strMobile,
                        intResult,
                        strMemo,
                        MD5});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSendIVRResult(string strCheckID, string strUserID, string strMobile, int intResult, string strMemo, string MD5, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SendIVRResult", new object[] {
                        strCheckID,
                        strUserID,
                        strMobile,
                        intResult,
                        strMemo,
                        MD5}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndSendIVRResult(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SendIVRResultAsync(string strCheckID, string strUserID, string strMobile, int intResult, string strMemo, string MD5) {
            this.SendIVRResultAsync(strCheckID, strUserID, strMobile, intResult, strMemo, MD5, null);
        }
        
        /// <remarks/>
        public void SendIVRResultAsync(string strCheckID, string strUserID, string strMobile, int intResult, string strMemo, string MD5, object userState) {
            if ((this.SendIVRResultOperationCompleted == null)) {
                this.SendIVRResultOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendIVRResultOperationCompleted);
            }
            this.InvokeAsync("SendIVRResult", new object[] {
                        strCheckID,
                        strUserID,
                        strMobile,
                        intResult,
                        strMemo,
                        MD5}, this.SendIVRResultOperationCompleted, userState);
        }
        
        private void OnSendIVRResultOperationCompleted(object arg) {
            if ((this.SendIVRResultCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendIVRResultCompleted(this, new SendIVRResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetIVRDataNew", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetIVRDataNew(out string dbName, out string tbName, out string strCheckID, out string strUserID, out string strMobile, out int intCallNum) {
            object[] results = this.Invoke("GetIVRDataNew", new object[0]);
            dbName = ((string)(results[1]));
            tbName = ((string)(results[2]));
            strCheckID = ((string)(results[3]));
            strUserID = ((string)(results[4]));
            strMobile = ((string)(results[5]));
            intCallNum = ((int)(results[6]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetIVRDataNew(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetIVRDataNew", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetIVRDataNew(System.IAsyncResult asyncResult, out string dbName, out string tbName, out string strCheckID, out string strUserID, out string strMobile, out int intCallNum) {
            object[] results = this.EndInvoke(asyncResult);
            dbName = ((string)(results[1]));
            tbName = ((string)(results[2]));
            strCheckID = ((string)(results[3]));
            strUserID = ((string)(results[4]));
            strMobile = ((string)(results[5]));
            intCallNum = ((int)(results[6]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetIVRDataNewAsync() {
            this.GetIVRDataNewAsync(null);
        }
        
        /// <remarks/>
        public void GetIVRDataNewAsync(object userState) {
            if ((this.GetIVRDataNewOperationCompleted == null)) {
                this.GetIVRDataNewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIVRDataNewOperationCompleted);
            }
            this.InvokeAsync("GetIVRDataNew", new object[0], this.GetIVRDataNewOperationCompleted, userState);
        }
        
        private void OnGetIVRDataNewOperationCompleted(object arg) {
            if ((this.GetIVRDataNewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIVRDataNewCompleted(this, new GetIVRDataNewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendIVRResultNew", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SendIVRResultNew(string dbName, string tbName, string strCheckID, string strUserID, string strMobile, int intResult, string strMemo, string MD5) {
            object[] results = this.Invoke("SendIVRResultNew", new object[] {
                        dbName,
                        tbName,
                        strCheckID,
                        strUserID,
                        strMobile,
                        intResult,
                        strMemo,
                        MD5});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSendIVRResultNew(string dbName, string tbName, string strCheckID, string strUserID, string strMobile, int intResult, string strMemo, string MD5, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SendIVRResultNew", new object[] {
                        dbName,
                        tbName,
                        strCheckID,
                        strUserID,
                        strMobile,
                        intResult,
                        strMemo,
                        MD5}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndSendIVRResultNew(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SendIVRResultNewAsync(string dbName, string tbName, string strCheckID, string strUserID, string strMobile, int intResult, string strMemo, string MD5) {
            this.SendIVRResultNewAsync(dbName, tbName, strCheckID, strUserID, strMobile, intResult, strMemo, MD5, null);
        }
        
        /// <remarks/>
        public void SendIVRResultNewAsync(string dbName, string tbName, string strCheckID, string strUserID, string strMobile, int intResult, string strMemo, string MD5, object userState) {
            if ((this.SendIVRResultNewOperationCompleted == null)) {
                this.SendIVRResultNewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendIVRResultNewOperationCompleted);
            }
            this.InvokeAsync("SendIVRResultNew", new object[] {
                        dbName,
                        tbName,
                        strCheckID,
                        strUserID,
                        strMobile,
                        intResult,
                        strMemo,
                        MD5}, this.SendIVRResultNewOperationCompleted, userState);
        }
        
        private void OnSendIVRResultNewOperationCompleted(object arg) {
            if ((this.SendIVRResultNewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendIVRResultNewCompleted(this, new SendIVRResultNewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetIVRDataCompletedEventHandler(object sender, GetIVRDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIVRDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetIVRDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strCheckID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string strUserID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string strMobile {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public int intCallNum {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[4]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SendIVRResultCompletedEventHandler(object sender, SendIVRResultCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendIVRResultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendIVRResultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetIVRDataNewCompletedEventHandler(object sender, GetIVRDataNewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIVRDataNewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetIVRDataNewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string dbName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string tbName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string strCheckID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string strUserID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string strMobile {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public int intCallNum {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[6]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SendIVRResultNewCompletedEventHandler(object sender, SendIVRResultNewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendIVRResultNewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendIVRResultNewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591