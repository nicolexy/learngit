//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18063
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18063.
// 
#pragma warning disable 1591

namespace TENCENT.OSS.CFT.KF.KF_Web.ZWCheck_Service {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="Check_ServiceSoap", Namespace="http://Tencent.com/OSS/C2C/Finance/Check_WebService")]
    public partial class Check_Service : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private Finance_Header finance_HeaderValueField;
        
        private System.Threading.SendOrPostCallback StartCheckOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoCheckOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteCheckOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryExedCheckOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryObjCheckOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckUserPageOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCheckParamOperationCompleted;
        
        private System.Threading.SendOrPostCallback IDIsInCheckOperationCompleted;
        
        private System.Threading.SendOrPostCallback upFinishStateOperationCompleted;
        
        private System.Threading.SendOrPostCallback RecallCheckOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConfirmCancelCheckOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCheckLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPendingApprovalOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCheckByObjIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLaseApprovalOperationCompleted;
        
        private System.Threading.SendOrPostCallback StartCheckNewOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoCheckNewOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCheckLogByTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValiCheckRightOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Check_Service() {
            this.Url = global::TENCENT.OSS.CFT.KF.KF_Web.Properties.Settings.Default.finance_web_ZWCheck_Service_Check_Service;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public Finance_Header Finance_HeaderValue {
            get {
                return this.finance_HeaderValueField;
            }
            set {
                this.finance_HeaderValueField = value;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event StartCheckCompletedEventHandler StartCheckCompleted;
        
        /// <remarks/>
        public event DoCheckCompletedEventHandler DoCheckCompleted;
        
        /// <remarks/>
        public event ExecuteCheckCompletedEventHandler ExecuteCheckCompleted;
        
        /// <remarks/>
        public event QueryExedCheckCompletedEventHandler QueryExedCheckCompleted;
        
        /// <remarks/>
        public event QueryObjCheckCompletedEventHandler QueryObjCheckCompleted;
        
        /// <remarks/>
        public event CheckUserPageCompletedEventHandler CheckUserPageCompleted;
        
        /// <remarks/>
        public event getCheckParamCompletedEventHandler getCheckParamCompleted;
        
        /// <remarks/>
        public event IDIsInCheckCompletedEventHandler IDIsInCheckCompleted;
        
        /// <remarks/>
        public event upFinishStateCompletedEventHandler upFinishStateCompleted;
        
        /// <remarks/>
        public event RecallCheckCompletedEventHandler RecallCheckCompleted;
        
        /// <remarks/>
        public event ConfirmCancelCheckCompletedEventHandler ConfirmCancelCheckCompleted;
        
        /// <remarks/>
        public event GetCheckLogCompletedEventHandler GetCheckLogCompleted;
        
        /// <remarks/>
        public event GetPendingApprovalCompletedEventHandler GetPendingApprovalCompleted;
        
        /// <remarks/>
        public event GetCheckByObjIdCompletedEventHandler GetCheckByObjIdCompleted;
        
        /// <remarks/>
        public event GetLaseApprovalCompletedEventHandler GetLaseApprovalCompleted;
        
        /// <remarks/>
        public event StartCheckNewCompletedEventHandler StartCheckNewCompleted;
        
        /// <remarks/>
        public event DoCheckNewCompletedEventHandler DoCheckNewCompleted;
        
        /// <remarks/>
        public event GetCheckLogByTypeCompletedEventHandler GetCheckLogByTypeCompleted;
        
        /// <remarks/>
        public event ValiCheckRightCompletedEventHandler ValiCheckRightCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("Finance_HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Tencent.com/OSS/C2C/Finance/Check_WebService/StartCheck", RequestNamespace="http://Tencent.com/OSS/C2C/Finance/Check_WebService", ResponseNamespace="http://Tencent.com/OSS/C2C/Finance/Check_WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void StartCheck(string strMainID, string strCheckType, string strMemo, string strLevelValue, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] Param[] myParams) {
            this.Invoke("StartCheck", new object[] {
                        strMainID,
                        strCheckType,
                        strMemo,
                        strLevelValue,
                        myParams});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginStartCheck(string strMainID, string strCheckType, string strMemo, string strLevelValue, Param[] myParams, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("StartCheck", new object[] {
                        strMainID,
                        strCheckType,
                        strMemo,
                        strLevelValue,
                        myParams}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndStartCheck(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void StartCheckAsync(string strMainID, string strCheckType, string strMemo, string strLevelValue, Param[] myParams) {
            this.StartCheckAsync(strMainID, strCheckType, strMemo, strLevelValue, myParams, null);
        }
        
        /// <remarks/>
        public void StartCheckAsync(string strMainID, string strCheckType, string strMemo, string strLevelValue, Param[] myParams, object userState) {
            if ((this.StartCheckOperationCompleted == null)) {
                this.StartCheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStartCheckOperationCompleted);
            }
            this.InvokeAsync("StartCheck", new object[] {
                        strMainID,
                        strCheckType,
                        strMemo,
                        strLevelValue,
                        myParams}, this.StartCheckOperationCompleted, userState);
        }
        
        private void OnStartCheckOperationCompleted(object arg) {
            if ((this.StartCheckCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StartCheckCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("Finance_HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Tencent.com/OSS/C2C/Finance/Check_WebService/DoCheck", RequestNamespace="http://Tencent.com/OSS/C2C/Finance/Check_WebService", ResponseNamespace="http://Tencent.com/OSS/C2C/Finance/Check_WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DoCheck(string strCheckID, string strCheckMemo, int iCheckResult) {
            this.Invoke("DoCheck", new object[] {
                        strCheckID,
                        strCheckMemo,
                        iCheckResult});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDoCheck(string strCheckID, string strCheckMemo, int iCheckResult, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DoCheck", new object[] {
                        strCheckID,
                        strCheckMemo,
                        iCheckResult}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDoCheck(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DoCheckAsync(string strCheckID, string strCheckMemo, int iCheckResult) {
            this.DoCheckAsync(strCheckID, strCheckMemo, iCheckResult, null);
        }
        
        /// <remarks/>
        public void DoCheckAsync(string strCheckID, string strCheckMemo, int iCheckResult, object userState) {
            if ((this.DoCheckOperationCompleted == null)) {
                this.DoCheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoCheckOperationCompleted);
            }
            this.InvokeAsync("DoCheck", new object[] {
                        strCheckID,
                        strCheckMemo,
                        iCheckResult}, this.DoCheckOperationCompleted, userState);
        }
        
        private void OnDoCheckOperationCompleted(object arg) {
            if ((this.DoCheckCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoCheckCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("Finance_HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Tencent.com/OSS/C2C/Finance/Check_WebService/ExecuteCheck", RequestNamespace="http://Tencent.com/OSS/C2C/Finance/Check_WebService", ResponseNamespace="http://Tencent.com/OSS/C2C/Finance/Check_WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ExecuteCheck(string strCheckID) {
            object[] results = this.Invoke("ExecuteCheck", new object[] {
                        strCheckID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginExecuteCheck(string strCheckID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ExecuteCheck", new object[] {
                        strCheckID}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndExecuteCheck(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ExecuteCheckAsync(string strCheckID) {
            this.ExecuteCheckAsync(strCheckID, null);
        }
        
        /// <remarks/>
        public void ExecuteCheckAsync(string strCheckID, object userState) {
            if ((this.ExecuteCheckOperationCompleted == null)) {
                this.ExecuteCheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteCheckOperationCompleted);
            }
            this.InvokeAsync("ExecuteCheck", new object[] {
                        strCheckID}, this.ExecuteCheckOperationCompleted, userState);
        }
        
        private void OnExecuteCheckOperationCompleted(object arg) {
            if ((this.ExecuteCheckCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteCheckCompleted(this, new ExecuteCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Tencent.com/OSS/C2C/Finance/Check_WebService/QueryExedCheck", RequestNamespace="http://Tencent.com/OSS/C2C/Finance/Check_WebService", ResponseNamespace="http://Tencent.com/OSS/C2C/Finance/Check_WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string QueryExedCheck(string strCheckID) {
            object[] results = this.Invoke("QueryExedCheck", new object[] {
                        strCheckID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginQueryExedCheck(string strCheckID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("QueryExedCheck", new object[] {
                        strCheckID}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndQueryExedCheck(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void QueryExedCheckAsync(string strCheckID) {
            this.QueryExedCheckAsync(strCheckID, null);
        }
        
        /// <remarks/>
        public void QueryExedCheckAsync(string strCheckID, object userState) {
            if ((this.QueryExedCheckOperationCompleted == null)) {
                this.QueryExedCheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryExedCheckOperationCompleted);
            }
            this.InvokeAsync("QueryExedCheck", new object[] {
                        strCheckID}, this.QueryExedCheckOperationCompleted, userState);
        }
        
        private void OnQueryExedCheckOperationCompleted(object arg) {
            if ((this.QueryExedCheckCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryExedCheckCompleted(this, new QueryExedCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("Finance_HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Tencent.com/OSS/C2C/Finance/Check_WebService/QueryObjCheck", RequestNamespace="http://Tencent.com/OSS/C2C/Finance/Check_WebService", ResponseNamespace="http://Tencent.com/OSS/C2C/Finance/Check_WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet QueryObjCheck(string strObjID) {
            object[] results = this.Invoke("QueryObjCheck", new object[] {
                        strObjID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginQueryObjCheck(string strObjID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("QueryObjCheck", new object[] {
                        strObjID}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndQueryObjCheck(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void QueryObjCheckAsync(string strObjID) {
            this.QueryObjCheckAsync(strObjID, null);
        }
        
        /// <remarks/>
        public void QueryObjCheckAsync(string strObjID, object userState) {
            if ((this.QueryObjCheckOperationCompleted == null)) {
                this.QueryObjCheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryObjCheckOperationCompleted);
            }
            this.InvokeAsync("QueryObjCheck", new object[] {
                        strObjID}, this.QueryObjCheckOperationCompleted, userState);
        }
        
        private void OnQueryObjCheckOperationCompleted(object arg) {
            if ((this.QueryObjCheckCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryObjCheckCompleted(this, new QueryObjCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Tencent.com/OSS/C2C/Finance/Check_WebService/CheckUserPage", RequestNamespace="http://Tencent.com/OSS/C2C/Finance/Check_WebService", ResponseNamespace="http://Tencent.com/OSS/C2C/Finance/Check_WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckUserPage(string uid) {
            object[] results = this.Invoke("CheckUserPage", new object[] {
                        uid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCheckUserPage(string uid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CheckUserPage", new object[] {
                        uid}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndCheckUserPage(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckUserPageAsync(string uid) {
            this.CheckUserPageAsync(uid, null);
        }
        
        /// <remarks/>
        public void CheckUserPageAsync(string uid, object userState) {
            if ((this.CheckUserPageOperationCompleted == null)) {
                this.CheckUserPageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckUserPageOperationCompleted);
            }
            this.InvokeAsync("CheckUserPage", new object[] {
                        uid}, this.CheckUserPageOperationCompleted, userState);
        }
        
        private void OnCheckUserPageOperationCompleted(object arg) {
            if ((this.CheckUserPageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckUserPageCompleted(this, new CheckUserPageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Tencent.com/OSS/C2C/Finance/Check_WebService/getCheckParam", RequestNamespace="http://Tencent.com/OSS/C2C/Finance/Check_WebService", ResponseNamespace="http://Tencent.com/OSS/C2C/Finance/Check_WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getCheckParam(string checkID) {
            object[] results = this.Invoke("getCheckParam", new object[] {
                        checkID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegingetCheckParam(string checkID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getCheckParam", new object[] {
                        checkID}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndgetCheckParam(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getCheckParamAsync(string checkID) {
            this.getCheckParamAsync(checkID, null);
        }
        
        /// <remarks/>
        public void getCheckParamAsync(string checkID, object userState) {
            if ((this.getCheckParamOperationCompleted == null)) {
                this.getCheckParamOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCheckParamOperationCompleted);
            }
            this.InvokeAsync("getCheckParam", new object[] {
                        checkID}, this.getCheckParamOperationCompleted, userState);
        }
        
        private void OngetCheckParamOperationCompleted(object arg) {
            if ((this.getCheckParamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCheckParamCompleted(this, new getCheckParamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Tencent.com/OSS/C2C/Finance/Check_WebService/IDIsInCheck", RequestNamespace="http://Tencent.com/OSS/C2C/Finance/Check_WebService", ResponseNamespace="http://Tencent.com/OSS/C2C/Finance/Check_WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IDIsInCheck(string strID) {
            object[] results = this.Invoke("IDIsInCheck", new object[] {
                        strID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginIDIsInCheck(string strID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("IDIsInCheck", new object[] {
                        strID}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndIDIsInCheck(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IDIsInCheckAsync(string strID) {
            this.IDIsInCheckAsync(strID, null);
        }
        
        /// <remarks/>
        public void IDIsInCheckAsync(string strID, object userState) {
            if ((this.IDIsInCheckOperationCompleted == null)) {
                this.IDIsInCheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIDIsInCheckOperationCompleted);
            }
            this.InvokeAsync("IDIsInCheck", new object[] {
                        strID}, this.IDIsInCheckOperationCompleted, userState);
        }
        
        private void OnIDIsInCheckOperationCompleted(object arg) {
            if ((this.IDIsInCheckCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IDIsInCheckCompleted(this, new IDIsInCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Tencent.com/OSS/C2C/Finance/Check_WebService/upFinishState", RequestNamespace="http://Tencent.com/OSS/C2C/Finance/Check_WebService", ResponseNamespace="http://Tencent.com/OSS/C2C/Finance/Check_WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool upFinishState(string strCheckID, out string msg) {
            object[] results = this.Invoke("upFinishState", new object[] {
                        strCheckID});
            msg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginupFinishState(string strCheckID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("upFinishState", new object[] {
                        strCheckID}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndupFinishState(System.IAsyncResult asyncResult, out string msg) {
            object[] results = this.EndInvoke(asyncResult);
            msg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void upFinishStateAsync(string strCheckID) {
            this.upFinishStateAsync(strCheckID, null);
        }
        
        /// <remarks/>
        public void upFinishStateAsync(string strCheckID, object userState) {
            if ((this.upFinishStateOperationCompleted == null)) {
                this.upFinishStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupFinishStateOperationCompleted);
            }
            this.InvokeAsync("upFinishState", new object[] {
                        strCheckID}, this.upFinishStateOperationCompleted, userState);
        }
        
        private void OnupFinishStateOperationCompleted(object arg) {
            if ((this.upFinishStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.upFinishStateCompleted(this, new upFinishStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Tencent.com/OSS/C2C/Finance/Check_WebService/RecallCheck", RequestNamespace="http://Tencent.com/OSS/C2C/Finance/Check_WebService", ResponseNamespace="http://Tencent.com/OSS/C2C/Finance/Check_WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RecallCheck(string strCheckID, out string msg) {
            object[] results = this.Invoke("RecallCheck", new object[] {
                        strCheckID});
            msg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRecallCheck(string strCheckID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RecallCheck", new object[] {
                        strCheckID}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndRecallCheck(System.IAsyncResult asyncResult, out string msg) {
            object[] results = this.EndInvoke(asyncResult);
            msg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RecallCheckAsync(string strCheckID) {
            this.RecallCheckAsync(strCheckID, null);
        }
        
        /// <remarks/>
        public void RecallCheckAsync(string strCheckID, object userState) {
            if ((this.RecallCheckOperationCompleted == null)) {
                this.RecallCheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRecallCheckOperationCompleted);
            }
            this.InvokeAsync("RecallCheck", new object[] {
                        strCheckID}, this.RecallCheckOperationCompleted, userState);
        }
        
        private void OnRecallCheckOperationCompleted(object arg) {
            if ((this.RecallCheckCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RecallCheckCompleted(this, new RecallCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Tencent.com/OSS/C2C/Finance/Check_WebService/ConfirmCancelCheck", RequestNamespace="http://Tencent.com/OSS/C2C/Finance/Check_WebService", ResponseNamespace="http://Tencent.com/OSS/C2C/Finance/Check_WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ConfirmCancelCheck(string strCheckID, out string msg) {
            object[] results = this.Invoke("ConfirmCancelCheck", new object[] {
                        strCheckID});
            msg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginConfirmCancelCheck(string strCheckID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ConfirmCancelCheck", new object[] {
                        strCheckID}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndConfirmCancelCheck(System.IAsyncResult asyncResult, out string msg) {
            object[] results = this.EndInvoke(asyncResult);
            msg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ConfirmCancelCheckAsync(string strCheckID) {
            this.ConfirmCancelCheckAsync(strCheckID, null);
        }
        
        /// <remarks/>
        public void ConfirmCancelCheckAsync(string strCheckID, object userState) {
            if ((this.ConfirmCancelCheckOperationCompleted == null)) {
                this.ConfirmCancelCheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConfirmCancelCheckOperationCompleted);
            }
            this.InvokeAsync("ConfirmCancelCheck", new object[] {
                        strCheckID}, this.ConfirmCancelCheckOperationCompleted, userState);
        }
        
        private void OnConfirmCancelCheckOperationCompleted(object arg) {
            if ((this.ConfirmCancelCheckCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConfirmCancelCheckCompleted(this, new ConfirmCancelCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Tencent.com/OSS/C2C/Finance/Check_WebService/GetCheckLog", RequestNamespace="http://Tencent.com/OSS/C2C/Finance/Check_WebService", ResponseNamespace="http://Tencent.com/OSS/C2C/Finance/Check_WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetCheckLog(string checkid) {
            object[] results = this.Invoke("GetCheckLog", new object[] {
                        checkid});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetCheckLog(string checkid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetCheckLog", new object[] {
                        checkid}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetCheckLog(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetCheckLogAsync(string checkid) {
            this.GetCheckLogAsync(checkid, null);
        }
        
        /// <remarks/>
        public void GetCheckLogAsync(string checkid, object userState) {
            if ((this.GetCheckLogOperationCompleted == null)) {
                this.GetCheckLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCheckLogOperationCompleted);
            }
            this.InvokeAsync("GetCheckLog", new object[] {
                        checkid}, this.GetCheckLogOperationCompleted, userState);
        }
        
        private void OnGetCheckLogOperationCompleted(object arg) {
            if ((this.GetCheckLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCheckLogCompleted(this, new GetCheckLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Tencent.com/OSS/C2C/Finance/Check_WebService/GetPendingApproval", RequestNamespace="http://Tencent.com/OSS/C2C/Finance/Check_WebService", ResponseNamespace="http://Tencent.com/OSS/C2C/Finance/Check_WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetPendingApproval(string[] checkTypes, string auditor, string filter, int pageIndex, int pageSize) {
            object[] results = this.Invoke("GetPendingApproval", new object[] {
                        checkTypes,
                        auditor,
                        filter,
                        pageIndex,
                        pageSize});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPendingApproval(string[] checkTypes, string auditor, string filter, int pageIndex, int pageSize, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPendingApproval", new object[] {
                        checkTypes,
                        auditor,
                        filter,
                        pageIndex,
                        pageSize}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetPendingApproval(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetPendingApprovalAsync(string[] checkTypes, string auditor, string filter, int pageIndex, int pageSize) {
            this.GetPendingApprovalAsync(checkTypes, auditor, filter, pageIndex, pageSize, null);
        }
        
        /// <remarks/>
        public void GetPendingApprovalAsync(string[] checkTypes, string auditor, string filter, int pageIndex, int pageSize, object userState) {
            if ((this.GetPendingApprovalOperationCompleted == null)) {
                this.GetPendingApprovalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPendingApprovalOperationCompleted);
            }
            this.InvokeAsync("GetPendingApproval", new object[] {
                        checkTypes,
                        auditor,
                        filter,
                        pageIndex,
                        pageSize}, this.GetPendingApprovalOperationCompleted, userState);
        }
        
        private void OnGetPendingApprovalOperationCompleted(object arg) {
            if ((this.GetPendingApprovalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPendingApprovalCompleted(this, new GetPendingApprovalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Tencent.com/OSS/C2C/Finance/Check_WebService/GetCheckByObjId", RequestNamespace="http://Tencent.com/OSS/C2C/Finance/Check_WebService", ResponseNamespace="http://Tencent.com/OSS/C2C/Finance/Check_WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetCheckByObjId(string objId) {
            object[] results = this.Invoke("GetCheckByObjId", new object[] {
                        objId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetCheckByObjId(string objId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetCheckByObjId", new object[] {
                        objId}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetCheckByObjId(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetCheckByObjIdAsync(string objId) {
            this.GetCheckByObjIdAsync(objId, null);
        }
        
        /// <remarks/>
        public void GetCheckByObjIdAsync(string objId, object userState) {
            if ((this.GetCheckByObjIdOperationCompleted == null)) {
                this.GetCheckByObjIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCheckByObjIdOperationCompleted);
            }
            this.InvokeAsync("GetCheckByObjId", new object[] {
                        objId}, this.GetCheckByObjIdOperationCompleted, userState);
        }
        
        private void OnGetCheckByObjIdOperationCompleted(object arg) {
            if ((this.GetCheckByObjIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCheckByObjIdCompleted(this, new GetCheckByObjIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Tencent.com/OSS/C2C/Finance/Check_WebService/GetLaseApproval", RequestNamespace="http://Tencent.com/OSS/C2C/Finance/Check_WebService", ResponseNamespace="http://Tencent.com/OSS/C2C/Finance/Check_WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetLaseApproval(string[] approvalTypes) {
            object[] results = this.Invoke("GetLaseApproval", new object[] {
                        approvalTypes});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLaseApproval(string[] approvalTypes, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLaseApproval", new object[] {
                        approvalTypes}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetLaseApproval(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetLaseApprovalAsync(string[] approvalTypes) {
            this.GetLaseApprovalAsync(approvalTypes, null);
        }
        
        /// <remarks/>
        public void GetLaseApprovalAsync(string[] approvalTypes, object userState) {
            if ((this.GetLaseApprovalOperationCompleted == null)) {
                this.GetLaseApprovalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLaseApprovalOperationCompleted);
            }
            this.InvokeAsync("GetLaseApproval", new object[] {
                        approvalTypes}, this.GetLaseApprovalOperationCompleted, userState);
        }
        
        private void OnGetLaseApprovalOperationCompleted(object arg) {
            if ((this.GetLaseApprovalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLaseApprovalCompleted(this, new GetLaseApprovalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("Finance_HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Tencent.com/OSS/C2C/Finance/Check_WebService/StartCheckNew", RequestNamespace="http://Tencent.com/OSS/C2C/Finance/Check_WebService", ResponseNamespace="http://Tencent.com/OSS/C2C/Finance/Check_WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string StartCheckNew(string strMainID, string strCheckType, string strMemo) {
            object[] results = this.Invoke("StartCheckNew", new object[] {
                        strMainID,
                        strCheckType,
                        strMemo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginStartCheckNew(string strMainID, string strCheckType, string strMemo, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("StartCheckNew", new object[] {
                        strMainID,
                        strCheckType,
                        strMemo}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndStartCheckNew(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void StartCheckNewAsync(string strMainID, string strCheckType, string strMemo) {
            this.StartCheckNewAsync(strMainID, strCheckType, strMemo, null);
        }
        
        /// <remarks/>
        public void StartCheckNewAsync(string strMainID, string strCheckType, string strMemo, object userState) {
            if ((this.StartCheckNewOperationCompleted == null)) {
                this.StartCheckNewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStartCheckNewOperationCompleted);
            }
            this.InvokeAsync("StartCheckNew", new object[] {
                        strMainID,
                        strCheckType,
                        strMemo}, this.StartCheckNewOperationCompleted, userState);
        }
        
        private void OnStartCheckNewOperationCompleted(object arg) {
            if ((this.StartCheckNewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StartCheckNewCompleted(this, new StartCheckNewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("Finance_HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Tencent.com/OSS/C2C/Finance/Check_WebService/DoCheckNew", RequestNamespace="http://Tencent.com/OSS/C2C/Finance/Check_WebService", ResponseNamespace="http://Tencent.com/OSS/C2C/Finance/Check_WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DoCheckNew(string strCheckID, string strCheckMemo, int iCheckResult) {
            object[] results = this.Invoke("DoCheckNew", new object[] {
                        strCheckID,
                        strCheckMemo,
                        iCheckResult});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDoCheckNew(string strCheckID, string strCheckMemo, int iCheckResult, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DoCheckNew", new object[] {
                        strCheckID,
                        strCheckMemo,
                        iCheckResult}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndDoCheckNew(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DoCheckNewAsync(string strCheckID, string strCheckMemo, int iCheckResult) {
            this.DoCheckNewAsync(strCheckID, strCheckMemo, iCheckResult, null);
        }
        
        /// <remarks/>
        public void DoCheckNewAsync(string strCheckID, string strCheckMemo, int iCheckResult, object userState) {
            if ((this.DoCheckNewOperationCompleted == null)) {
                this.DoCheckNewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoCheckNewOperationCompleted);
            }
            this.InvokeAsync("DoCheckNew", new object[] {
                        strCheckID,
                        strCheckMemo,
                        iCheckResult}, this.DoCheckNewOperationCompleted, userState);
        }
        
        private void OnDoCheckNewOperationCompleted(object arg) {
            if ((this.DoCheckNewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoCheckNewCompleted(this, new DoCheckNewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Tencent.com/OSS/C2C/Finance/Check_WebService/GetCheckLogByType", RequestNamespace="http://Tencent.com/OSS/C2C/Finance/Check_WebService", ResponseNamespace="http://Tencent.com/OSS/C2C/Finance/Check_WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetCheckLogByType(string strCheckID, int logType) {
            object[] results = this.Invoke("GetCheckLogByType", new object[] {
                        strCheckID,
                        logType});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetCheckLogByType(string strCheckID, int logType, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetCheckLogByType", new object[] {
                        strCheckID,
                        logType}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetCheckLogByType(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetCheckLogByTypeAsync(string strCheckID, int logType) {
            this.GetCheckLogByTypeAsync(strCheckID, logType, null);
        }
        
        /// <remarks/>
        public void GetCheckLogByTypeAsync(string strCheckID, int logType, object userState) {
            if ((this.GetCheckLogByTypeOperationCompleted == null)) {
                this.GetCheckLogByTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCheckLogByTypeOperationCompleted);
            }
            this.InvokeAsync("GetCheckLogByType", new object[] {
                        strCheckID,
                        logType}, this.GetCheckLogByTypeOperationCompleted, userState);
        }
        
        private void OnGetCheckLogByTypeOperationCompleted(object arg) {
            if ((this.GetCheckLogByTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCheckLogByTypeCompleted(this, new GetCheckLogByTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Tencent.com/OSS/C2C/Finance/Check_WebService/ValiCheckRight", RequestNamespace="http://Tencent.com/OSS/C2C/Finance/Check_WebService", ResponseNamespace="http://Tencent.com/OSS/C2C/Finance/Check_WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ValiCheckRight(string strUserID, string strCheckID) {
            object[] results = this.Invoke("ValiCheckRight", new object[] {
                        strUserID,
                        strCheckID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginValiCheckRight(string strUserID, string strCheckID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ValiCheckRight", new object[] {
                        strUserID,
                        strCheckID}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndValiCheckRight(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ValiCheckRightAsync(string strUserID, string strCheckID) {
            this.ValiCheckRightAsync(strUserID, strCheckID, null);
        }
        
        /// <remarks/>
        public void ValiCheckRightAsync(string strUserID, string strCheckID, object userState) {
            if ((this.ValiCheckRightOperationCompleted == null)) {
                this.ValiCheckRightOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValiCheckRightOperationCompleted);
            }
            this.InvokeAsync("ValiCheckRight", new object[] {
                        strUserID,
                        strCheckID}, this.ValiCheckRightOperationCompleted, userState);
        }
        
        private void OnValiCheckRightOperationCompleted(object arg) {
            if ((this.ValiCheckRightCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValiCheckRightCompleted(this, new ValiCheckRightCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Tencent.com/OSS/C2C/Finance/Check_WebService")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://Tencent.com/OSS/C2C/Finance/Check_WebService", IsNullable=false)]
    public partial class Finance_Header : System.Web.Services.Protocols.SoapHeader {
        
        private string userNameField;
        
        private string userPasswordField;
        
        private string userIPField;
        
        private string szKeyField;
        
        private int operIDField;
        
        private string rightStringField;
        
        /// <remarks/>
        public string UserName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
        
        /// <remarks/>
        public string UserPassword {
            get {
                return this.userPasswordField;
            }
            set {
                this.userPasswordField = value;
            }
        }
        
        /// <remarks/>
        public string UserIP {
            get {
                return this.userIPField;
            }
            set {
                this.userIPField = value;
            }
        }
        
        /// <remarks/>
        public string SzKey {
            get {
                return this.szKeyField;
            }
            set {
                this.szKeyField = value;
            }
        }
        
        /// <remarks/>
        public int OperID {
            get {
                return this.operIDField;
            }
            set {
                this.operIDField = value;
            }
        }
        
        /// <remarks/>
        public string RightString {
            get {
                return this.rightStringField;
            }
            set {
                this.rightStringField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Tencent.com/OSS/C2C/Finance/Check_WebService")]
    public partial class Param {
        
        private string paramNameField;
        
        private string paramValueField;
        
        private string paramFlagField;
        
        /// <remarks/>
        public string ParamName {
            get {
                return this.paramNameField;
            }
            set {
                this.paramNameField = value;
            }
        }
        
        /// <remarks/>
        public string ParamValue {
            get {
                return this.paramValueField;
            }
            set {
                this.paramValueField = value;
            }
        }
        
        /// <remarks/>
        public string ParamFlag {
            get {
                return this.paramFlagField;
            }
            set {
                this.paramFlagField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void StartCheckCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DoCheckCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void ExecuteCheckCompletedEventHandler(object sender, ExecuteCheckCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteCheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteCheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void QueryExedCheckCompletedEventHandler(object sender, QueryExedCheckCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryExedCheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryExedCheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void QueryObjCheckCompletedEventHandler(object sender, QueryObjCheckCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryObjCheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryObjCheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void CheckUserPageCompletedEventHandler(object sender, CheckUserPageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckUserPageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckUserPageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getCheckParamCompletedEventHandler(object sender, getCheckParamCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCheckParamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCheckParamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void IDIsInCheckCompletedEventHandler(object sender, IDIsInCheckCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IDIsInCheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IDIsInCheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void upFinishStateCompletedEventHandler(object sender, upFinishStateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class upFinishStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal upFinishStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string msg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void RecallCheckCompletedEventHandler(object sender, RecallCheckCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RecallCheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RecallCheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string msg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void ConfirmCancelCheckCompletedEventHandler(object sender, ConfirmCancelCheckCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConfirmCancelCheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConfirmCancelCheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string msg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetCheckLogCompletedEventHandler(object sender, GetCheckLogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCheckLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCheckLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetPendingApprovalCompletedEventHandler(object sender, GetPendingApprovalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPendingApprovalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPendingApprovalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetCheckByObjIdCompletedEventHandler(object sender, GetCheckByObjIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCheckByObjIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCheckByObjIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetLaseApprovalCompletedEventHandler(object sender, GetLaseApprovalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLaseApprovalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLaseApprovalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void StartCheckNewCompletedEventHandler(object sender, StartCheckNewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StartCheckNewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StartCheckNewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DoCheckNewCompletedEventHandler(object sender, DoCheckNewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoCheckNewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoCheckNewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetCheckLogByTypeCompletedEventHandler(object sender, GetCheckLogByTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCheckLogByTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCheckLogByTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void ValiCheckRightCompletedEventHandler(object sender, ValiCheckRightCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValiCheckRightCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValiCheckRightCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591