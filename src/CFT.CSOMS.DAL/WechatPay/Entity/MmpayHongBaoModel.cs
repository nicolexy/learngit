// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel
{

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class MmpayHongBaoModel
    {

        #region Extension registration
        public static void RegisterAllExtensions(pb::ExtensionRegistry registry)
        {
        }
        #endregion
        #region Static variables
        internal static pbd::MessageDescriptor internal__static_MmpayHongBaoModel_HongBaoSendOrder__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoSendOrder, CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoSendOrder.Builder> internal__static_MmpayHongBaoModel_HongBaoSendOrder__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_MmpayHongBaoModel_HongBaoReceiveOrder__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoReceiveOrder, CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoReceiveOrder.Builder> internal__static_MmpayHongBaoModel_HongBaoReceiveOrder__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_MmpayHongBaoModel_HongBaoStatisticLatest__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoStatisticLatest, CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoStatisticLatest.Builder> internal__static_MmpayHongBaoModel_HongBaoStatisticLatest__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_MmpayHongBaoModel_PreOrderDBWrapper__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.PreOrderDBWrapper, CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.PreOrderDBWrapper.Builder> internal__static_MmpayHongBaoModel_PreOrderDBWrapper__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_MmpayHongBaoModel_PreOrderRequestDB__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.PreOrderRequestDB, CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.PreOrderRequestDB.Builder> internal__static_MmpayHongBaoModel_PreOrderRequestDB__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_MmpayHongBaoModel_HongBaoRefundRecord__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoRefundRecord, CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoRefundRecord.Builder> internal__static_MmpayHongBaoModel_HongBaoRefundRecord__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_MmpayHongBaoModel_CommRes__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.CommRes, CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.CommRes.Builder> internal__static_MmpayHongBaoModel_CommRes__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_MmpayHongBaoModel_HongBaoSpRelation__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoSpRelation, CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoSpRelation.Builder> internal__static_MmpayHongBaoModel_HongBaoSpRelation__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_MmpayHongBaoModel_HongBaoWagerInfo__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoWagerInfo, CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoWagerInfo.Builder> internal__static_MmpayHongBaoModel_HongBaoWagerInfo__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_MmpayHongBaoModel_HongBaoUserSendIndex__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoUserSendIndex, CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoUserSendIndex.Builder> internal__static_MmpayHongBaoModel_HongBaoUserSendIndex__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_MmpayHongBaoModel_HongBaoUserReceiveIndex__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoUserReceiveIndex, CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoUserReceiveIndex.Builder> internal__static_MmpayHongBaoModel_HongBaoUserReceiveIndex__FieldAccessorTable;
        #endregion
        #region Descriptor
        public static pbd::FileDescriptor Descriptor
        {
            get { return descriptor; }
        }
        private static pbd::FileDescriptor descriptor;

        static MmpayHongBaoModel()
        {
            byte[] descriptorData = global::System.Convert.FromBase64String(
                "ChdtbXBheWhvbmdiYW9tb2RlbC5wcm90bxIRbW1wYXlob25nYmFvbW9kZWwi" +
                "4QcKEEhvbmdCYW9TZW5kT3JkZXISDAoEc3BpZBgBIAEoDBIOCgZsaXN0aWQY" +
                "AiABKAwSEgoKcGF5X2xpc3RpZBgDIAEoDBIQCghwYXlfdHlwZRgEIAEoDRIS" +
                "CgpwYXlfb3BlbmlkGAUgASgMEg4KBm9wZW5pZBgGIAEoDBIMCgRuYW1lGAcg" +
                "ASgMEhAKCGhlYWRfaW1nGAggASgMEgsKA3VpZBgJIAEoDRIOCgZsc3RhdGUY" +
                "CiABKA0SPAoFc3RhdGUYCyABKA4yLS5tbXBheWhvbmdiYW9tb2RlbC5Ib25n" +
                "QmFvU2VuZE9yZGVyLlN0YXRlVHlwZRIMCgR0eXBlGAwgASgNEg8KB2NoYW5u" +
                "ZWwYDSABKA0SDwoHY3VydHlwZRgOIAEoDRIRCgl0b3RhbF9udW0YDyABKA0S" +
                "FAoMdG90YWxfYW1vdW50GBAgASgEEhEKCW1pbl92YWx1ZRgRIAEoBBIRCglt" +
                "YXhfdmFsdWUYEiABKAQSFAoMcmVjZWl2ZWRfbnVtGBMgASgNEhcKD3JlY2Vp" +
                "dmVkX2Ftb3VudBgUIAEoBBIRCgljbGllbnRfaXAYFSABKAwSDwoHd2lzaGlu" +
                "ZxgWIAEoDBIMCgRtZW1vGBcgASgMEhAKCHBheV9tZW1vGBggASgMEhMKC2Ny" +
                "ZWF0ZV90aW1lGBkgASgMEhQKDGludmFsaWRfdGltZRgaIAEoDBIWCg5wYXlf" +
                "ZnJvbnRfdGltZRgbIAEoDBIQCghwYXlfdGltZRgcIAEoDBITCgttb2RpZnlf" +
                "dGltZRgdIAEoDBITCgtzY2FsZV9jb3VudBgeIAEoDRIRCglzY2FsZV9zZXQY" +
                "HyABKAwSEAoIc3RhbmRieTEYICABKA0SEAoIc3RhbmRieTIYISABKA0SEAoI" +
                "c3RhbmRieTMYIiABKAwSEAoIc3RhbmRieTQYIyABKAwSEAoIc3RhbmRieTUY" +
                "JCABKAwSEAoIc3RhbmRieTYYJSABKAwSEAoIc3RhbmRieTcYJiABKAwSEAoI" +
                "c3RhbmRieTgYJyABKAwSEQoJc3RhbmRieTEwGCggASgNEgwKBHNpZ24YKSAB" +
                "KAwitAEKCVN0YXRlVHlwZRILCgdJTlZBTElEEAASCgoGUFJFUEFZEAESCQoF" +
                "UEFZT0sQAhIPCgtQQVJUUkVDRUlWRRADEg4KCkFMTFJFQ0VJVkUQBBIUChBP" +
                "VkVSVElNRVJFRlVOREVEEAUSFQoRRVhDRVBUSU9OUkVGVU5ERUQQBhINCglS" +
                "RUZVTkRJTkcQBxINCglET1JFQ1lDTEUQYRIKCgZTSEFSRUQQYhILCgdSRUNZ" +
                "Q0xFEGMimQYKE0hvbmdCYW9SZWNlaXZlT3JkZXISDgoGbGlzdGlkGAEgASgM" +
                "EhQKDHNlbmRfbGlzdF9pZBgCIAEoDBITCgtiMmNfbGlzdF9pZBgDIAEoDBIO" +
                "CgZsc3RhdGUYBCABKA0SPwoFc3RhdGUYBSABKA4yMC5tbXBheWhvbmdiYW9t" +
                "b2RlbC5Ib25nQmFvUmVjZWl2ZU9yZGVyLlN0YXRlVHlwZRIMCgR0eXBlGAYg" +
                "ASgNEg8KB2NoYW5uZWwYByABKA0SFAoMcmVjZWl2ZV90eXBlGAggASgNEg8K" +
                "B2N1cnR5cGUYCSABKA0SDgoGYW1vdW50GAogASgEEhMKC3NlbmRfb3Blbmlk" +
                "GAsgASgMEhEKCXNlbmRfbmFtZRgMIAEoDBIQCghzZW5kX3VpZBgNIAEoDRIQ" +
                "CghzZW5kX2ltZxgOIAEoDBIWCg5yZWNlaXZlX29wZW5pZBgPIAEoDBIUCgxy" +
                "ZWNlaXZlX25hbWUYECABKAwSEwoLcmVjZWl2ZV91aWQYESABKA0SEwoLcmVj" +
                "ZWl2ZV9pbWcYEiABKAwSDwoHd2lzaGluZxgTIAEoDBIOCgZhbnN3ZXIYFCAB" +
                "KAwSDAoEbWVtbxgVIAEoDBIQCghwYXlfdGltZRgWIAEoDBITCgtjcmVhdGVf" +
                "dGltZRgXIAEoDBITCgttb2RpZnlfdGltZRgYIAEoDBIRCgljbGllbnRfaXAY" +
                "GSABKAwSEAoIc3RhbmRieTEYGiABKA0SEAoIc3RhbmRieTIYGyABKA0SEAoI" +
                "c3RhbmRieTMYHCABKAwSEAoIc3RhbmRieTQYHSABKAwSEAoIc3RhbmRieTUY" +
                "HiABKAwSEAoIc3RhbmRieTYYHyABKAwSEAoIc3RhbmRieTcYICABKAwSEAoI" +
                "c3RhbmRieTgYISABKAwSEQoJc3RhbmRieTEwGCIgASgNEgwKBHNpZ24YIyAB" +
                "KAwiTQoJU3RhdGVUeXBlEgwKCFJFQ0VJVkVEEAESDgoKVFJBTlNGRVJFRBAC" +
                "EgwKCEFOU1dFUkVEEAMSCAoESU5JVBBaEgoKBlJFRlVORBBjIowDChZIb25n" +
                "QmFvU3RhdGlzdGljTGF0ZXN0Eg4KBm9wZW5pZBgBIAEoDBIRCglkaW1lbnNp" +
                "b24YAiABKA0SEQoJZGltX3ZhbHVlGAMgASgNEhIKCnNlbmRfdGltZXMYBCAB" +
                "KA0SEgoKc2VuZF9jb3VudBgFIAEoDRIQCghzZW5kX2ZlZRgGIAEoBBIVCg1y" +
                "ZWNlaXZlX2NvdW50GAcgASgNEhMKC3JlY2VpdmVfZmVlGAggASgEEhYKDmx1" +
                "Y2tpZXN0X2NvdW50GAkgASgNEhQKDGx1Y2tpZXN0X2ZlZRgKIAEoBBIZChFz" +
                "ZW5kX2ZpbmlzaF90aW1lcxgLIAEoDRIbChNzZW5kX3JlY2VpdmVkX2NvdW50" +
                "GAwgASgNEhkKEXNlbmRfcmVjZWl2ZWRfZmVlGA0gASgEEg8KB3ZlcnNpb24Y" +
                "DiABKA0SDAoEbWVtbxgPIAEoDBIMCgRzaWduGBAgASgMEhMKC2NyZWF0ZV90" +
                "aW1lGBEgASgMEhMKC21vZGlmeV90aW1lGBIgASgMIu4BChFQcmVPcmRlckRC" +
                "V3JhcHBlchIOCgZsaXN0aWQYASABKAwSDwoHcmVxdWVzdBgCIAEoDBITCgtj" +
                "cmVhdGVfdGltZRgDIAEoDBITCgttb2RpZnlfdGltZRgEIAEoDBIQCghzdGFu" +
                "ZGJ5MRgFIAEoDRIQCghzdGFuZGJ5MhgGIAEoDRIQCghzdGFuZGJ5MxgHIAEo" +
                "DBIQCghzdGFuZGJ5NBgIIAEoDBIQCghzdGFuZGJ5NRgJIAEoDBIQCghzdGFu" +
                "ZGJ5NhgKIAEoDBIQCghzdGFuZGJ5NxgLIAEoDBIQCghzdGFuZGJ5OBgMIAEo" +
                "DCLOAQoRUHJlT3JkZXJSZXF1ZXN0REISMgoFb3JkZXIYASACKAsyIy5tbXBh" +
                "eWhvbmdiYW9tb2RlbC5Ib25nQmFvU2VuZE9yZGVyEhAKCHVzZXJuYW1lGAIg" +
                "ASgMEhQKDHNlbmRVc2VyTmFtZRgDIAEoDBINCgVpbldheRgEIAEoDRITCgtz" +
                "ZXNzaW9uVHlwZRgFIAEoDRISCgpkZXZpY2VUeXBlGAYgASgNEhUKDWNsaWVu" +
                "dFZlcnNpb24YByABKA0SDgoGdGlja2V0GAggASgMIpoCChNIb25nQmFvUmVm" +
                "dW5kUmVjb3JkEhAKCHJlZnVuZGlkGAEgASgMEg4KBnNlbmRpZBgCIAEoDBIN" +
                "CgVwYXlpZBgDIAEoDBIMCgRzcGlkGAQgASgMEhQKDHRvdGFsX2Ftb3VudBgF" +
                "IAEoAxIVCg1yZWZ1bmRfYW1vdW50GAYgASgDEg0KBXN0YXRlGAcgASgFEhQK" +
                "DHJlZnVuZF9jYXVzZRgIIAEoBRIMCgRtZW1vGAkgASgMEhAKCHBheV90aW1l" +
                "GAogASgMEhMKC2NyZWF0ZV90aW1lGAsgASgMEhMKC21vZGlmeV90aW1lGAwg" +
                "ASgMEhMKC2JhY2t1cF9pbnQxGA0gASgFEhMKC2JhY2t1cF9pbnQyGA4gASgF" +
                "IjEKB0NvbW1SZXMSEgoHcmV0Y29kZRgBIAEoDDoBMBISCgZyZXRtc2cYAiAB" +
                "KAw6Am9rIpYBChFIb25nQmFvU3BSZWxhdGlvbhIRCglzcF9iaWxsbm8YASAB" +
                "KAwSDgoGbWNoX2lkGAIgASgMEg8KB3NlbmRfaWQYAyABKAwSDwoHc3BfdHlw" +
                "ZRgEIAEoDRITCgtjcmVhdGVfdGltZRgFIAEoDBITCgttb2RpZnlfdGltZRgG" +
                "IAEoDBISCgpzZW5kX21vZGVsGAcgASgFIuoBChBIb25nQmFvV2FnZXJJbmZv" +
                "Eg8KB2Zyb211aW4YASABKA0SEAoIcGFnZXR5cGUYAiABKA0SEgoKdG91c2Vy" +
                "bmFtZRgDIAEoCRINCgVtb25leRgEIAEoDRIOCgZoYnR5cGUYBSABKA0SDgoG" +
                "c291cmNlGAYgASgNEg8KB2hiY291bnQYByABKA0SDgoGc2VuZGlkGAggASgJ" +
                "EhAKCGNsaWVudGlwGAkgASgJEhQKDGRldmljZXR5cGVpZBgKIAEoDRIVCg1j" +
                "bGllbnR2ZXJzaW9uGAsgASgNEhAKCGRldmljZWlkGAwgASgJIkkKFEhvbmdC" +
                "YW9Vc2VyU2VuZEluZGV4EgsKA3VpbhgBIAEoBBIPCgdzZW5kX2lkGAIgASgM" +
                "EhMKC2NyZWF0ZV90aW1lGAMgASgMIl8KF0hvbmdCYW9Vc2VyUmVjZWl2ZUlu" +
                "ZGV4EgsKA3VpbhgBIAEoBBISCgpyZWNlaXZlX2lkGAIgASgMEg4KBmRiX2lk" +
                "eBgDIAEoDRITCgtjcmVhdGVfdGltZRgEIAEoDA==");
            pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root)
            {
                descriptor = root;
                internal__static_MmpayHongBaoModel_HongBaoSendOrder__Descriptor = Descriptor.MessageTypes[0];
                internal__static_MmpayHongBaoModel_HongBaoSendOrder__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoSendOrder, CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoSendOrder.Builder>(internal__static_MmpayHongBaoModel_HongBaoSendOrder__Descriptor,
                        new string[] { "Spid", "Listid", "PayListid", "PayType", "PayOpenid", "Openid", "Name", "HeadImg", "Uid", "Lstate", "State", "Type", "Channel", "Curtype", "TotalNum", "TotalAmount", "MinValue", "MaxValue", "ReceivedNum", "ReceivedAmount", "ClientIp", "Wishing", "Memo", "PayMemo", "CreateTime", "InvalidTime", "PayFrontTime", "PayTime", "ModifyTime", "ScaleCount", "ScaleSet", "Standby1", "Standby2", "Standby3", "Standby4", "Standby5", "Standby6", "Standby7", "Standby8", "Standby10", "Sign", });
                internal__static_MmpayHongBaoModel_HongBaoReceiveOrder__Descriptor = Descriptor.MessageTypes[1];
                internal__static_MmpayHongBaoModel_HongBaoReceiveOrder__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoReceiveOrder, CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoReceiveOrder.Builder>(internal__static_MmpayHongBaoModel_HongBaoReceiveOrder__Descriptor,
                        new string[] { "Listid", "SendListId", "B2CListId", "Lstate", "State", "Type", "Channel", "ReceiveType", "Curtype", "Amount", "SendOpenid", "SendName", "SendUid", "SendImg", "ReceiveOpenid", "ReceiveName", "ReceiveUid", "ReceiveImg", "Wishing", "Answer", "Memo", "PayTime", "CreateTime", "ModifyTime", "ClientIp", "Standby1", "Standby2", "Standby3", "Standby4", "Standby5", "Standby6", "Standby7", "Standby8", "Standby10", "Sign", });
                internal__static_MmpayHongBaoModel_HongBaoStatisticLatest__Descriptor = Descriptor.MessageTypes[2];
                internal__static_MmpayHongBaoModel_HongBaoStatisticLatest__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoStatisticLatest, CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoStatisticLatest.Builder>(internal__static_MmpayHongBaoModel_HongBaoStatisticLatest__Descriptor,
                        new string[] { "Openid", "Dimension", "DimValue", "SendTimes", "SendCount", "SendFee", "ReceiveCount", "ReceiveFee", "LuckiestCount", "LuckiestFee", "SendFinishTimes", "SendReceivedCount", "SendReceivedFee", "Version", "Memo", "Sign", "CreateTime", "ModifyTime", });
                internal__static_MmpayHongBaoModel_PreOrderDBWrapper__Descriptor = Descriptor.MessageTypes[3];
                internal__static_MmpayHongBaoModel_PreOrderDBWrapper__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.PreOrderDBWrapper, CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.PreOrderDBWrapper.Builder>(internal__static_MmpayHongBaoModel_PreOrderDBWrapper__Descriptor,
                        new string[] { "Listid", "Request", "CreateTime", "ModifyTime", "Standby1", "Standby2", "Standby3", "Standby4", "Standby5", "Standby6", "Standby7", "Standby8", });
                internal__static_MmpayHongBaoModel_PreOrderRequestDB__Descriptor = Descriptor.MessageTypes[4];
                internal__static_MmpayHongBaoModel_PreOrderRequestDB__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.PreOrderRequestDB, CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.PreOrderRequestDB.Builder>(internal__static_MmpayHongBaoModel_PreOrderRequestDB__Descriptor,
                        new string[] { "Order", "Username", "SendUserName", "InWay", "SessionType", "DeviceType", "ClientVersion", "Ticket", });
                internal__static_MmpayHongBaoModel_HongBaoRefundRecord__Descriptor = Descriptor.MessageTypes[5];
                internal__static_MmpayHongBaoModel_HongBaoRefundRecord__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoRefundRecord, CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoRefundRecord.Builder>(internal__static_MmpayHongBaoModel_HongBaoRefundRecord__Descriptor,
                        new string[] { "Refundid", "Sendid", "Payid", "Spid", "TotalAmount", "RefundAmount", "State", "RefundCause", "Memo", "PayTime", "CreateTime", "ModifyTime", "BackupInt1", "BackupInt2", });
                internal__static_MmpayHongBaoModel_CommRes__Descriptor = Descriptor.MessageTypes[6];
                internal__static_MmpayHongBaoModel_CommRes__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.CommRes, CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.CommRes.Builder>(internal__static_MmpayHongBaoModel_CommRes__Descriptor,
                        new string[] { "Retcode", "Retmsg", });
                internal__static_MmpayHongBaoModel_HongBaoSpRelation__Descriptor = Descriptor.MessageTypes[7];
                internal__static_MmpayHongBaoModel_HongBaoSpRelation__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoSpRelation, CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoSpRelation.Builder>(internal__static_MmpayHongBaoModel_HongBaoSpRelation__Descriptor,
                        new string[] { "SpBillno", "MchId", "SendId", "SpType", "CreateTime", "ModifyTime", "SendModel", });
                internal__static_MmpayHongBaoModel_HongBaoWagerInfo__Descriptor = Descriptor.MessageTypes[8];
                internal__static_MmpayHongBaoModel_HongBaoWagerInfo__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoWagerInfo, CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoWagerInfo.Builder>(internal__static_MmpayHongBaoModel_HongBaoWagerInfo__Descriptor,
                        new string[] { "Fromuin", "Pagetype", "Tousername", "Money", "Hbtype", "Source", "Hbcount", "Sendid", "Clientip", "Devicetypeid", "Clientversion", "Deviceid", });
                internal__static_MmpayHongBaoModel_HongBaoUserSendIndex__Descriptor = Descriptor.MessageTypes[9];
                internal__static_MmpayHongBaoModel_HongBaoUserSendIndex__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoUserSendIndex, CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoUserSendIndex.Builder>(internal__static_MmpayHongBaoModel_HongBaoUserSendIndex__Descriptor,
                        new string[] { "Uin", "SendId", "CreateTime", });
                internal__static_MmpayHongBaoModel_HongBaoUserReceiveIndex__Descriptor = Descriptor.MessageTypes[10];
                internal__static_MmpayHongBaoModel_HongBaoUserReceiveIndex__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoUserReceiveIndex, CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoUserReceiveIndex.Builder>(internal__static_MmpayHongBaoModel_HongBaoUserReceiveIndex__Descriptor,
                        new string[] { "Uin", "ReceiveId", "DbIdx", "CreateTime", });
                return null;
            };
            pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
                new pbd::FileDescriptor[] {
          }, assigner);
        }
        #endregion

    }
    #region Messages
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class HongBaoSendOrder : pb::GeneratedMessage<HongBaoSendOrder, HongBaoSendOrder.Builder>
    {
        private HongBaoSendOrder() { }
        private static readonly HongBaoSendOrder defaultInstance = new HongBaoSendOrder().MakeReadOnly();
        private static readonly string[] _hongBaoSendOrderFieldNames = new string[] { "channel", "client_ip", "create_time", "curtype", "head_img", "invalid_time", "listid", "lstate", "max_value", "memo", "min_value", "modify_time", "name", "openid", "pay_front_time", "pay_listid", "pay_memo", "pay_openid", "pay_time", "pay_type", "received_amount", "received_num", "scale_count", "scale_set", "sign", "spid", "standby1", "standby10", "standby2", "standby3", "standby4", "standby5", "standby6", "standby7", "standby8", "state", "total_amount", "total_num", "type", "uid", "wishing" };
        private static readonly uint[] _hongBaoSendOrderFieldTags = new uint[] { 104, 170, 202, 112, 66, 210, 18, 80, 144, 186, 136, 234, 58, 50, 218, 26, 194, 42, 226, 32, 160, 152, 240, 250, 330, 10, 256, 320, 264, 274, 282, 290, 298, 306, 314, 88, 128, 120, 96, 72, 178 };
        public static HongBaoSendOrder DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override HongBaoSendOrder DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override HongBaoSendOrder ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.MmpayHongBaoModel.internal__static_MmpayHongBaoModel_HongBaoSendOrder__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<HongBaoSendOrder, HongBaoSendOrder.Builder> InternalFieldAccessors
        {
            get { return CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.MmpayHongBaoModel.internal__static_MmpayHongBaoModel_HongBaoSendOrder__FieldAccessorTable; }
        }

        #region Nested types
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static partial class Types
        {
            public enum StateType
            {
                INVALID = 0,
                PREPAY = 1,
                PAYOK = 2,
                PARTRECEIVE = 3,
                ALLRECEIVE = 4,
                OVERTIMEREFUNDED = 5,
                EXCEPTIONREFUNDED = 6,
                REFUNDING = 7,
                DORECYCLE = 97,
                SHARED = 98,
                RECYCLE = 99,
            }

        }
        #endregion

        public const int SpidFieldNumber = 1;
        private bool hasSpid;
        private pb::ByteString spid_ = pb::ByteString.Empty;
        public bool HasSpid
        {
            get { return hasSpid; }
        }
        public pb::ByteString Spid
        {
            get { return spid_; }
        }

        public const int ListidFieldNumber = 2;
        private bool hasListid;
        private pb::ByteString listid_ = pb::ByteString.Empty;
        public bool HasListid
        {
            get { return hasListid; }
        }
        public pb::ByteString Listid
        {
            get { return listid_; }
        }

        public const int PayListidFieldNumber = 3;
        private bool hasPayListid;
        private pb::ByteString payListid_ = pb::ByteString.Empty;
        public bool HasPayListid
        {
            get { return hasPayListid; }
        }
        public pb::ByteString PayListid
        {
            get { return payListid_; }
        }

        public const int PayTypeFieldNumber = 4;
        private bool hasPayType;
        private uint payType_;
        public bool HasPayType
        {
            get { return hasPayType; }
        }
        [global::System.CLSCompliant(false)]
        public uint PayType
        {
            get { return payType_; }
        }

        public const int PayOpenidFieldNumber = 5;
        private bool hasPayOpenid;
        private pb::ByteString payOpenid_ = pb::ByteString.Empty;
        public bool HasPayOpenid
        {
            get { return hasPayOpenid; }
        }
        public pb::ByteString PayOpenid
        {
            get { return payOpenid_; }
        }

        public const int OpenidFieldNumber = 6;
        private bool hasOpenid;
        private pb::ByteString openid_ = pb::ByteString.Empty;
        public bool HasOpenid
        {
            get { return hasOpenid; }
        }
        public pb::ByteString Openid
        {
            get { return openid_; }
        }

        public const int NameFieldNumber = 7;
        private bool hasName;
        private pb::ByteString name_ = pb::ByteString.Empty;
        public bool HasName
        {
            get { return hasName; }
        }
        public pb::ByteString Name
        {
            get { return name_; }
        }

        public const int HeadImgFieldNumber = 8;
        private bool hasHeadImg;
        private pb::ByteString headImg_ = pb::ByteString.Empty;
        public bool HasHeadImg
        {
            get { return hasHeadImg; }
        }
        public pb::ByteString HeadImg
        {
            get { return headImg_; }
        }

        public const int UidFieldNumber = 9;
        private bool hasUid;
        private uint uid_;
        public bool HasUid
        {
            get { return hasUid; }
        }
        [global::System.CLSCompliant(false)]
        public uint Uid
        {
            get { return uid_; }
        }

        public const int LstateFieldNumber = 10;
        private bool hasLstate;
        private uint lstate_;
        public bool HasLstate
        {
            get { return hasLstate; }
        }
        [global::System.CLSCompliant(false)]
        public uint Lstate
        {
            get { return lstate_; }
        }

        public const int StateFieldNumber = 11;
        private bool hasState;
        private CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoSendOrder.Types.StateType state_ = CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoSendOrder.Types.StateType.INVALID;
        public bool HasState
        {
            get { return hasState; }
        }
        public CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoSendOrder.Types.StateType State
        {
            get { return state_; }
        }

        public const int TypeFieldNumber = 12;
        private bool hasType;
        private uint type_;
        public bool HasType
        {
            get { return hasType; }
        }
        [global::System.CLSCompliant(false)]
        public uint Type
        {
            get { return type_; }
        }

        public const int ChannelFieldNumber = 13;
        private bool hasChannel;
        private uint channel_;
        public bool HasChannel
        {
            get { return hasChannel; }
        }
        [global::System.CLSCompliant(false)]
        public uint Channel
        {
            get { return channel_; }
        }

        public const int CurtypeFieldNumber = 14;
        private bool hasCurtype;
        private uint curtype_;
        public bool HasCurtype
        {
            get { return hasCurtype; }
        }
        [global::System.CLSCompliant(false)]
        public uint Curtype
        {
            get { return curtype_; }
        }

        public const int TotalNumFieldNumber = 15;
        private bool hasTotalNum;
        private uint totalNum_;
        public bool HasTotalNum
        {
            get { return hasTotalNum; }
        }
        [global::System.CLSCompliant(false)]
        public uint TotalNum
        {
            get { return totalNum_; }
        }

        public const int TotalAmountFieldNumber = 16;
        private bool hasTotalAmount;
        private ulong totalAmount_;
        public bool HasTotalAmount
        {
            get { return hasTotalAmount; }
        }
        [global::System.CLSCompliant(false)]
        public ulong TotalAmount
        {
            get { return totalAmount_; }
        }

        public const int MinValueFieldNumber = 17;
        private bool hasMinValue;
        private ulong minValue_;
        public bool HasMinValue
        {
            get { return hasMinValue; }
        }
        [global::System.CLSCompliant(false)]
        public ulong MinValue
        {
            get { return minValue_; }
        }

        public const int MaxValueFieldNumber = 18;
        private bool hasMaxValue;
        private ulong maxValue_;
        public bool HasMaxValue
        {
            get { return hasMaxValue; }
        }
        [global::System.CLSCompliant(false)]
        public ulong MaxValue
        {
            get { return maxValue_; }
        }

        public const int ReceivedNumFieldNumber = 19;
        private bool hasReceivedNum;
        private uint receivedNum_;
        public bool HasReceivedNum
        {
            get { return hasReceivedNum; }
        }
        [global::System.CLSCompliant(false)]
        public uint ReceivedNum
        {
            get { return receivedNum_; }
        }

        public const int ReceivedAmountFieldNumber = 20;
        private bool hasReceivedAmount;
        private ulong receivedAmount_;
        public bool HasReceivedAmount
        {
            get { return hasReceivedAmount; }
        }
        [global::System.CLSCompliant(false)]
        public ulong ReceivedAmount
        {
            get { return receivedAmount_; }
        }

        public const int ClientIpFieldNumber = 21;
        private bool hasClientIp;
        private pb::ByteString clientIp_ = pb::ByteString.Empty;
        public bool HasClientIp
        {
            get { return hasClientIp; }
        }
        public pb::ByteString ClientIp
        {
            get { return clientIp_; }
        }

        public const int WishingFieldNumber = 22;
        private bool hasWishing;
        private pb::ByteString wishing_ = pb::ByteString.Empty;
        public bool HasWishing
        {
            get { return hasWishing; }
        }
        public pb::ByteString Wishing
        {
            get { return wishing_; }
        }

        public const int MemoFieldNumber = 23;
        private bool hasMemo;
        private pb::ByteString memo_ = pb::ByteString.Empty;
        public bool HasMemo
        {
            get { return hasMemo; }
        }
        public pb::ByteString Memo
        {
            get { return memo_; }
        }

        public const int PayMemoFieldNumber = 24;
        private bool hasPayMemo;
        private pb::ByteString payMemo_ = pb::ByteString.Empty;
        public bool HasPayMemo
        {
            get { return hasPayMemo; }
        }
        public pb::ByteString PayMemo
        {
            get { return payMemo_; }
        }

        public const int CreateTimeFieldNumber = 25;
        private bool hasCreateTime;
        private pb::ByteString createTime_ = pb::ByteString.Empty;
        public bool HasCreateTime
        {
            get { return hasCreateTime; }
        }
        public pb::ByteString CreateTime
        {
            get { return createTime_; }
        }

        public const int InvalidTimeFieldNumber = 26;
        private bool hasInvalidTime;
        private pb::ByteString invalidTime_ = pb::ByteString.Empty;
        public bool HasInvalidTime
        {
            get { return hasInvalidTime; }
        }
        public pb::ByteString InvalidTime
        {
            get { return invalidTime_; }
        }

        public const int PayFrontTimeFieldNumber = 27;
        private bool hasPayFrontTime;
        private pb::ByteString payFrontTime_ = pb::ByteString.Empty;
        public bool HasPayFrontTime
        {
            get { return hasPayFrontTime; }
        }
        public pb::ByteString PayFrontTime
        {
            get { return payFrontTime_; }
        }

        public const int PayTimeFieldNumber = 28;
        private bool hasPayTime;
        private pb::ByteString payTime_ = pb::ByteString.Empty;
        public bool HasPayTime
        {
            get { return hasPayTime; }
        }
        public pb::ByteString PayTime
        {
            get { return payTime_; }
        }

        public const int ModifyTimeFieldNumber = 29;
        private bool hasModifyTime;
        private pb::ByteString modifyTime_ = pb::ByteString.Empty;
        public bool HasModifyTime
        {
            get { return hasModifyTime; }
        }
        public pb::ByteString ModifyTime
        {
            get { return modifyTime_; }
        }

        public const int ScaleCountFieldNumber = 30;
        private bool hasScaleCount;
        private uint scaleCount_;
        public bool HasScaleCount
        {
            get { return hasScaleCount; }
        }
        [global::System.CLSCompliant(false)]
        public uint ScaleCount
        {
            get { return scaleCount_; }
        }

        public const int ScaleSetFieldNumber = 31;
        private bool hasScaleSet;
        private pb::ByteString scaleSet_ = pb::ByteString.Empty;
        public bool HasScaleSet
        {
            get { return hasScaleSet; }
        }
        public pb::ByteString ScaleSet
        {
            get { return scaleSet_; }
        }

        public const int Standby1FieldNumber = 32;
        private bool hasStandby1;
        private uint standby1_;
        public bool HasStandby1
        {
            get { return hasStandby1; }
        }
        [global::System.CLSCompliant(false)]
        public uint Standby1
        {
            get { return standby1_; }
        }

        public const int Standby2FieldNumber = 33;
        private bool hasStandby2;
        private uint standby2_;
        public bool HasStandby2
        {
            get { return hasStandby2; }
        }
        [global::System.CLSCompliant(false)]
        public uint Standby2
        {
            get { return standby2_; }
        }

        public const int Standby3FieldNumber = 34;
        private bool hasStandby3;
        private pb::ByteString standby3_ = pb::ByteString.Empty;
        public bool HasStandby3
        {
            get { return hasStandby3; }
        }
        public pb::ByteString Standby3
        {
            get { return standby3_; }
        }

        public const int Standby4FieldNumber = 35;
        private bool hasStandby4;
        private pb::ByteString standby4_ = pb::ByteString.Empty;
        public bool HasStandby4
        {
            get { return hasStandby4; }
        }
        public pb::ByteString Standby4
        {
            get { return standby4_; }
        }

        public const int Standby5FieldNumber = 36;
        private bool hasStandby5;
        private pb::ByteString standby5_ = pb::ByteString.Empty;
        public bool HasStandby5
        {
            get { return hasStandby5; }
        }
        public pb::ByteString Standby5
        {
            get { return standby5_; }
        }

        public const int Standby6FieldNumber = 37;
        private bool hasStandby6;
        private pb::ByteString standby6_ = pb::ByteString.Empty;
        public bool HasStandby6
        {
            get { return hasStandby6; }
        }
        public pb::ByteString Standby6
        {
            get { return standby6_; }
        }

        public const int Standby7FieldNumber = 38;
        private bool hasStandby7;
        private pb::ByteString standby7_ = pb::ByteString.Empty;
        public bool HasStandby7
        {
            get { return hasStandby7; }
        }
        public pb::ByteString Standby7
        {
            get { return standby7_; }
        }

        public const int Standby8FieldNumber = 39;
        private bool hasStandby8;
        private pb::ByteString standby8_ = pb::ByteString.Empty;
        public bool HasStandby8
        {
            get { return hasStandby8; }
        }
        public pb::ByteString Standby8
        {
            get { return standby8_; }
        }

        public const int Standby10FieldNumber = 40;
        private bool hasStandby10;
        private uint standby10_;
        public bool HasStandby10
        {
            get { return hasStandby10; }
        }
        [global::System.CLSCompliant(false)]
        public uint Standby10
        {
            get { return standby10_; }
        }

        public const int SignFieldNumber = 41;
        private bool hasSign;
        private pb::ByteString sign_ = pb::ByteString.Empty;
        public bool HasSign
        {
            get { return hasSign; }
        }
        public pb::ByteString Sign
        {
            get { return sign_; }
        }

        public override bool IsInitialized
        {
            get
            {
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _hongBaoSendOrderFieldNames;
            if (hasSpid)
            {
                output.WriteBytes(1, field_names[25], Spid);
            }
            if (hasListid)
            {
                output.WriteBytes(2, field_names[6], Listid);
            }
            if (hasPayListid)
            {
                output.WriteBytes(3, field_names[15], PayListid);
            }
            if (hasPayType)
            {
                output.WriteUInt32(4, field_names[19], PayType);
            }
            if (hasPayOpenid)
            {
                output.WriteBytes(5, field_names[17], PayOpenid);
            }
            if (hasOpenid)
            {
                output.WriteBytes(6, field_names[13], Openid);
            }
            if (hasName)
            {
                output.WriteBytes(7, field_names[12], Name);
            }
            if (hasHeadImg)
            {
                output.WriteBytes(8, field_names[4], HeadImg);
            }
            if (hasUid)
            {
                output.WriteUInt32(9, field_names[39], Uid);
            }
            if (hasLstate)
            {
                output.WriteUInt32(10, field_names[7], Lstate);
            }
            if (hasState)
            {
                output.WriteEnum(11, field_names[35], (int)State, State);
            }
            if (hasType)
            {
                output.WriteUInt32(12, field_names[38], Type);
            }
            if (hasChannel)
            {
                output.WriteUInt32(13, field_names[0], Channel);
            }
            if (hasCurtype)
            {
                output.WriteUInt32(14, field_names[3], Curtype);
            }
            if (hasTotalNum)
            {
                output.WriteUInt32(15, field_names[37], TotalNum);
            }
            if (hasTotalAmount)
            {
                output.WriteUInt64(16, field_names[36], TotalAmount);
            }
            if (hasMinValue)
            {
                output.WriteUInt64(17, field_names[10], MinValue);
            }
            if (hasMaxValue)
            {
                output.WriteUInt64(18, field_names[8], MaxValue);
            }
            if (hasReceivedNum)
            {
                output.WriteUInt32(19, field_names[21], ReceivedNum);
            }
            if (hasReceivedAmount)
            {
                output.WriteUInt64(20, field_names[20], ReceivedAmount);
            }
            if (hasClientIp)
            {
                output.WriteBytes(21, field_names[1], ClientIp);
            }
            if (hasWishing)
            {
                output.WriteBytes(22, field_names[40], Wishing);
            }
            if (hasMemo)
            {
                output.WriteBytes(23, field_names[9], Memo);
            }
            if (hasPayMemo)
            {
                output.WriteBytes(24, field_names[16], PayMemo);
            }
            if (hasCreateTime)
            {
                output.WriteBytes(25, field_names[2], CreateTime);
            }
            if (hasInvalidTime)
            {
                output.WriteBytes(26, field_names[5], InvalidTime);
            }
            if (hasPayFrontTime)
            {
                output.WriteBytes(27, field_names[14], PayFrontTime);
            }
            if (hasPayTime)
            {
                output.WriteBytes(28, field_names[18], PayTime);
            }
            if (hasModifyTime)
            {
                output.WriteBytes(29, field_names[11], ModifyTime);
            }
            if (hasScaleCount)
            {
                output.WriteUInt32(30, field_names[22], ScaleCount);
            }
            if (hasScaleSet)
            {
                output.WriteBytes(31, field_names[23], ScaleSet);
            }
            if (hasStandby1)
            {
                output.WriteUInt32(32, field_names[26], Standby1);
            }
            if (hasStandby2)
            {
                output.WriteUInt32(33, field_names[28], Standby2);
            }
            if (hasStandby3)
            {
                output.WriteBytes(34, field_names[29], Standby3);
            }
            if (hasStandby4)
            {
                output.WriteBytes(35, field_names[30], Standby4);
            }
            if (hasStandby5)
            {
                output.WriteBytes(36, field_names[31], Standby5);
            }
            if (hasStandby6)
            {
                output.WriteBytes(37, field_names[32], Standby6);
            }
            if (hasStandby7)
            {
                output.WriteBytes(38, field_names[33], Standby7);
            }
            if (hasStandby8)
            {
                output.WriteBytes(39, field_names[34], Standby8);
            }
            if (hasStandby10)
            {
                output.WriteUInt32(40, field_names[27], Standby10);
            }
            if (hasSign)
            {
                output.WriteBytes(41, field_names[24], Sign);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasSpid)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(1, Spid);
                }
                if (hasListid)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(2, Listid);
                }
                if (hasPayListid)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(3, PayListid);
                }
                if (hasPayType)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(4, PayType);
                }
                if (hasPayOpenid)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(5, PayOpenid);
                }
                if (hasOpenid)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(6, Openid);
                }
                if (hasName)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(7, Name);
                }
                if (hasHeadImg)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(8, HeadImg);
                }
                if (hasUid)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(9, Uid);
                }
                if (hasLstate)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(10, Lstate);
                }
                if (hasState)
                {
                    size += pb::CodedOutputStream.ComputeEnumSize(11, (int)State);
                }
                if (hasType)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(12, Type);
                }
                if (hasChannel)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(13, Channel);
                }
                if (hasCurtype)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(14, Curtype);
                }
                if (hasTotalNum)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(15, TotalNum);
                }
                if (hasTotalAmount)
                {
                    size += pb::CodedOutputStream.ComputeUInt64Size(16, TotalAmount);
                }
                if (hasMinValue)
                {
                    size += pb::CodedOutputStream.ComputeUInt64Size(17, MinValue);
                }
                if (hasMaxValue)
                {
                    size += pb::CodedOutputStream.ComputeUInt64Size(18, MaxValue);
                }
                if (hasReceivedNum)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(19, ReceivedNum);
                }
                if (hasReceivedAmount)
                {
                    size += pb::CodedOutputStream.ComputeUInt64Size(20, ReceivedAmount);
                }
                if (hasClientIp)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(21, ClientIp);
                }
                if (hasWishing)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(22, Wishing);
                }
                if (hasMemo)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(23, Memo);
                }
                if (hasPayMemo)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(24, PayMemo);
                }
                if (hasCreateTime)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(25, CreateTime);
                }
                if (hasInvalidTime)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(26, InvalidTime);
                }
                if (hasPayFrontTime)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(27, PayFrontTime);
                }
                if (hasPayTime)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(28, PayTime);
                }
                if (hasModifyTime)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(29, ModifyTime);
                }
                if (hasScaleCount)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(30, ScaleCount);
                }
                if (hasScaleSet)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(31, ScaleSet);
                }
                if (hasStandby1)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(32, Standby1);
                }
                if (hasStandby2)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(33, Standby2);
                }
                if (hasStandby3)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(34, Standby3);
                }
                if (hasStandby4)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(35, Standby4);
                }
                if (hasStandby5)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(36, Standby5);
                }
                if (hasStandby6)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(37, Standby6);
                }
                if (hasStandby7)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(38, Standby7);
                }
                if (hasStandby8)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(39, Standby8);
                }
                if (hasStandby10)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(40, Standby10);
                }
                if (hasSign)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(41, Sign);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static HongBaoSendOrder ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static HongBaoSendOrder ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static HongBaoSendOrder ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static HongBaoSendOrder ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static HongBaoSendOrder ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static HongBaoSendOrder ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static HongBaoSendOrder ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static HongBaoSendOrder ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static HongBaoSendOrder ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static HongBaoSendOrder ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private HongBaoSendOrder MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(HongBaoSendOrder prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<HongBaoSendOrder, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(HongBaoSendOrder cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private HongBaoSendOrder result;

            private HongBaoSendOrder PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    HongBaoSendOrder original = result;
                    result = new HongBaoSendOrder();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override HongBaoSendOrder MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoSendOrder.Descriptor; }
            }

            public override HongBaoSendOrder DefaultInstanceForType
            {
                get { return CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoSendOrder.DefaultInstance; }
            }

            public override HongBaoSendOrder BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is HongBaoSendOrder)
                {
                    return MergeFrom((HongBaoSendOrder)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(HongBaoSendOrder other)
            {
                if (other == CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoSendOrder.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasSpid)
                {
                    Spid = other.Spid;
                }
                if (other.HasListid)
                {
                    Listid = other.Listid;
                }
                if (other.HasPayListid)
                {
                    PayListid = other.PayListid;
                }
                if (other.HasPayType)
                {
                    PayType = other.PayType;
                }
                if (other.HasPayOpenid)
                {
                    PayOpenid = other.PayOpenid;
                }
                if (other.HasOpenid)
                {
                    Openid = other.Openid;
                }
                if (other.HasName)
                {
                    Name = other.Name;
                }
                if (other.HasHeadImg)
                {
                    HeadImg = other.HeadImg;
                }
                if (other.HasUid)
                {
                    Uid = other.Uid;
                }
                if (other.HasLstate)
                {
                    Lstate = other.Lstate;
                }
                if (other.HasState)
                {
                    State = other.State;
                }
                if (other.HasType)
                {
                    Type = other.Type;
                }
                if (other.HasChannel)
                {
                    Channel = other.Channel;
                }
                if (other.HasCurtype)
                {
                    Curtype = other.Curtype;
                }
                if (other.HasTotalNum)
                {
                    TotalNum = other.TotalNum;
                }
                if (other.HasTotalAmount)
                {
                    TotalAmount = other.TotalAmount;
                }
                if (other.HasMinValue)
                {
                    MinValue = other.MinValue;
                }
                if (other.HasMaxValue)
                {
                    MaxValue = other.MaxValue;
                }
                if (other.HasReceivedNum)
                {
                    ReceivedNum = other.ReceivedNum;
                }
                if (other.HasReceivedAmount)
                {
                    ReceivedAmount = other.ReceivedAmount;
                }
                if (other.HasClientIp)
                {
                    ClientIp = other.ClientIp;
                }
                if (other.HasWishing)
                {
                    Wishing = other.Wishing;
                }
                if (other.HasMemo)
                {
                    Memo = other.Memo;
                }
                if (other.HasPayMemo)
                {
                    PayMemo = other.PayMemo;
                }
                if (other.HasCreateTime)
                {
                    CreateTime = other.CreateTime;
                }
                if (other.HasInvalidTime)
                {
                    InvalidTime = other.InvalidTime;
                }
                if (other.HasPayFrontTime)
                {
                    PayFrontTime = other.PayFrontTime;
                }
                if (other.HasPayTime)
                {
                    PayTime = other.PayTime;
                }
                if (other.HasModifyTime)
                {
                    ModifyTime = other.ModifyTime;
                }
                if (other.HasScaleCount)
                {
                    ScaleCount = other.ScaleCount;
                }
                if (other.HasScaleSet)
                {
                    ScaleSet = other.ScaleSet;
                }
                if (other.HasStandby1)
                {
                    Standby1 = other.Standby1;
                }
                if (other.HasStandby2)
                {
                    Standby2 = other.Standby2;
                }
                if (other.HasStandby3)
                {
                    Standby3 = other.Standby3;
                }
                if (other.HasStandby4)
                {
                    Standby4 = other.Standby4;
                }
                if (other.HasStandby5)
                {
                    Standby5 = other.Standby5;
                }
                if (other.HasStandby6)
                {
                    Standby6 = other.Standby6;
                }
                if (other.HasStandby7)
                {
                    Standby7 = other.Standby7;
                }
                if (other.HasStandby8)
                {
                    Standby8 = other.Standby8;
                }
                if (other.HasStandby10)
                {
                    Standby10 = other.Standby10;
                }
                if (other.HasSign)
                {
                    Sign = other.Sign;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_hongBaoSendOrderFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _hongBaoSendOrderFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                result.hasSpid = input.ReadBytes(ref result.spid_);
                                break;
                            }
                        case 18:
                            {
                                result.hasListid = input.ReadBytes(ref result.listid_);
                                break;
                            }
                        case 26:
                            {
                                result.hasPayListid = input.ReadBytes(ref result.payListid_);
                                break;
                            }
                        case 32:
                            {
                                result.hasPayType = input.ReadUInt32(ref result.payType_);
                                break;
                            }
                        case 42:
                            {
                                result.hasPayOpenid = input.ReadBytes(ref result.payOpenid_);
                                break;
                            }
                        case 50:
                            {
                                result.hasOpenid = input.ReadBytes(ref result.openid_);
                                break;
                            }
                        case 58:
                            {
                                result.hasName = input.ReadBytes(ref result.name_);
                                break;
                            }
                        case 66:
                            {
                                result.hasHeadImg = input.ReadBytes(ref result.headImg_);
                                break;
                            }
                        case 72:
                            {
                                result.hasUid = input.ReadUInt32(ref result.uid_);
                                break;
                            }
                        case 80:
                            {
                                result.hasLstate = input.ReadUInt32(ref result.lstate_);
                                break;
                            }
                        case 88:
                            {
                                object unknown;
                                if (input.ReadEnum(ref result.state_, out unknown))
                                {
                                    result.hasState = true;
                                }
                                else if (unknown is int)
                                {
                                    if (unknownFields == null)
                                    {
                                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                    }
                                    unknownFields.MergeVarintField(11, (ulong)(int)unknown);
                                }
                                break;
                            }
                        case 96:
                            {
                                result.hasType = input.ReadUInt32(ref result.type_);
                                break;
                            }
                        case 104:
                            {
                                result.hasChannel = input.ReadUInt32(ref result.channel_);
                                break;
                            }
                        case 112:
                            {
                                result.hasCurtype = input.ReadUInt32(ref result.curtype_);
                                break;
                            }
                        case 120:
                            {
                                result.hasTotalNum = input.ReadUInt32(ref result.totalNum_);
                                break;
                            }
                        case 128:
                            {
                                result.hasTotalAmount = input.ReadUInt64(ref result.totalAmount_);
                                break;
                            }
                        case 136:
                            {
                                result.hasMinValue = input.ReadUInt64(ref result.minValue_);
                                break;
                            }
                        case 144:
                            {
                                result.hasMaxValue = input.ReadUInt64(ref result.maxValue_);
                                break;
                            }
                        case 152:
                            {
                                result.hasReceivedNum = input.ReadUInt32(ref result.receivedNum_);
                                break;
                            }
                        case 160:
                            {
                                result.hasReceivedAmount = input.ReadUInt64(ref result.receivedAmount_);
                                break;
                            }
                        case 170:
                            {
                                result.hasClientIp = input.ReadBytes(ref result.clientIp_);
                                break;
                            }
                        case 178:
                            {
                                result.hasWishing = input.ReadBytes(ref result.wishing_);
                                break;
                            }
                        case 186:
                            {
                                result.hasMemo = input.ReadBytes(ref result.memo_);
                                break;
                            }
                        case 194:
                            {
                                result.hasPayMemo = input.ReadBytes(ref result.payMemo_);
                                break;
                            }
                        case 202:
                            {
                                result.hasCreateTime = input.ReadBytes(ref result.createTime_);
                                break;
                            }
                        case 210:
                            {
                                result.hasInvalidTime = input.ReadBytes(ref result.invalidTime_);
                                break;
                            }
                        case 218:
                            {
                                result.hasPayFrontTime = input.ReadBytes(ref result.payFrontTime_);
                                break;
                            }
                        case 226:
                            {
                                result.hasPayTime = input.ReadBytes(ref result.payTime_);
                                break;
                            }
                        case 234:
                            {
                                result.hasModifyTime = input.ReadBytes(ref result.modifyTime_);
                                break;
                            }
                        case 240:
                            {
                                result.hasScaleCount = input.ReadUInt32(ref result.scaleCount_);
                                break;
                            }
                        case 250:
                            {
                                result.hasScaleSet = input.ReadBytes(ref result.scaleSet_);
                                break;
                            }
                        case 256:
                            {
                                result.hasStandby1 = input.ReadUInt32(ref result.standby1_);
                                break;
                            }
                        case 264:
                            {
                                result.hasStandby2 = input.ReadUInt32(ref result.standby2_);
                                break;
                            }
                        case 274:
                            {
                                result.hasStandby3 = input.ReadBytes(ref result.standby3_);
                                break;
                            }
                        case 282:
                            {
                                result.hasStandby4 = input.ReadBytes(ref result.standby4_);
                                break;
                            }
                        case 290:
                            {
                                result.hasStandby5 = input.ReadBytes(ref result.standby5_);
                                break;
                            }
                        case 298:
                            {
                                result.hasStandby6 = input.ReadBytes(ref result.standby6_);
                                break;
                            }
                        case 306:
                            {
                                result.hasStandby7 = input.ReadBytes(ref result.standby7_);
                                break;
                            }
                        case 314:
                            {
                                result.hasStandby8 = input.ReadBytes(ref result.standby8_);
                                break;
                            }
                        case 320:
                            {
                                result.hasStandby10 = input.ReadUInt32(ref result.standby10_);
                                break;
                            }
                        case 330:
                            {
                                result.hasSign = input.ReadBytes(ref result.sign_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasSpid
            {
                get { return result.hasSpid; }
            }
            public pb::ByteString Spid
            {
                get { return result.Spid; }
                set { SetSpid(value); }
            }
            public Builder SetSpid(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasSpid = true;
                result.spid_ = value;
                return this;
            }
            public Builder ClearSpid()
            {
                PrepareBuilder();
                result.hasSpid = false;
                result.spid_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasListid
            {
                get { return result.hasListid; }
            }
            public pb::ByteString Listid
            {
                get { return result.Listid; }
                set { SetListid(value); }
            }
            public Builder SetListid(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasListid = true;
                result.listid_ = value;
                return this;
            }
            public Builder ClearListid()
            {
                PrepareBuilder();
                result.hasListid = false;
                result.listid_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasPayListid
            {
                get { return result.hasPayListid; }
            }
            public pb::ByteString PayListid
            {
                get { return result.PayListid; }
                set { SetPayListid(value); }
            }
            public Builder SetPayListid(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasPayListid = true;
                result.payListid_ = value;
                return this;
            }
            public Builder ClearPayListid()
            {
                PrepareBuilder();
                result.hasPayListid = false;
                result.payListid_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasPayType
            {
                get { return result.hasPayType; }
            }
            [global::System.CLSCompliant(false)]
            public uint PayType
            {
                get { return result.PayType; }
                set { SetPayType(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetPayType(uint value)
            {
                PrepareBuilder();
                result.hasPayType = true;
                result.payType_ = value;
                return this;
            }
            public Builder ClearPayType()
            {
                PrepareBuilder();
                result.hasPayType = false;
                result.payType_ = 0;
                return this;
            }

            public bool HasPayOpenid
            {
                get { return result.hasPayOpenid; }
            }
            public pb::ByteString PayOpenid
            {
                get { return result.PayOpenid; }
                set { SetPayOpenid(value); }
            }
            public Builder SetPayOpenid(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasPayOpenid = true;
                result.payOpenid_ = value;
                return this;
            }
            public Builder ClearPayOpenid()
            {
                PrepareBuilder();
                result.hasPayOpenid = false;
                result.payOpenid_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasOpenid
            {
                get { return result.hasOpenid; }
            }
            public pb::ByteString Openid
            {
                get { return result.Openid; }
                set { SetOpenid(value); }
            }
            public Builder SetOpenid(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasOpenid = true;
                result.openid_ = value;
                return this;
            }
            public Builder ClearOpenid()
            {
                PrepareBuilder();
                result.hasOpenid = false;
                result.openid_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasName
            {
                get { return result.hasName; }
            }
            public pb::ByteString Name
            {
                get { return result.Name; }
                set { SetName(value); }
            }
            public Builder SetName(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasName = true;
                result.name_ = value;
                return this;
            }
            public Builder ClearName()
            {
                PrepareBuilder();
                result.hasName = false;
                result.name_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasHeadImg
            {
                get { return result.hasHeadImg; }
            }
            public pb::ByteString HeadImg
            {
                get { return result.HeadImg; }
                set { SetHeadImg(value); }
            }
            public Builder SetHeadImg(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasHeadImg = true;
                result.headImg_ = value;
                return this;
            }
            public Builder ClearHeadImg()
            {
                PrepareBuilder();
                result.hasHeadImg = false;
                result.headImg_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasUid
            {
                get { return result.hasUid; }
            }
            [global::System.CLSCompliant(false)]
            public uint Uid
            {
                get { return result.Uid; }
                set { SetUid(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetUid(uint value)
            {
                PrepareBuilder();
                result.hasUid = true;
                result.uid_ = value;
                return this;
            }
            public Builder ClearUid()
            {
                PrepareBuilder();
                result.hasUid = false;
                result.uid_ = 0;
                return this;
            }

            public bool HasLstate
            {
                get { return result.hasLstate; }
            }
            [global::System.CLSCompliant(false)]
            public uint Lstate
            {
                get { return result.Lstate; }
                set { SetLstate(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetLstate(uint value)
            {
                PrepareBuilder();
                result.hasLstate = true;
                result.lstate_ = value;
                return this;
            }
            public Builder ClearLstate()
            {
                PrepareBuilder();
                result.hasLstate = false;
                result.lstate_ = 0;
                return this;
            }

            public bool HasState
            {
                get { return result.hasState; }
            }
            public CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoSendOrder.Types.StateType State
            {
                get { return result.State; }
                set { SetState(value); }
            }
            public Builder SetState(CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoSendOrder.Types.StateType value)
            {
                PrepareBuilder();
                result.hasState = true;
                result.state_ = value;
                return this;
            }
            public Builder ClearState()
            {
                PrepareBuilder();
                result.hasState = false;
                result.state_ = CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoSendOrder.Types.StateType.INVALID;
                return this;
            }

            public bool HasType
            {
                get { return result.hasType; }
            }
            [global::System.CLSCompliant(false)]
            public uint Type
            {
                get { return result.Type; }
                set { SetType(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetType(uint value)
            {
                PrepareBuilder();
                result.hasType = true;
                result.type_ = value;
                return this;
            }
            public Builder ClearType()
            {
                PrepareBuilder();
                result.hasType = false;
                result.type_ = 0;
                return this;
            }

            public bool HasChannel
            {
                get { return result.hasChannel; }
            }
            [global::System.CLSCompliant(false)]
            public uint Channel
            {
                get { return result.Channel; }
                set { SetChannel(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetChannel(uint value)
            {
                PrepareBuilder();
                result.hasChannel = true;
                result.channel_ = value;
                return this;
            }
            public Builder ClearChannel()
            {
                PrepareBuilder();
                result.hasChannel = false;
                result.channel_ = 0;
                return this;
            }

            public bool HasCurtype
            {
                get { return result.hasCurtype; }
            }
            [global::System.CLSCompliant(false)]
            public uint Curtype
            {
                get { return result.Curtype; }
                set { SetCurtype(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetCurtype(uint value)
            {
                PrepareBuilder();
                result.hasCurtype = true;
                result.curtype_ = value;
                return this;
            }
            public Builder ClearCurtype()
            {
                PrepareBuilder();
                result.hasCurtype = false;
                result.curtype_ = 0;
                return this;
            }

            public bool HasTotalNum
            {
                get { return result.hasTotalNum; }
            }
            [global::System.CLSCompliant(false)]
            public uint TotalNum
            {
                get { return result.TotalNum; }
                set { SetTotalNum(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetTotalNum(uint value)
            {
                PrepareBuilder();
                result.hasTotalNum = true;
                result.totalNum_ = value;
                return this;
            }
            public Builder ClearTotalNum()
            {
                PrepareBuilder();
                result.hasTotalNum = false;
                result.totalNum_ = 0;
                return this;
            }

            public bool HasTotalAmount
            {
                get { return result.hasTotalAmount; }
            }
            [global::System.CLSCompliant(false)]
            public ulong TotalAmount
            {
                get { return result.TotalAmount; }
                set { SetTotalAmount(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetTotalAmount(ulong value)
            {
                PrepareBuilder();
                result.hasTotalAmount = true;
                result.totalAmount_ = value;
                return this;
            }
            public Builder ClearTotalAmount()
            {
                PrepareBuilder();
                result.hasTotalAmount = false;
                result.totalAmount_ = 0UL;
                return this;
            }

            public bool HasMinValue
            {
                get { return result.hasMinValue; }
            }
            [global::System.CLSCompliant(false)]
            public ulong MinValue
            {
                get { return result.MinValue; }
                set { SetMinValue(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetMinValue(ulong value)
            {
                PrepareBuilder();
                result.hasMinValue = true;
                result.minValue_ = value;
                return this;
            }
            public Builder ClearMinValue()
            {
                PrepareBuilder();
                result.hasMinValue = false;
                result.minValue_ = 0UL;
                return this;
            }

            public bool HasMaxValue
            {
                get { return result.hasMaxValue; }
            }
            [global::System.CLSCompliant(false)]
            public ulong MaxValue
            {
                get { return result.MaxValue; }
                set { SetMaxValue(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetMaxValue(ulong value)
            {
                PrepareBuilder();
                result.hasMaxValue = true;
                result.maxValue_ = value;
                return this;
            }
            public Builder ClearMaxValue()
            {
                PrepareBuilder();
                result.hasMaxValue = false;
                result.maxValue_ = 0UL;
                return this;
            }

            public bool HasReceivedNum
            {
                get { return result.hasReceivedNum; }
            }
            [global::System.CLSCompliant(false)]
            public uint ReceivedNum
            {
                get { return result.ReceivedNum; }
                set { SetReceivedNum(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetReceivedNum(uint value)
            {
                PrepareBuilder();
                result.hasReceivedNum = true;
                result.receivedNum_ = value;
                return this;
            }
            public Builder ClearReceivedNum()
            {
                PrepareBuilder();
                result.hasReceivedNum = false;
                result.receivedNum_ = 0;
                return this;
            }

            public bool HasReceivedAmount
            {
                get { return result.hasReceivedAmount; }
            }
            [global::System.CLSCompliant(false)]
            public ulong ReceivedAmount
            {
                get { return result.ReceivedAmount; }
                set { SetReceivedAmount(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetReceivedAmount(ulong value)
            {
                PrepareBuilder();
                result.hasReceivedAmount = true;
                result.receivedAmount_ = value;
                return this;
            }
            public Builder ClearReceivedAmount()
            {
                PrepareBuilder();
                result.hasReceivedAmount = false;
                result.receivedAmount_ = 0UL;
                return this;
            }

            public bool HasClientIp
            {
                get { return result.hasClientIp; }
            }
            public pb::ByteString ClientIp
            {
                get { return result.ClientIp; }
                set { SetClientIp(value); }
            }
            public Builder SetClientIp(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasClientIp = true;
                result.clientIp_ = value;
                return this;
            }
            public Builder ClearClientIp()
            {
                PrepareBuilder();
                result.hasClientIp = false;
                result.clientIp_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasWishing
            {
                get { return result.hasWishing; }
            }
            public pb::ByteString Wishing
            {
                get { return result.Wishing; }
                set { SetWishing(value); }
            }
            public Builder SetWishing(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasWishing = true;
                result.wishing_ = value;
                return this;
            }
            public Builder ClearWishing()
            {
                PrepareBuilder();
                result.hasWishing = false;
                result.wishing_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasMemo
            {
                get { return result.hasMemo; }
            }
            public pb::ByteString Memo
            {
                get { return result.Memo; }
                set { SetMemo(value); }
            }
            public Builder SetMemo(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasMemo = true;
                result.memo_ = value;
                return this;
            }
            public Builder ClearMemo()
            {
                PrepareBuilder();
                result.hasMemo = false;
                result.memo_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasPayMemo
            {
                get { return result.hasPayMemo; }
            }
            public pb::ByteString PayMemo
            {
                get { return result.PayMemo; }
                set { SetPayMemo(value); }
            }
            public Builder SetPayMemo(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasPayMemo = true;
                result.payMemo_ = value;
                return this;
            }
            public Builder ClearPayMemo()
            {
                PrepareBuilder();
                result.hasPayMemo = false;
                result.payMemo_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasCreateTime
            {
                get { return result.hasCreateTime; }
            }
            public pb::ByteString CreateTime
            {
                get { return result.CreateTime; }
                set { SetCreateTime(value); }
            }
            public Builder SetCreateTime(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasCreateTime = true;
                result.createTime_ = value;
                return this;
            }
            public Builder ClearCreateTime()
            {
                PrepareBuilder();
                result.hasCreateTime = false;
                result.createTime_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasInvalidTime
            {
                get { return result.hasInvalidTime; }
            }
            public pb::ByteString InvalidTime
            {
                get { return result.InvalidTime; }
                set { SetInvalidTime(value); }
            }
            public Builder SetInvalidTime(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasInvalidTime = true;
                result.invalidTime_ = value;
                return this;
            }
            public Builder ClearInvalidTime()
            {
                PrepareBuilder();
                result.hasInvalidTime = false;
                result.invalidTime_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasPayFrontTime
            {
                get { return result.hasPayFrontTime; }
            }
            public pb::ByteString PayFrontTime
            {
                get { return result.PayFrontTime; }
                set { SetPayFrontTime(value); }
            }
            public Builder SetPayFrontTime(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasPayFrontTime = true;
                result.payFrontTime_ = value;
                return this;
            }
            public Builder ClearPayFrontTime()
            {
                PrepareBuilder();
                result.hasPayFrontTime = false;
                result.payFrontTime_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasPayTime
            {
                get { return result.hasPayTime; }
            }
            public pb::ByteString PayTime
            {
                get { return result.PayTime; }
                set { SetPayTime(value); }
            }
            public Builder SetPayTime(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasPayTime = true;
                result.payTime_ = value;
                return this;
            }
            public Builder ClearPayTime()
            {
                PrepareBuilder();
                result.hasPayTime = false;
                result.payTime_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasModifyTime
            {
                get { return result.hasModifyTime; }
            }
            public pb::ByteString ModifyTime
            {
                get { return result.ModifyTime; }
                set { SetModifyTime(value); }
            }
            public Builder SetModifyTime(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasModifyTime = true;
                result.modifyTime_ = value;
                return this;
            }
            public Builder ClearModifyTime()
            {
                PrepareBuilder();
                result.hasModifyTime = false;
                result.modifyTime_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasScaleCount
            {
                get { return result.hasScaleCount; }
            }
            [global::System.CLSCompliant(false)]
            public uint ScaleCount
            {
                get { return result.ScaleCount; }
                set { SetScaleCount(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetScaleCount(uint value)
            {
                PrepareBuilder();
                result.hasScaleCount = true;
                result.scaleCount_ = value;
                return this;
            }
            public Builder ClearScaleCount()
            {
                PrepareBuilder();
                result.hasScaleCount = false;
                result.scaleCount_ = 0;
                return this;
            }

            public bool HasScaleSet
            {
                get { return result.hasScaleSet; }
            }
            public pb::ByteString ScaleSet
            {
                get { return result.ScaleSet; }
                set { SetScaleSet(value); }
            }
            public Builder SetScaleSet(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasScaleSet = true;
                result.scaleSet_ = value;
                return this;
            }
            public Builder ClearScaleSet()
            {
                PrepareBuilder();
                result.hasScaleSet = false;
                result.scaleSet_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasStandby1
            {
                get { return result.hasStandby1; }
            }
            [global::System.CLSCompliant(false)]
            public uint Standby1
            {
                get { return result.Standby1; }
                set { SetStandby1(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetStandby1(uint value)
            {
                PrepareBuilder();
                result.hasStandby1 = true;
                result.standby1_ = value;
                return this;
            }
            public Builder ClearStandby1()
            {
                PrepareBuilder();
                result.hasStandby1 = false;
                result.standby1_ = 0;
                return this;
            }

            public bool HasStandby2
            {
                get { return result.hasStandby2; }
            }
            [global::System.CLSCompliant(false)]
            public uint Standby2
            {
                get { return result.Standby2; }
                set { SetStandby2(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetStandby2(uint value)
            {
                PrepareBuilder();
                result.hasStandby2 = true;
                result.standby2_ = value;
                return this;
            }
            public Builder ClearStandby2()
            {
                PrepareBuilder();
                result.hasStandby2 = false;
                result.standby2_ = 0;
                return this;
            }

            public bool HasStandby3
            {
                get { return result.hasStandby3; }
            }
            public pb::ByteString Standby3
            {
                get { return result.Standby3; }
                set { SetStandby3(value); }
            }
            public Builder SetStandby3(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasStandby3 = true;
                result.standby3_ = value;
                return this;
            }
            public Builder ClearStandby3()
            {
                PrepareBuilder();
                result.hasStandby3 = false;
                result.standby3_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasStandby4
            {
                get { return result.hasStandby4; }
            }
            public pb::ByteString Standby4
            {
                get { return result.Standby4; }
                set { SetStandby4(value); }
            }
            public Builder SetStandby4(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasStandby4 = true;
                result.standby4_ = value;
                return this;
            }
            public Builder ClearStandby4()
            {
                PrepareBuilder();
                result.hasStandby4 = false;
                result.standby4_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasStandby5
            {
                get { return result.hasStandby5; }
            }
            public pb::ByteString Standby5
            {
                get { return result.Standby5; }
                set { SetStandby5(value); }
            }
            public Builder SetStandby5(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasStandby5 = true;
                result.standby5_ = value;
                return this;
            }
            public Builder ClearStandby5()
            {
                PrepareBuilder();
                result.hasStandby5 = false;
                result.standby5_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasStandby6
            {
                get { return result.hasStandby6; }
            }
            public pb::ByteString Standby6
            {
                get { return result.Standby6; }
                set { SetStandby6(value); }
            }
            public Builder SetStandby6(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasStandby6 = true;
                result.standby6_ = value;
                return this;
            }
            public Builder ClearStandby6()
            {
                PrepareBuilder();
                result.hasStandby6 = false;
                result.standby6_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasStandby7
            {
                get { return result.hasStandby7; }
            }
            public pb::ByteString Standby7
            {
                get { return result.Standby7; }
                set { SetStandby7(value); }
            }
            public Builder SetStandby7(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasStandby7 = true;
                result.standby7_ = value;
                return this;
            }
            public Builder ClearStandby7()
            {
                PrepareBuilder();
                result.hasStandby7 = false;
                result.standby7_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasStandby8
            {
                get { return result.hasStandby8; }
            }
            public pb::ByteString Standby8
            {
                get { return result.Standby8; }
                set { SetStandby8(value); }
            }
            public Builder SetStandby8(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasStandby8 = true;
                result.standby8_ = value;
                return this;
            }
            public Builder ClearStandby8()
            {
                PrepareBuilder();
                result.hasStandby8 = false;
                result.standby8_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasStandby10
            {
                get { return result.hasStandby10; }
            }
            [global::System.CLSCompliant(false)]
            public uint Standby10
            {
                get { return result.Standby10; }
                set { SetStandby10(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetStandby10(uint value)
            {
                PrepareBuilder();
                result.hasStandby10 = true;
                result.standby10_ = value;
                return this;
            }
            public Builder ClearStandby10()
            {
                PrepareBuilder();
                result.hasStandby10 = false;
                result.standby10_ = 0;
                return this;
            }

            public bool HasSign
            {
                get { return result.hasSign; }
            }
            public pb::ByteString Sign
            {
                get { return result.Sign; }
                set { SetSign(value); }
            }
            public Builder SetSign(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasSign = true;
                result.sign_ = value;
                return this;
            }
            public Builder ClearSign()
            {
                PrepareBuilder();
                result.hasSign = false;
                result.sign_ = pb::ByteString.Empty;
                return this;
            }
        }
        static HongBaoSendOrder()
        {
            object.ReferenceEquals(CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.MmpayHongBaoModel.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class HongBaoReceiveOrder : pb::GeneratedMessage<HongBaoReceiveOrder, HongBaoReceiveOrder.Builder>
    {
        private HongBaoReceiveOrder() { }
        private static readonly HongBaoReceiveOrder defaultInstance = new HongBaoReceiveOrder().MakeReadOnly();
        private static readonly string[] _hongBaoReceiveOrderFieldNames = new string[] { "amount", "answer", "b2c_list_id", "channel", "client_ip", "create_time", "curtype", "listid", "lstate", "memo", "modify_time", "pay_time", "receive_img", "receive_name", "receive_openid", "receive_type", "receive_uid", "send_img", "send_list_id", "send_name", "send_openid", "send_uid", "sign", "standby1", "standby10", "standby2", "standby3", "standby4", "standby5", "standby6", "standby7", "standby8", "state", "type", "wishing" };
        private static readonly uint[] _hongBaoReceiveOrderFieldTags = new uint[] { 80, 162, 26, 56, 202, 186, 72, 10, 32, 170, 194, 178, 146, 130, 122, 64, 136, 114, 18, 98, 90, 104, 282, 208, 272, 216, 226, 234, 242, 250, 258, 266, 40, 48, 154 };
        public static HongBaoReceiveOrder DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override HongBaoReceiveOrder DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override HongBaoReceiveOrder ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.MmpayHongBaoModel.internal__static_MmpayHongBaoModel_HongBaoReceiveOrder__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<HongBaoReceiveOrder, HongBaoReceiveOrder.Builder> InternalFieldAccessors
        {
            get { return CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.MmpayHongBaoModel.internal__static_MmpayHongBaoModel_HongBaoReceiveOrder__FieldAccessorTable; }
        }

        #region Nested types
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static partial class Types
        {
            public enum StateType
            {
                RECEIVED = 1,
                TRANSFERED = 2,
                ANSWERED = 3,
                INIT = 90,
                REFUND = 99,
            }

        }
        #endregion

        public const int ListidFieldNumber = 1;
        private bool hasListid;
        private pb::ByteString listid_ = pb::ByteString.Empty;
        public bool HasListid
        {
            get { return hasListid; }
        }
        public pb::ByteString Listid
        {
            get { return listid_; }
        }

        public const int SendListIdFieldNumber = 2;
        private bool hasSendListId;
        private pb::ByteString sendListId_ = pb::ByteString.Empty;
        public bool HasSendListId
        {
            get { return hasSendListId; }
        }
        public pb::ByteString SendListId
        {
            get { return sendListId_; }
        }

        public const int B2CListIdFieldNumber = 3;
        private bool hasB2CListId;
        private pb::ByteString b2CListId_ = pb::ByteString.Empty;
        public bool HasB2CListId
        {
            get { return hasB2CListId; }
        }
        public pb::ByteString B2CListId
        {
            get { return b2CListId_; }
        }

        public const int LstateFieldNumber = 4;
        private bool hasLstate;
        private uint lstate_;
        public bool HasLstate
        {
            get { return hasLstate; }
        }
        [global::System.CLSCompliant(false)]
        public uint Lstate
        {
            get { return lstate_; }
        }

        public const int StateFieldNumber = 5;
        private bool hasState;
        private CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoReceiveOrder.Types.StateType state_ = CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoReceiveOrder.Types.StateType.RECEIVED;
        public bool HasState
        {
            get { return hasState; }
        }
        public CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoReceiveOrder.Types.StateType State
        {
            get { return state_; }
        }

        public const int TypeFieldNumber = 6;
        private bool hasType;
        private uint type_;
        public bool HasType
        {
            get { return hasType; }
        }
        [global::System.CLSCompliant(false)]
        public uint Type
        {
            get { return type_; }
        }

        public const int ChannelFieldNumber = 7;
        private bool hasChannel;
        private uint channel_;
        public bool HasChannel
        {
            get { return hasChannel; }
        }
        [global::System.CLSCompliant(false)]
        public uint Channel
        {
            get { return channel_; }
        }

        public const int ReceiveTypeFieldNumber = 8;
        private bool hasReceiveType;
        private uint receiveType_;
        public bool HasReceiveType
        {
            get { return hasReceiveType; }
        }
        [global::System.CLSCompliant(false)]
        public uint ReceiveType
        {
            get { return receiveType_; }
        }

        public const int CurtypeFieldNumber = 9;
        private bool hasCurtype;
        private uint curtype_;
        public bool HasCurtype
        {
            get { return hasCurtype; }
        }
        [global::System.CLSCompliant(false)]
        public uint Curtype
        {
            get { return curtype_; }
        }

        public const int AmountFieldNumber = 10;
        private bool hasAmount;
        private ulong amount_;
        public bool HasAmount
        {
            get { return hasAmount; }
        }
        [global::System.CLSCompliant(false)]
        public ulong Amount
        {
            get { return amount_; }
        }

        public const int SendOpenidFieldNumber = 11;
        private bool hasSendOpenid;
        private pb::ByteString sendOpenid_ = pb::ByteString.Empty;
        public bool HasSendOpenid
        {
            get { return hasSendOpenid; }
        }
        public pb::ByteString SendOpenid
        {
            get { return sendOpenid_; }
        }

        public const int SendNameFieldNumber = 12;
        private bool hasSendName;
        private pb::ByteString sendName_ = pb::ByteString.Empty;
        public bool HasSendName
        {
            get { return hasSendName; }
        }
        public pb::ByteString SendName
        {
            get { return sendName_; }
        }

        public const int SendUidFieldNumber = 13;
        private bool hasSendUid;
        private uint sendUid_;
        public bool HasSendUid
        {
            get { return hasSendUid; }
        }
        [global::System.CLSCompliant(false)]
        public uint SendUid
        {
            get { return sendUid_; }
        }

        public const int SendImgFieldNumber = 14;
        private bool hasSendImg;
        private pb::ByteString sendImg_ = pb::ByteString.Empty;
        public bool HasSendImg
        {
            get { return hasSendImg; }
        }
        public pb::ByteString SendImg
        {
            get { return sendImg_; }
        }

        public const int ReceiveOpenidFieldNumber = 15;
        private bool hasReceiveOpenid;
        private pb::ByteString receiveOpenid_ = pb::ByteString.Empty;
        public bool HasReceiveOpenid
        {
            get { return hasReceiveOpenid; }
        }
        public pb::ByteString ReceiveOpenid
        {
            get { return receiveOpenid_; }
        }

        public const int ReceiveNameFieldNumber = 16;
        private bool hasReceiveName;
        private pb::ByteString receiveName_ = pb::ByteString.Empty;
        public bool HasReceiveName
        {
            get { return hasReceiveName; }
        }
        public pb::ByteString ReceiveName
        {
            get { return receiveName_; }
        }

        public const int ReceiveUidFieldNumber = 17;
        private bool hasReceiveUid;
        private uint receiveUid_;
        public bool HasReceiveUid
        {
            get { return hasReceiveUid; }
        }
        [global::System.CLSCompliant(false)]
        public uint ReceiveUid
        {
            get { return receiveUid_; }
        }

        public const int ReceiveImgFieldNumber = 18;
        private bool hasReceiveImg;
        private pb::ByteString receiveImg_ = pb::ByteString.Empty;
        public bool HasReceiveImg
        {
            get { return hasReceiveImg; }
        }
        public pb::ByteString ReceiveImg
        {
            get { return receiveImg_; }
        }

        public const int WishingFieldNumber = 19;
        private bool hasWishing;
        private pb::ByteString wishing_ = pb::ByteString.Empty;
        public bool HasWishing
        {
            get { return hasWishing; }
        }
        public pb::ByteString Wishing
        {
            get { return wishing_; }
        }

        public const int AnswerFieldNumber = 20;
        private bool hasAnswer;
        private pb::ByteString answer_ = pb::ByteString.Empty;
        public bool HasAnswer
        {
            get { return hasAnswer; }
        }
        public pb::ByteString Answer
        {
            get { return answer_; }
        }

        public const int MemoFieldNumber = 21;
        private bool hasMemo;
        private pb::ByteString memo_ = pb::ByteString.Empty;
        public bool HasMemo
        {
            get { return hasMemo; }
        }
        public pb::ByteString Memo
        {
            get { return memo_; }
        }

        public const int PayTimeFieldNumber = 22;
        private bool hasPayTime;
        private pb::ByteString payTime_ = pb::ByteString.Empty;
        public bool HasPayTime
        {
            get { return hasPayTime; }
        }
        public pb::ByteString PayTime
        {
            get { return payTime_; }
        }

        public const int CreateTimeFieldNumber = 23;
        private bool hasCreateTime;
        private pb::ByteString createTime_ = pb::ByteString.Empty;
        public bool HasCreateTime
        {
            get { return hasCreateTime; }
        }
        public pb::ByteString CreateTime
        {
            get { return createTime_; }
        }

        public const int ModifyTimeFieldNumber = 24;
        private bool hasModifyTime;
        private pb::ByteString modifyTime_ = pb::ByteString.Empty;
        public bool HasModifyTime
        {
            get { return hasModifyTime; }
        }
        public pb::ByteString ModifyTime
        {
            get { return modifyTime_; }
        }

        public const int ClientIpFieldNumber = 25;
        private bool hasClientIp;
        private pb::ByteString clientIp_ = pb::ByteString.Empty;
        public bool HasClientIp
        {
            get { return hasClientIp; }
        }
        public pb::ByteString ClientIp
        {
            get { return clientIp_; }
        }

        public const int Standby1FieldNumber = 26;
        private bool hasStandby1;
        private uint standby1_;
        public bool HasStandby1
        {
            get { return hasStandby1; }
        }
        [global::System.CLSCompliant(false)]
        public uint Standby1
        {
            get { return standby1_; }
        }

        public const int Standby2FieldNumber = 27;
        private bool hasStandby2;
        private uint standby2_;
        public bool HasStandby2
        {
            get { return hasStandby2; }
        }
        [global::System.CLSCompliant(false)]
        public uint Standby2
        {
            get { return standby2_; }
        }

        public const int Standby3FieldNumber = 28;
        private bool hasStandby3;
        private pb::ByteString standby3_ = pb::ByteString.Empty;
        public bool HasStandby3
        {
            get { return hasStandby3; }
        }
        public pb::ByteString Standby3
        {
            get { return standby3_; }
        }

        public const int Standby4FieldNumber = 29;
        private bool hasStandby4;
        private pb::ByteString standby4_ = pb::ByteString.Empty;
        public bool HasStandby4
        {
            get { return hasStandby4; }
        }
        public pb::ByteString Standby4
        {
            get { return standby4_; }
        }

        public const int Standby5FieldNumber = 30;
        private bool hasStandby5;
        private pb::ByteString standby5_ = pb::ByteString.Empty;
        public bool HasStandby5
        {
            get { return hasStandby5; }
        }
        public pb::ByteString Standby5
        {
            get { return standby5_; }
        }

        public const int Standby6FieldNumber = 31;
        private bool hasStandby6;
        private pb::ByteString standby6_ = pb::ByteString.Empty;
        public bool HasStandby6
        {
            get { return hasStandby6; }
        }
        public pb::ByteString Standby6
        {
            get { return standby6_; }
        }

        public const int Standby7FieldNumber = 32;
        private bool hasStandby7;
        private pb::ByteString standby7_ = pb::ByteString.Empty;
        public bool HasStandby7
        {
            get { return hasStandby7; }
        }
        public pb::ByteString Standby7
        {
            get { return standby7_; }
        }

        public const int Standby8FieldNumber = 33;
        private bool hasStandby8;
        private pb::ByteString standby8_ = pb::ByteString.Empty;
        public bool HasStandby8
        {
            get { return hasStandby8; }
        }
        public pb::ByteString Standby8
        {
            get { return standby8_; }
        }

        public const int Standby10FieldNumber = 34;
        private bool hasStandby10;
        private uint standby10_;
        public bool HasStandby10
        {
            get { return hasStandby10; }
        }
        [global::System.CLSCompliant(false)]
        public uint Standby10
        {
            get { return standby10_; }
        }

        public const int SignFieldNumber = 35;
        private bool hasSign;
        private pb::ByteString sign_ = pb::ByteString.Empty;
        public bool HasSign
        {
            get { return hasSign; }
        }
        public pb::ByteString Sign
        {
            get { return sign_; }
        }

        public override bool IsInitialized
        {
            get
            {
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _hongBaoReceiveOrderFieldNames;
            if (hasListid)
            {
                output.WriteBytes(1, field_names[7], Listid);
            }
            if (hasSendListId)
            {
                output.WriteBytes(2, field_names[18], SendListId);
            }
            if (hasB2CListId)
            {
                output.WriteBytes(3, field_names[2], B2CListId);
            }
            if (hasLstate)
            {
                output.WriteUInt32(4, field_names[8], Lstate);
            }
            if (hasState)
            {
                output.WriteEnum(5, field_names[32], (int)State, State);
            }
            if (hasType)
            {
                output.WriteUInt32(6, field_names[33], Type);
            }
            if (hasChannel)
            {
                output.WriteUInt32(7, field_names[3], Channel);
            }
            if (hasReceiveType)
            {
                output.WriteUInt32(8, field_names[15], ReceiveType);
            }
            if (hasCurtype)
            {
                output.WriteUInt32(9, field_names[6], Curtype);
            }
            if (hasAmount)
            {
                output.WriteUInt64(10, field_names[0], Amount);
            }
            if (hasSendOpenid)
            {
                output.WriteBytes(11, field_names[20], SendOpenid);
            }
            if (hasSendName)
            {
                output.WriteBytes(12, field_names[19], SendName);
            }
            if (hasSendUid)
            {
                output.WriteUInt32(13, field_names[21], SendUid);
            }
            if (hasSendImg)
            {
                output.WriteBytes(14, field_names[17], SendImg);
            }
            if (hasReceiveOpenid)
            {
                output.WriteBytes(15, field_names[14], ReceiveOpenid);
            }
            if (hasReceiveName)
            {
                output.WriteBytes(16, field_names[13], ReceiveName);
            }
            if (hasReceiveUid)
            {
                output.WriteUInt32(17, field_names[16], ReceiveUid);
            }
            if (hasReceiveImg)
            {
                output.WriteBytes(18, field_names[12], ReceiveImg);
            }
            if (hasWishing)
            {
                output.WriteBytes(19, field_names[34], Wishing);
            }
            if (hasAnswer)
            {
                output.WriteBytes(20, field_names[1], Answer);
            }
            if (hasMemo)
            {
                output.WriteBytes(21, field_names[9], Memo);
            }
            if (hasPayTime)
            {
                output.WriteBytes(22, field_names[11], PayTime);
            }
            if (hasCreateTime)
            {
                output.WriteBytes(23, field_names[5], CreateTime);
            }
            if (hasModifyTime)
            {
                output.WriteBytes(24, field_names[10], ModifyTime);
            }
            if (hasClientIp)
            {
                output.WriteBytes(25, field_names[4], ClientIp);
            }
            if (hasStandby1)
            {
                output.WriteUInt32(26, field_names[23], Standby1);
            }
            if (hasStandby2)
            {
                output.WriteUInt32(27, field_names[25], Standby2);
            }
            if (hasStandby3)
            {
                output.WriteBytes(28, field_names[26], Standby3);
            }
            if (hasStandby4)
            {
                output.WriteBytes(29, field_names[27], Standby4);
            }
            if (hasStandby5)
            {
                output.WriteBytes(30, field_names[28], Standby5);
            }
            if (hasStandby6)
            {
                output.WriteBytes(31, field_names[29], Standby6);
            }
            if (hasStandby7)
            {
                output.WriteBytes(32, field_names[30], Standby7);
            }
            if (hasStandby8)
            {
                output.WriteBytes(33, field_names[31], Standby8);
            }
            if (hasStandby10)
            {
                output.WriteUInt32(34, field_names[24], Standby10);
            }
            if (hasSign)
            {
                output.WriteBytes(35, field_names[22], Sign);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasListid)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(1, Listid);
                }
                if (hasSendListId)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(2, SendListId);
                }
                if (hasB2CListId)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(3, B2CListId);
                }
                if (hasLstate)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(4, Lstate);
                }
                if (hasState)
                {
                    size += pb::CodedOutputStream.ComputeEnumSize(5, (int)State);
                }
                if (hasType)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(6, Type);
                }
                if (hasChannel)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(7, Channel);
                }
                if (hasReceiveType)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(8, ReceiveType);
                }
                if (hasCurtype)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(9, Curtype);
                }
                if (hasAmount)
                {
                    size += pb::CodedOutputStream.ComputeUInt64Size(10, Amount);
                }
                if (hasSendOpenid)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(11, SendOpenid);
                }
                if (hasSendName)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(12, SendName);
                }
                if (hasSendUid)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(13, SendUid);
                }
                if (hasSendImg)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(14, SendImg);
                }
                if (hasReceiveOpenid)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(15, ReceiveOpenid);
                }
                if (hasReceiveName)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(16, ReceiveName);
                }
                if (hasReceiveUid)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(17, ReceiveUid);
                }
                if (hasReceiveImg)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(18, ReceiveImg);
                }
                if (hasWishing)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(19, Wishing);
                }
                if (hasAnswer)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(20, Answer);
                }
                if (hasMemo)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(21, Memo);
                }
                if (hasPayTime)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(22, PayTime);
                }
                if (hasCreateTime)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(23, CreateTime);
                }
                if (hasModifyTime)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(24, ModifyTime);
                }
                if (hasClientIp)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(25, ClientIp);
                }
                if (hasStandby1)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(26, Standby1);
                }
                if (hasStandby2)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(27, Standby2);
                }
                if (hasStandby3)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(28, Standby3);
                }
                if (hasStandby4)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(29, Standby4);
                }
                if (hasStandby5)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(30, Standby5);
                }
                if (hasStandby6)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(31, Standby6);
                }
                if (hasStandby7)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(32, Standby7);
                }
                if (hasStandby8)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(33, Standby8);
                }
                if (hasStandby10)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(34, Standby10);
                }
                if (hasSign)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(35, Sign);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static HongBaoReceiveOrder ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static HongBaoReceiveOrder ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static HongBaoReceiveOrder ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static HongBaoReceiveOrder ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static HongBaoReceiveOrder ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static HongBaoReceiveOrder ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static HongBaoReceiveOrder ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static HongBaoReceiveOrder ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static HongBaoReceiveOrder ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static HongBaoReceiveOrder ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private HongBaoReceiveOrder MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(HongBaoReceiveOrder prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<HongBaoReceiveOrder, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(HongBaoReceiveOrder cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private HongBaoReceiveOrder result;

            private HongBaoReceiveOrder PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    HongBaoReceiveOrder original = result;
                    result = new HongBaoReceiveOrder();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override HongBaoReceiveOrder MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoReceiveOrder.Descriptor; }
            }

            public override HongBaoReceiveOrder DefaultInstanceForType
            {
                get { return CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoReceiveOrder.DefaultInstance; }
            }

            public override HongBaoReceiveOrder BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is HongBaoReceiveOrder)
                {
                    return MergeFrom((HongBaoReceiveOrder)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(HongBaoReceiveOrder other)
            {
                if (other == CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoReceiveOrder.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasListid)
                {
                    Listid = other.Listid;
                }
                if (other.HasSendListId)
                {
                    SendListId = other.SendListId;
                }
                if (other.HasB2CListId)
                {
                    B2CListId = other.B2CListId;
                }
                if (other.HasLstate)
                {
                    Lstate = other.Lstate;
                }
                if (other.HasState)
                {
                    State = other.State;
                }
                if (other.HasType)
                {
                    Type = other.Type;
                }
                if (other.HasChannel)
                {
                    Channel = other.Channel;
                }
                if (other.HasReceiveType)
                {
                    ReceiveType = other.ReceiveType;
                }
                if (other.HasCurtype)
                {
                    Curtype = other.Curtype;
                }
                if (other.HasAmount)
                {
                    Amount = other.Amount;
                }
                if (other.HasSendOpenid)
                {
                    SendOpenid = other.SendOpenid;
                }
                if (other.HasSendName)
                {
                    SendName = other.SendName;
                }
                if (other.HasSendUid)
                {
                    SendUid = other.SendUid;
                }
                if (other.HasSendImg)
                {
                    SendImg = other.SendImg;
                }
                if (other.HasReceiveOpenid)
                {
                    ReceiveOpenid = other.ReceiveOpenid;
                }
                if (other.HasReceiveName)
                {
                    ReceiveName = other.ReceiveName;
                }
                if (other.HasReceiveUid)
                {
                    ReceiveUid = other.ReceiveUid;
                }
                if (other.HasReceiveImg)
                {
                    ReceiveImg = other.ReceiveImg;
                }
                if (other.HasWishing)
                {
                    Wishing = other.Wishing;
                }
                if (other.HasAnswer)
                {
                    Answer = other.Answer;
                }
                if (other.HasMemo)
                {
                    Memo = other.Memo;
                }
                if (other.HasPayTime)
                {
                    PayTime = other.PayTime;
                }
                if (other.HasCreateTime)
                {
                    CreateTime = other.CreateTime;
                }
                if (other.HasModifyTime)
                {
                    ModifyTime = other.ModifyTime;
                }
                if (other.HasClientIp)
                {
                    ClientIp = other.ClientIp;
                }
                if (other.HasStandby1)
                {
                    Standby1 = other.Standby1;
                }
                if (other.HasStandby2)
                {
                    Standby2 = other.Standby2;
                }
                if (other.HasStandby3)
                {
                    Standby3 = other.Standby3;
                }
                if (other.HasStandby4)
                {
                    Standby4 = other.Standby4;
                }
                if (other.HasStandby5)
                {
                    Standby5 = other.Standby5;
                }
                if (other.HasStandby6)
                {
                    Standby6 = other.Standby6;
                }
                if (other.HasStandby7)
                {
                    Standby7 = other.Standby7;
                }
                if (other.HasStandby8)
                {
                    Standby8 = other.Standby8;
                }
                if (other.HasStandby10)
                {
                    Standby10 = other.Standby10;
                }
                if (other.HasSign)
                {
                    Sign = other.Sign;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_hongBaoReceiveOrderFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _hongBaoReceiveOrderFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                result.hasListid = input.ReadBytes(ref result.listid_);
                                break;
                            }
                        case 18:
                            {
                                result.hasSendListId = input.ReadBytes(ref result.sendListId_);
                                break;
                            }
                        case 26:
                            {
                                result.hasB2CListId = input.ReadBytes(ref result.b2CListId_);
                                break;
                            }
                        case 32:
                            {
                                result.hasLstate = input.ReadUInt32(ref result.lstate_);
                                break;
                            }
                        case 40:
                            {
                                object unknown;
                                if (input.ReadEnum(ref result.state_, out unknown))
                                {
                                    result.hasState = true;
                                }
                                else if (unknown is int)
                                {
                                    if (unknownFields == null)
                                    {
                                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                    }
                                    unknownFields.MergeVarintField(5, (ulong)(int)unknown);
                                }
                                break;
                            }
                        case 48:
                            {
                                result.hasType = input.ReadUInt32(ref result.type_);
                                break;
                            }
                        case 56:
                            {
                                result.hasChannel = input.ReadUInt32(ref result.channel_);
                                break;
                            }
                        case 64:
                            {
                                result.hasReceiveType = input.ReadUInt32(ref result.receiveType_);
                                break;
                            }
                        case 72:
                            {
                                result.hasCurtype = input.ReadUInt32(ref result.curtype_);
                                break;
                            }
                        case 80:
                            {
                                result.hasAmount = input.ReadUInt64(ref result.amount_);
                                break;
                            }
                        case 90:
                            {
                                result.hasSendOpenid = input.ReadBytes(ref result.sendOpenid_);
                                break;
                            }
                        case 98:
                            {
                                result.hasSendName = input.ReadBytes(ref result.sendName_);
                                break;
                            }
                        case 104:
                            {
                                result.hasSendUid = input.ReadUInt32(ref result.sendUid_);
                                break;
                            }
                        case 114:
                            {
                                result.hasSendImg = input.ReadBytes(ref result.sendImg_);
                                break;
                            }
                        case 122:
                            {
                                result.hasReceiveOpenid = input.ReadBytes(ref result.receiveOpenid_);
                                break;
                            }
                        case 130:
                            {
                                result.hasReceiveName = input.ReadBytes(ref result.receiveName_);
                                break;
                            }
                        case 136:
                            {
                                result.hasReceiveUid = input.ReadUInt32(ref result.receiveUid_);
                                break;
                            }
                        case 146:
                            {
                                result.hasReceiveImg = input.ReadBytes(ref result.receiveImg_);
                                break;
                            }
                        case 154:
                            {
                                result.hasWishing = input.ReadBytes(ref result.wishing_);
                                break;
                            }
                        case 162:
                            {
                                result.hasAnswer = input.ReadBytes(ref result.answer_);
                                break;
                            }
                        case 170:
                            {
                                result.hasMemo = input.ReadBytes(ref result.memo_);
                                break;
                            }
                        case 178:
                            {
                                result.hasPayTime = input.ReadBytes(ref result.payTime_);
                                break;
                            }
                        case 186:
                            {
                                result.hasCreateTime = input.ReadBytes(ref result.createTime_);
                                break;
                            }
                        case 194:
                            {
                                result.hasModifyTime = input.ReadBytes(ref result.modifyTime_);
                                break;
                            }
                        case 202:
                            {
                                result.hasClientIp = input.ReadBytes(ref result.clientIp_);
                                break;
                            }
                        case 208:
                            {
                                result.hasStandby1 = input.ReadUInt32(ref result.standby1_);
                                break;
                            }
                        case 216:
                            {
                                result.hasStandby2 = input.ReadUInt32(ref result.standby2_);
                                break;
                            }
                        case 226:
                            {
                                result.hasStandby3 = input.ReadBytes(ref result.standby3_);
                                break;
                            }
                        case 234:
                            {
                                result.hasStandby4 = input.ReadBytes(ref result.standby4_);
                                break;
                            }
                        case 242:
                            {
                                result.hasStandby5 = input.ReadBytes(ref result.standby5_);
                                break;
                            }
                        case 250:
                            {
                                result.hasStandby6 = input.ReadBytes(ref result.standby6_);
                                break;
                            }
                        case 258:
                            {
                                result.hasStandby7 = input.ReadBytes(ref result.standby7_);
                                break;
                            }
                        case 266:
                            {
                                result.hasStandby8 = input.ReadBytes(ref result.standby8_);
                                break;
                            }
                        case 272:
                            {
                                result.hasStandby10 = input.ReadUInt32(ref result.standby10_);
                                break;
                            }
                        case 282:
                            {
                                result.hasSign = input.ReadBytes(ref result.sign_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasListid
            {
                get { return result.hasListid; }
            }
            public pb::ByteString Listid
            {
                get { return result.Listid; }
                set { SetListid(value); }
            }
            public Builder SetListid(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasListid = true;
                result.listid_ = value;
                return this;
            }
            public Builder ClearListid()
            {
                PrepareBuilder();
                result.hasListid = false;
                result.listid_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasSendListId
            {
                get { return result.hasSendListId; }
            }
            public pb::ByteString SendListId
            {
                get { return result.SendListId; }
                set { SetSendListId(value); }
            }
            public Builder SetSendListId(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasSendListId = true;
                result.sendListId_ = value;
                return this;
            }
            public Builder ClearSendListId()
            {
                PrepareBuilder();
                result.hasSendListId = false;
                result.sendListId_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasB2CListId
            {
                get { return result.hasB2CListId; }
            }
            public pb::ByteString B2CListId
            {
                get { return result.B2CListId; }
                set { SetB2CListId(value); }
            }
            public Builder SetB2CListId(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasB2CListId = true;
                result.b2CListId_ = value;
                return this;
            }
            public Builder ClearB2CListId()
            {
                PrepareBuilder();
                result.hasB2CListId = false;
                result.b2CListId_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasLstate
            {
                get { return result.hasLstate; }
            }
            [global::System.CLSCompliant(false)]
            public uint Lstate
            {
                get { return result.Lstate; }
                set { SetLstate(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetLstate(uint value)
            {
                PrepareBuilder();
                result.hasLstate = true;
                result.lstate_ = value;
                return this;
            }
            public Builder ClearLstate()
            {
                PrepareBuilder();
                result.hasLstate = false;
                result.lstate_ = 0;
                return this;
            }

            public bool HasState
            {
                get { return result.hasState; }
            }
            public CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoReceiveOrder.Types.StateType State
            {
                get { return result.State; }
                set { SetState(value); }
            }
            public Builder SetState(CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoReceiveOrder.Types.StateType value)
            {
                PrepareBuilder();
                result.hasState = true;
                result.state_ = value;
                return this;
            }
            public Builder ClearState()
            {
                PrepareBuilder();
                result.hasState = false;
                result.state_ = CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoReceiveOrder.Types.StateType.RECEIVED;
                return this;
            }

            public bool HasType
            {
                get { return result.hasType; }
            }
            [global::System.CLSCompliant(false)]
            public uint Type
            {
                get { return result.Type; }
                set { SetType(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetType(uint value)
            {
                PrepareBuilder();
                result.hasType = true;
                result.type_ = value;
                return this;
            }
            public Builder ClearType()
            {
                PrepareBuilder();
                result.hasType = false;
                result.type_ = 0;
                return this;
            }

            public bool HasChannel
            {
                get { return result.hasChannel; }
            }
            [global::System.CLSCompliant(false)]
            public uint Channel
            {
                get { return result.Channel; }
                set { SetChannel(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetChannel(uint value)
            {
                PrepareBuilder();
                result.hasChannel = true;
                result.channel_ = value;
                return this;
            }
            public Builder ClearChannel()
            {
                PrepareBuilder();
                result.hasChannel = false;
                result.channel_ = 0;
                return this;
            }

            public bool HasReceiveType
            {
                get { return result.hasReceiveType; }
            }
            [global::System.CLSCompliant(false)]
            public uint ReceiveType
            {
                get { return result.ReceiveType; }
                set { SetReceiveType(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetReceiveType(uint value)
            {
                PrepareBuilder();
                result.hasReceiveType = true;
                result.receiveType_ = value;
                return this;
            }
            public Builder ClearReceiveType()
            {
                PrepareBuilder();
                result.hasReceiveType = false;
                result.receiveType_ = 0;
                return this;
            }

            public bool HasCurtype
            {
                get { return result.hasCurtype; }
            }
            [global::System.CLSCompliant(false)]
            public uint Curtype
            {
                get { return result.Curtype; }
                set { SetCurtype(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetCurtype(uint value)
            {
                PrepareBuilder();
                result.hasCurtype = true;
                result.curtype_ = value;
                return this;
            }
            public Builder ClearCurtype()
            {
                PrepareBuilder();
                result.hasCurtype = false;
                result.curtype_ = 0;
                return this;
            }

            public bool HasAmount
            {
                get { return result.hasAmount; }
            }
            [global::System.CLSCompliant(false)]
            public ulong Amount
            {
                get { return result.Amount; }
                set { SetAmount(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetAmount(ulong value)
            {
                PrepareBuilder();
                result.hasAmount = true;
                result.amount_ = value;
                return this;
            }
            public Builder ClearAmount()
            {
                PrepareBuilder();
                result.hasAmount = false;
                result.amount_ = 0UL;
                return this;
            }

            public bool HasSendOpenid
            {
                get { return result.hasSendOpenid; }
            }
            public pb::ByteString SendOpenid
            {
                get { return result.SendOpenid; }
                set { SetSendOpenid(value); }
            }
            public Builder SetSendOpenid(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasSendOpenid = true;
                result.sendOpenid_ = value;
                return this;
            }
            public Builder ClearSendOpenid()
            {
                PrepareBuilder();
                result.hasSendOpenid = false;
                result.sendOpenid_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasSendName
            {
                get { return result.hasSendName; }
            }
            public pb::ByteString SendName
            {
                get { return result.SendName; }
                set { SetSendName(value); }
            }
            public Builder SetSendName(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasSendName = true;
                result.sendName_ = value;
                return this;
            }
            public Builder ClearSendName()
            {
                PrepareBuilder();
                result.hasSendName = false;
                result.sendName_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasSendUid
            {
                get { return result.hasSendUid; }
            }
            [global::System.CLSCompliant(false)]
            public uint SendUid
            {
                get { return result.SendUid; }
                set { SetSendUid(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetSendUid(uint value)
            {
                PrepareBuilder();
                result.hasSendUid = true;
                result.sendUid_ = value;
                return this;
            }
            public Builder ClearSendUid()
            {
                PrepareBuilder();
                result.hasSendUid = false;
                result.sendUid_ = 0;
                return this;
            }

            public bool HasSendImg
            {
                get { return result.hasSendImg; }
            }
            public pb::ByteString SendImg
            {
                get { return result.SendImg; }
                set { SetSendImg(value); }
            }
            public Builder SetSendImg(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasSendImg = true;
                result.sendImg_ = value;
                return this;
            }
            public Builder ClearSendImg()
            {
                PrepareBuilder();
                result.hasSendImg = false;
                result.sendImg_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasReceiveOpenid
            {
                get { return result.hasReceiveOpenid; }
            }
            public pb::ByteString ReceiveOpenid
            {
                get { return result.ReceiveOpenid; }
                set { SetReceiveOpenid(value); }
            }
            public Builder SetReceiveOpenid(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasReceiveOpenid = true;
                result.receiveOpenid_ = value;
                return this;
            }
            public Builder ClearReceiveOpenid()
            {
                PrepareBuilder();
                result.hasReceiveOpenid = false;
                result.receiveOpenid_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasReceiveName
            {
                get { return result.hasReceiveName; }
            }
            public pb::ByteString ReceiveName
            {
                get { return result.ReceiveName; }
                set { SetReceiveName(value); }
            }
            public Builder SetReceiveName(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasReceiveName = true;
                result.receiveName_ = value;
                return this;
            }
            public Builder ClearReceiveName()
            {
                PrepareBuilder();
                result.hasReceiveName = false;
                result.receiveName_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasReceiveUid
            {
                get { return result.hasReceiveUid; }
            }
            [global::System.CLSCompliant(false)]
            public uint ReceiveUid
            {
                get { return result.ReceiveUid; }
                set { SetReceiveUid(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetReceiveUid(uint value)
            {
                PrepareBuilder();
                result.hasReceiveUid = true;
                result.receiveUid_ = value;
                return this;
            }
            public Builder ClearReceiveUid()
            {
                PrepareBuilder();
                result.hasReceiveUid = false;
                result.receiveUid_ = 0;
                return this;
            }

            public bool HasReceiveImg
            {
                get { return result.hasReceiveImg; }
            }
            public pb::ByteString ReceiveImg
            {
                get { return result.ReceiveImg; }
                set { SetReceiveImg(value); }
            }
            public Builder SetReceiveImg(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasReceiveImg = true;
                result.receiveImg_ = value;
                return this;
            }
            public Builder ClearReceiveImg()
            {
                PrepareBuilder();
                result.hasReceiveImg = false;
                result.receiveImg_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasWishing
            {
                get { return result.hasWishing; }
            }
            public pb::ByteString Wishing
            {
                get { return result.Wishing; }
                set { SetWishing(value); }
            }
            public Builder SetWishing(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasWishing = true;
                result.wishing_ = value;
                return this;
            }
            public Builder ClearWishing()
            {
                PrepareBuilder();
                result.hasWishing = false;
                result.wishing_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasAnswer
            {
                get { return result.hasAnswer; }
            }
            public pb::ByteString Answer
            {
                get { return result.Answer; }
                set { SetAnswer(value); }
            }
            public Builder SetAnswer(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasAnswer = true;
                result.answer_ = value;
                return this;
            }
            public Builder ClearAnswer()
            {
                PrepareBuilder();
                result.hasAnswer = false;
                result.answer_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasMemo
            {
                get { return result.hasMemo; }
            }
            public pb::ByteString Memo
            {
                get { return result.Memo; }
                set { SetMemo(value); }
            }
            public Builder SetMemo(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasMemo = true;
                result.memo_ = value;
                return this;
            }
            public Builder ClearMemo()
            {
                PrepareBuilder();
                result.hasMemo = false;
                result.memo_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasPayTime
            {
                get { return result.hasPayTime; }
            }
            public pb::ByteString PayTime
            {
                get { return result.PayTime; }
                set { SetPayTime(value); }
            }
            public Builder SetPayTime(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasPayTime = true;
                result.payTime_ = value;
                return this;
            }
            public Builder ClearPayTime()
            {
                PrepareBuilder();
                result.hasPayTime = false;
                result.payTime_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasCreateTime
            {
                get { return result.hasCreateTime; }
            }
            public pb::ByteString CreateTime
            {
                get { return result.CreateTime; }
                set { SetCreateTime(value); }
            }
            public Builder SetCreateTime(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasCreateTime = true;
                result.createTime_ = value;
                return this;
            }
            public Builder ClearCreateTime()
            {
                PrepareBuilder();
                result.hasCreateTime = false;
                result.createTime_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasModifyTime
            {
                get { return result.hasModifyTime; }
            }
            public pb::ByteString ModifyTime
            {
                get { return result.ModifyTime; }
                set { SetModifyTime(value); }
            }
            public Builder SetModifyTime(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasModifyTime = true;
                result.modifyTime_ = value;
                return this;
            }
            public Builder ClearModifyTime()
            {
                PrepareBuilder();
                result.hasModifyTime = false;
                result.modifyTime_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasClientIp
            {
                get { return result.hasClientIp; }
            }
            public pb::ByteString ClientIp
            {
                get { return result.ClientIp; }
                set { SetClientIp(value); }
            }
            public Builder SetClientIp(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasClientIp = true;
                result.clientIp_ = value;
                return this;
            }
            public Builder ClearClientIp()
            {
                PrepareBuilder();
                result.hasClientIp = false;
                result.clientIp_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasStandby1
            {
                get { return result.hasStandby1; }
            }
            [global::System.CLSCompliant(false)]
            public uint Standby1
            {
                get { return result.Standby1; }
                set { SetStandby1(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetStandby1(uint value)
            {
                PrepareBuilder();
                result.hasStandby1 = true;
                result.standby1_ = value;
                return this;
            }
            public Builder ClearStandby1()
            {
                PrepareBuilder();
                result.hasStandby1 = false;
                result.standby1_ = 0;
                return this;
            }

            public bool HasStandby2
            {
                get { return result.hasStandby2; }
            }
            [global::System.CLSCompliant(false)]
            public uint Standby2
            {
                get { return result.Standby2; }
                set { SetStandby2(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetStandby2(uint value)
            {
                PrepareBuilder();
                result.hasStandby2 = true;
                result.standby2_ = value;
                return this;
            }
            public Builder ClearStandby2()
            {
                PrepareBuilder();
                result.hasStandby2 = false;
                result.standby2_ = 0;
                return this;
            }

            public bool HasStandby3
            {
                get { return result.hasStandby3; }
            }
            public pb::ByteString Standby3
            {
                get { return result.Standby3; }
                set { SetStandby3(value); }
            }
            public Builder SetStandby3(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasStandby3 = true;
                result.standby3_ = value;
                return this;
            }
            public Builder ClearStandby3()
            {
                PrepareBuilder();
                result.hasStandby3 = false;
                result.standby3_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasStandby4
            {
                get { return result.hasStandby4; }
            }
            public pb::ByteString Standby4
            {
                get { return result.Standby4; }
                set { SetStandby4(value); }
            }
            public Builder SetStandby4(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasStandby4 = true;
                result.standby4_ = value;
                return this;
            }
            public Builder ClearStandby4()
            {
                PrepareBuilder();
                result.hasStandby4 = false;
                result.standby4_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasStandby5
            {
                get { return result.hasStandby5; }
            }
            public pb::ByteString Standby5
            {
                get { return result.Standby5; }
                set { SetStandby5(value); }
            }
            public Builder SetStandby5(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasStandby5 = true;
                result.standby5_ = value;
                return this;
            }
            public Builder ClearStandby5()
            {
                PrepareBuilder();
                result.hasStandby5 = false;
                result.standby5_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasStandby6
            {
                get { return result.hasStandby6; }
            }
            public pb::ByteString Standby6
            {
                get { return result.Standby6; }
                set { SetStandby6(value); }
            }
            public Builder SetStandby6(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasStandby6 = true;
                result.standby6_ = value;
                return this;
            }
            public Builder ClearStandby6()
            {
                PrepareBuilder();
                result.hasStandby6 = false;
                result.standby6_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasStandby7
            {
                get { return result.hasStandby7; }
            }
            public pb::ByteString Standby7
            {
                get { return result.Standby7; }
                set { SetStandby7(value); }
            }
            public Builder SetStandby7(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasStandby7 = true;
                result.standby7_ = value;
                return this;
            }
            public Builder ClearStandby7()
            {
                PrepareBuilder();
                result.hasStandby7 = false;
                result.standby7_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasStandby8
            {
                get { return result.hasStandby8; }
            }
            public pb::ByteString Standby8
            {
                get { return result.Standby8; }
                set { SetStandby8(value); }
            }
            public Builder SetStandby8(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasStandby8 = true;
                result.standby8_ = value;
                return this;
            }
            public Builder ClearStandby8()
            {
                PrepareBuilder();
                result.hasStandby8 = false;
                result.standby8_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasStandby10
            {
                get { return result.hasStandby10; }
            }
            [global::System.CLSCompliant(false)]
            public uint Standby10
            {
                get { return result.Standby10; }
                set { SetStandby10(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetStandby10(uint value)
            {
                PrepareBuilder();
                result.hasStandby10 = true;
                result.standby10_ = value;
                return this;
            }
            public Builder ClearStandby10()
            {
                PrepareBuilder();
                result.hasStandby10 = false;
                result.standby10_ = 0;
                return this;
            }

            public bool HasSign
            {
                get { return result.hasSign; }
            }
            public pb::ByteString Sign
            {
                get { return result.Sign; }
                set { SetSign(value); }
            }
            public Builder SetSign(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasSign = true;
                result.sign_ = value;
                return this;
            }
            public Builder ClearSign()
            {
                PrepareBuilder();
                result.hasSign = false;
                result.sign_ = pb::ByteString.Empty;
                return this;
            }
        }
        static HongBaoReceiveOrder()
        {
            object.ReferenceEquals(CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.MmpayHongBaoModel.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class HongBaoStatisticLatest : pb::GeneratedMessage<HongBaoStatisticLatest, HongBaoStatisticLatest.Builder>
    {
        private HongBaoStatisticLatest() { }
        private static readonly HongBaoStatisticLatest defaultInstance = new HongBaoStatisticLatest().MakeReadOnly();
        private static readonly string[] _hongBaoStatisticLatestFieldNames = new string[] { "create_time", "dim_value", "dimension", "luckiest_count", "luckiest_fee", "memo", "modify_time", "openid", "receive_count", "receive_fee", "send_count", "send_fee", "send_finish_times", "send_received_count", "send_received_fee", "send_times", "sign", "version" };
        private static readonly uint[] _hongBaoStatisticLatestFieldTags = new uint[] { 138, 24, 16, 72, 80, 122, 146, 10, 56, 64, 40, 48, 88, 96, 104, 32, 130, 112 };
        public static HongBaoStatisticLatest DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override HongBaoStatisticLatest DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override HongBaoStatisticLatest ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.MmpayHongBaoModel.internal__static_MmpayHongBaoModel_HongBaoStatisticLatest__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<HongBaoStatisticLatest, HongBaoStatisticLatest.Builder> InternalFieldAccessors
        {
            get { return CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.MmpayHongBaoModel.internal__static_MmpayHongBaoModel_HongBaoStatisticLatest__FieldAccessorTable; }
        }

        public const int OpenidFieldNumber = 1;
        private bool hasOpenid;
        private pb::ByteString openid_ = pb::ByteString.Empty;
        public bool HasOpenid
        {
            get { return hasOpenid; }
        }
        public pb::ByteString Openid
        {
            get { return openid_; }
        }

        public const int DimensionFieldNumber = 2;
        private bool hasDimension;
        private uint dimension_;
        public bool HasDimension
        {
            get { return hasDimension; }
        }
        [global::System.CLSCompliant(false)]
        public uint Dimension
        {
            get { return dimension_; }
        }

        public const int DimValueFieldNumber = 3;
        private bool hasDimValue;
        private uint dimValue_;
        public bool HasDimValue
        {
            get { return hasDimValue; }
        }
        [global::System.CLSCompliant(false)]
        public uint DimValue
        {
            get { return dimValue_; }
        }

        public const int SendTimesFieldNumber = 4;
        private bool hasSendTimes;
        private uint sendTimes_;
        public bool HasSendTimes
        {
            get { return hasSendTimes; }
        }
        [global::System.CLSCompliant(false)]
        public uint SendTimes
        {
            get { return sendTimes_; }
        }

        public const int SendCountFieldNumber = 5;
        private bool hasSendCount;
        private uint sendCount_;
        public bool HasSendCount
        {
            get { return hasSendCount; }
        }
        [global::System.CLSCompliant(false)]
        public uint SendCount
        {
            get { return sendCount_; }
        }

        public const int SendFeeFieldNumber = 6;
        private bool hasSendFee;
        private ulong sendFee_;
        public bool HasSendFee
        {
            get { return hasSendFee; }
        }
        [global::System.CLSCompliant(false)]
        public ulong SendFee
        {
            get { return sendFee_; }
        }

        public const int ReceiveCountFieldNumber = 7;
        private bool hasReceiveCount;
        private uint receiveCount_;
        public bool HasReceiveCount
        {
            get { return hasReceiveCount; }
        }
        [global::System.CLSCompliant(false)]
        public uint ReceiveCount
        {
            get { return receiveCount_; }
        }

        public const int ReceiveFeeFieldNumber = 8;
        private bool hasReceiveFee;
        private ulong receiveFee_;
        public bool HasReceiveFee
        {
            get { return hasReceiveFee; }
        }
        [global::System.CLSCompliant(false)]
        public ulong ReceiveFee
        {
            get { return receiveFee_; }
        }

        public const int LuckiestCountFieldNumber = 9;
        private bool hasLuckiestCount;
        private uint luckiestCount_;
        public bool HasLuckiestCount
        {
            get { return hasLuckiestCount; }
        }
        [global::System.CLSCompliant(false)]
        public uint LuckiestCount
        {
            get { return luckiestCount_; }
        }

        public const int LuckiestFeeFieldNumber = 10;
        private bool hasLuckiestFee;
        private ulong luckiestFee_;
        public bool HasLuckiestFee
        {
            get { return hasLuckiestFee; }
        }
        [global::System.CLSCompliant(false)]
        public ulong LuckiestFee
        {
            get { return luckiestFee_; }
        }

        public const int SendFinishTimesFieldNumber = 11;
        private bool hasSendFinishTimes;
        private uint sendFinishTimes_;
        public bool HasSendFinishTimes
        {
            get { return hasSendFinishTimes; }
        }
        [global::System.CLSCompliant(false)]
        public uint SendFinishTimes
        {
            get { return sendFinishTimes_; }
        }

        public const int SendReceivedCountFieldNumber = 12;
        private bool hasSendReceivedCount;
        private uint sendReceivedCount_;
        public bool HasSendReceivedCount
        {
            get { return hasSendReceivedCount; }
        }
        [global::System.CLSCompliant(false)]
        public uint SendReceivedCount
        {
            get { return sendReceivedCount_; }
        }

        public const int SendReceivedFeeFieldNumber = 13;
        private bool hasSendReceivedFee;
        private ulong sendReceivedFee_;
        public bool HasSendReceivedFee
        {
            get { return hasSendReceivedFee; }
        }
        [global::System.CLSCompliant(false)]
        public ulong SendReceivedFee
        {
            get { return sendReceivedFee_; }
        }

        public const int VersionFieldNumber = 14;
        private bool hasVersion;
        private uint version_;
        public bool HasVersion
        {
            get { return hasVersion; }
        }
        [global::System.CLSCompliant(false)]
        public uint Version
        {
            get { return version_; }
        }

        public const int MemoFieldNumber = 15;
        private bool hasMemo;
        private pb::ByteString memo_ = pb::ByteString.Empty;
        public bool HasMemo
        {
            get { return hasMemo; }
        }
        public pb::ByteString Memo
        {
            get { return memo_; }
        }

        public const int SignFieldNumber = 16;
        private bool hasSign;
        private pb::ByteString sign_ = pb::ByteString.Empty;
        public bool HasSign
        {
            get { return hasSign; }
        }
        public pb::ByteString Sign
        {
            get { return sign_; }
        }

        public const int CreateTimeFieldNumber = 17;
        private bool hasCreateTime;
        private pb::ByteString createTime_ = pb::ByteString.Empty;
        public bool HasCreateTime
        {
            get { return hasCreateTime; }
        }
        public pb::ByteString CreateTime
        {
            get { return createTime_; }
        }

        public const int ModifyTimeFieldNumber = 18;
        private bool hasModifyTime;
        private pb::ByteString modifyTime_ = pb::ByteString.Empty;
        public bool HasModifyTime
        {
            get { return hasModifyTime; }
        }
        public pb::ByteString ModifyTime
        {
            get { return modifyTime_; }
        }

        public override bool IsInitialized
        {
            get
            {
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _hongBaoStatisticLatestFieldNames;
            if (hasOpenid)
            {
                output.WriteBytes(1, field_names[7], Openid);
            }
            if (hasDimension)
            {
                output.WriteUInt32(2, field_names[2], Dimension);
            }
            if (hasDimValue)
            {
                output.WriteUInt32(3, field_names[1], DimValue);
            }
            if (hasSendTimes)
            {
                output.WriteUInt32(4, field_names[15], SendTimes);
            }
            if (hasSendCount)
            {
                output.WriteUInt32(5, field_names[10], SendCount);
            }
            if (hasSendFee)
            {
                output.WriteUInt64(6, field_names[11], SendFee);
            }
            if (hasReceiveCount)
            {
                output.WriteUInt32(7, field_names[8], ReceiveCount);
            }
            if (hasReceiveFee)
            {
                output.WriteUInt64(8, field_names[9], ReceiveFee);
            }
            if (hasLuckiestCount)
            {
                output.WriteUInt32(9, field_names[3], LuckiestCount);
            }
            if (hasLuckiestFee)
            {
                output.WriteUInt64(10, field_names[4], LuckiestFee);
            }
            if (hasSendFinishTimes)
            {
                output.WriteUInt32(11, field_names[12], SendFinishTimes);
            }
            if (hasSendReceivedCount)
            {
                output.WriteUInt32(12, field_names[13], SendReceivedCount);
            }
            if (hasSendReceivedFee)
            {
                output.WriteUInt64(13, field_names[14], SendReceivedFee);
            }
            if (hasVersion)
            {
                output.WriteUInt32(14, field_names[17], Version);
            }
            if (hasMemo)
            {
                output.WriteBytes(15, field_names[5], Memo);
            }
            if (hasSign)
            {
                output.WriteBytes(16, field_names[16], Sign);
            }
            if (hasCreateTime)
            {
                output.WriteBytes(17, field_names[0], CreateTime);
            }
            if (hasModifyTime)
            {
                output.WriteBytes(18, field_names[6], ModifyTime);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasOpenid)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(1, Openid);
                }
                if (hasDimension)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(2, Dimension);
                }
                if (hasDimValue)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(3, DimValue);
                }
                if (hasSendTimes)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(4, SendTimes);
                }
                if (hasSendCount)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(5, SendCount);
                }
                if (hasSendFee)
                {
                    size += pb::CodedOutputStream.ComputeUInt64Size(6, SendFee);
                }
                if (hasReceiveCount)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(7, ReceiveCount);
                }
                if (hasReceiveFee)
                {
                    size += pb::CodedOutputStream.ComputeUInt64Size(8, ReceiveFee);
                }
                if (hasLuckiestCount)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(9, LuckiestCount);
                }
                if (hasLuckiestFee)
                {
                    size += pb::CodedOutputStream.ComputeUInt64Size(10, LuckiestFee);
                }
                if (hasSendFinishTimes)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(11, SendFinishTimes);
                }
                if (hasSendReceivedCount)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(12, SendReceivedCount);
                }
                if (hasSendReceivedFee)
                {
                    size += pb::CodedOutputStream.ComputeUInt64Size(13, SendReceivedFee);
                }
                if (hasVersion)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(14, Version);
                }
                if (hasMemo)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(15, Memo);
                }
                if (hasSign)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(16, Sign);
                }
                if (hasCreateTime)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(17, CreateTime);
                }
                if (hasModifyTime)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(18, ModifyTime);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static HongBaoStatisticLatest ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static HongBaoStatisticLatest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static HongBaoStatisticLatest ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static HongBaoStatisticLatest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static HongBaoStatisticLatest ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static HongBaoStatisticLatest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static HongBaoStatisticLatest ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static HongBaoStatisticLatest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static HongBaoStatisticLatest ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static HongBaoStatisticLatest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private HongBaoStatisticLatest MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(HongBaoStatisticLatest prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<HongBaoStatisticLatest, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(HongBaoStatisticLatest cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private HongBaoStatisticLatest result;

            private HongBaoStatisticLatest PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    HongBaoStatisticLatest original = result;
                    result = new HongBaoStatisticLatest();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override HongBaoStatisticLatest MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoStatisticLatest.Descriptor; }
            }

            public override HongBaoStatisticLatest DefaultInstanceForType
            {
                get { return CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoStatisticLatest.DefaultInstance; }
            }

            public override HongBaoStatisticLatest BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is HongBaoStatisticLatest)
                {
                    return MergeFrom((HongBaoStatisticLatest)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(HongBaoStatisticLatest other)
            {
                if (other == CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoStatisticLatest.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasOpenid)
                {
                    Openid = other.Openid;
                }
                if (other.HasDimension)
                {
                    Dimension = other.Dimension;
                }
                if (other.HasDimValue)
                {
                    DimValue = other.DimValue;
                }
                if (other.HasSendTimes)
                {
                    SendTimes = other.SendTimes;
                }
                if (other.HasSendCount)
                {
                    SendCount = other.SendCount;
                }
                if (other.HasSendFee)
                {
                    SendFee = other.SendFee;
                }
                if (other.HasReceiveCount)
                {
                    ReceiveCount = other.ReceiveCount;
                }
                if (other.HasReceiveFee)
                {
                    ReceiveFee = other.ReceiveFee;
                }
                if (other.HasLuckiestCount)
                {
                    LuckiestCount = other.LuckiestCount;
                }
                if (other.HasLuckiestFee)
                {
                    LuckiestFee = other.LuckiestFee;
                }
                if (other.HasSendFinishTimes)
                {
                    SendFinishTimes = other.SendFinishTimes;
                }
                if (other.HasSendReceivedCount)
                {
                    SendReceivedCount = other.SendReceivedCount;
                }
                if (other.HasSendReceivedFee)
                {
                    SendReceivedFee = other.SendReceivedFee;
                }
                if (other.HasVersion)
                {
                    Version = other.Version;
                }
                if (other.HasMemo)
                {
                    Memo = other.Memo;
                }
                if (other.HasSign)
                {
                    Sign = other.Sign;
                }
                if (other.HasCreateTime)
                {
                    CreateTime = other.CreateTime;
                }
                if (other.HasModifyTime)
                {
                    ModifyTime = other.ModifyTime;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_hongBaoStatisticLatestFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _hongBaoStatisticLatestFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                result.hasOpenid = input.ReadBytes(ref result.openid_);
                                break;
                            }
                        case 16:
                            {
                                result.hasDimension = input.ReadUInt32(ref result.dimension_);
                                break;
                            }
                        case 24:
                            {
                                result.hasDimValue = input.ReadUInt32(ref result.dimValue_);
                                break;
                            }
                        case 32:
                            {
                                result.hasSendTimes = input.ReadUInt32(ref result.sendTimes_);
                                break;
                            }
                        case 40:
                            {
                                result.hasSendCount = input.ReadUInt32(ref result.sendCount_);
                                break;
                            }
                        case 48:
                            {
                                result.hasSendFee = input.ReadUInt64(ref result.sendFee_);
                                break;
                            }
                        case 56:
                            {
                                result.hasReceiveCount = input.ReadUInt32(ref result.receiveCount_);
                                break;
                            }
                        case 64:
                            {
                                result.hasReceiveFee = input.ReadUInt64(ref result.receiveFee_);
                                break;
                            }
                        case 72:
                            {
                                result.hasLuckiestCount = input.ReadUInt32(ref result.luckiestCount_);
                                break;
                            }
                        case 80:
                            {
                                result.hasLuckiestFee = input.ReadUInt64(ref result.luckiestFee_);
                                break;
                            }
                        case 88:
                            {
                                result.hasSendFinishTimes = input.ReadUInt32(ref result.sendFinishTimes_);
                                break;
                            }
                        case 96:
                            {
                                result.hasSendReceivedCount = input.ReadUInt32(ref result.sendReceivedCount_);
                                break;
                            }
                        case 104:
                            {
                                result.hasSendReceivedFee = input.ReadUInt64(ref result.sendReceivedFee_);
                                break;
                            }
                        case 112:
                            {
                                result.hasVersion = input.ReadUInt32(ref result.version_);
                                break;
                            }
                        case 122:
                            {
                                result.hasMemo = input.ReadBytes(ref result.memo_);
                                break;
                            }
                        case 130:
                            {
                                result.hasSign = input.ReadBytes(ref result.sign_);
                                break;
                            }
                        case 138:
                            {
                                result.hasCreateTime = input.ReadBytes(ref result.createTime_);
                                break;
                            }
                        case 146:
                            {
                                result.hasModifyTime = input.ReadBytes(ref result.modifyTime_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasOpenid
            {
                get { return result.hasOpenid; }
            }
            public pb::ByteString Openid
            {
                get { return result.Openid; }
                set { SetOpenid(value); }
            }
            public Builder SetOpenid(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasOpenid = true;
                result.openid_ = value;
                return this;
            }
            public Builder ClearOpenid()
            {
                PrepareBuilder();
                result.hasOpenid = false;
                result.openid_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasDimension
            {
                get { return result.hasDimension; }
            }
            [global::System.CLSCompliant(false)]
            public uint Dimension
            {
                get { return result.Dimension; }
                set { SetDimension(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetDimension(uint value)
            {
                PrepareBuilder();
                result.hasDimension = true;
                result.dimension_ = value;
                return this;
            }
            public Builder ClearDimension()
            {
                PrepareBuilder();
                result.hasDimension = false;
                result.dimension_ = 0;
                return this;
            }

            public bool HasDimValue
            {
                get { return result.hasDimValue; }
            }
            [global::System.CLSCompliant(false)]
            public uint DimValue
            {
                get { return result.DimValue; }
                set { SetDimValue(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetDimValue(uint value)
            {
                PrepareBuilder();
                result.hasDimValue = true;
                result.dimValue_ = value;
                return this;
            }
            public Builder ClearDimValue()
            {
                PrepareBuilder();
                result.hasDimValue = false;
                result.dimValue_ = 0;
                return this;
            }

            public bool HasSendTimes
            {
                get { return result.hasSendTimes; }
            }
            [global::System.CLSCompliant(false)]
            public uint SendTimes
            {
                get { return result.SendTimes; }
                set { SetSendTimes(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetSendTimes(uint value)
            {
                PrepareBuilder();
                result.hasSendTimes = true;
                result.sendTimes_ = value;
                return this;
            }
            public Builder ClearSendTimes()
            {
                PrepareBuilder();
                result.hasSendTimes = false;
                result.sendTimes_ = 0;
                return this;
            }

            public bool HasSendCount
            {
                get { return result.hasSendCount; }
            }
            [global::System.CLSCompliant(false)]
            public uint SendCount
            {
                get { return result.SendCount; }
                set { SetSendCount(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetSendCount(uint value)
            {
                PrepareBuilder();
                result.hasSendCount = true;
                result.sendCount_ = value;
                return this;
            }
            public Builder ClearSendCount()
            {
                PrepareBuilder();
                result.hasSendCount = false;
                result.sendCount_ = 0;
                return this;
            }

            public bool HasSendFee
            {
                get { return result.hasSendFee; }
            }
            [global::System.CLSCompliant(false)]
            public ulong SendFee
            {
                get { return result.SendFee; }
                set { SetSendFee(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetSendFee(ulong value)
            {
                PrepareBuilder();
                result.hasSendFee = true;
                result.sendFee_ = value;
                return this;
            }
            public Builder ClearSendFee()
            {
                PrepareBuilder();
                result.hasSendFee = false;
                result.sendFee_ = 0UL;
                return this;
            }

            public bool HasReceiveCount
            {
                get { return result.hasReceiveCount; }
            }
            [global::System.CLSCompliant(false)]
            public uint ReceiveCount
            {
                get { return result.ReceiveCount; }
                set { SetReceiveCount(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetReceiveCount(uint value)
            {
                PrepareBuilder();
                result.hasReceiveCount = true;
                result.receiveCount_ = value;
                return this;
            }
            public Builder ClearReceiveCount()
            {
                PrepareBuilder();
                result.hasReceiveCount = false;
                result.receiveCount_ = 0;
                return this;
            }

            public bool HasReceiveFee
            {
                get { return result.hasReceiveFee; }
            }
            [global::System.CLSCompliant(false)]
            public ulong ReceiveFee
            {
                get { return result.ReceiveFee; }
                set { SetReceiveFee(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetReceiveFee(ulong value)
            {
                PrepareBuilder();
                result.hasReceiveFee = true;
                result.receiveFee_ = value;
                return this;
            }
            public Builder ClearReceiveFee()
            {
                PrepareBuilder();
                result.hasReceiveFee = false;
                result.receiveFee_ = 0UL;
                return this;
            }

            public bool HasLuckiestCount
            {
                get { return result.hasLuckiestCount; }
            }
            [global::System.CLSCompliant(false)]
            public uint LuckiestCount
            {
                get { return result.LuckiestCount; }
                set { SetLuckiestCount(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetLuckiestCount(uint value)
            {
                PrepareBuilder();
                result.hasLuckiestCount = true;
                result.luckiestCount_ = value;
                return this;
            }
            public Builder ClearLuckiestCount()
            {
                PrepareBuilder();
                result.hasLuckiestCount = false;
                result.luckiestCount_ = 0;
                return this;
            }

            public bool HasLuckiestFee
            {
                get { return result.hasLuckiestFee; }
            }
            [global::System.CLSCompliant(false)]
            public ulong LuckiestFee
            {
                get { return result.LuckiestFee; }
                set { SetLuckiestFee(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetLuckiestFee(ulong value)
            {
                PrepareBuilder();
                result.hasLuckiestFee = true;
                result.luckiestFee_ = value;
                return this;
            }
            public Builder ClearLuckiestFee()
            {
                PrepareBuilder();
                result.hasLuckiestFee = false;
                result.luckiestFee_ = 0UL;
                return this;
            }

            public bool HasSendFinishTimes
            {
                get { return result.hasSendFinishTimes; }
            }
            [global::System.CLSCompliant(false)]
            public uint SendFinishTimes
            {
                get { return result.SendFinishTimes; }
                set { SetSendFinishTimes(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetSendFinishTimes(uint value)
            {
                PrepareBuilder();
                result.hasSendFinishTimes = true;
                result.sendFinishTimes_ = value;
                return this;
            }
            public Builder ClearSendFinishTimes()
            {
                PrepareBuilder();
                result.hasSendFinishTimes = false;
                result.sendFinishTimes_ = 0;
                return this;
            }

            public bool HasSendReceivedCount
            {
                get { return result.hasSendReceivedCount; }
            }
            [global::System.CLSCompliant(false)]
            public uint SendReceivedCount
            {
                get { return result.SendReceivedCount; }
                set { SetSendReceivedCount(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetSendReceivedCount(uint value)
            {
                PrepareBuilder();
                result.hasSendReceivedCount = true;
                result.sendReceivedCount_ = value;
                return this;
            }
            public Builder ClearSendReceivedCount()
            {
                PrepareBuilder();
                result.hasSendReceivedCount = false;
                result.sendReceivedCount_ = 0;
                return this;
            }

            public bool HasSendReceivedFee
            {
                get { return result.hasSendReceivedFee; }
            }
            [global::System.CLSCompliant(false)]
            public ulong SendReceivedFee
            {
                get { return result.SendReceivedFee; }
                set { SetSendReceivedFee(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetSendReceivedFee(ulong value)
            {
                PrepareBuilder();
                result.hasSendReceivedFee = true;
                result.sendReceivedFee_ = value;
                return this;
            }
            public Builder ClearSendReceivedFee()
            {
                PrepareBuilder();
                result.hasSendReceivedFee = false;
                result.sendReceivedFee_ = 0UL;
                return this;
            }

            public bool HasVersion
            {
                get { return result.hasVersion; }
            }
            [global::System.CLSCompliant(false)]
            public uint Version
            {
                get { return result.Version; }
                set { SetVersion(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetVersion(uint value)
            {
                PrepareBuilder();
                result.hasVersion = true;
                result.version_ = value;
                return this;
            }
            public Builder ClearVersion()
            {
                PrepareBuilder();
                result.hasVersion = false;
                result.version_ = 0;
                return this;
            }

            public bool HasMemo
            {
                get { return result.hasMemo; }
            }
            public pb::ByteString Memo
            {
                get { return result.Memo; }
                set { SetMemo(value); }
            }
            public Builder SetMemo(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasMemo = true;
                result.memo_ = value;
                return this;
            }
            public Builder ClearMemo()
            {
                PrepareBuilder();
                result.hasMemo = false;
                result.memo_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasSign
            {
                get { return result.hasSign; }
            }
            public pb::ByteString Sign
            {
                get { return result.Sign; }
                set { SetSign(value); }
            }
            public Builder SetSign(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasSign = true;
                result.sign_ = value;
                return this;
            }
            public Builder ClearSign()
            {
                PrepareBuilder();
                result.hasSign = false;
                result.sign_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasCreateTime
            {
                get { return result.hasCreateTime; }
            }
            public pb::ByteString CreateTime
            {
                get { return result.CreateTime; }
                set { SetCreateTime(value); }
            }
            public Builder SetCreateTime(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasCreateTime = true;
                result.createTime_ = value;
                return this;
            }
            public Builder ClearCreateTime()
            {
                PrepareBuilder();
                result.hasCreateTime = false;
                result.createTime_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasModifyTime
            {
                get { return result.hasModifyTime; }
            }
            public pb::ByteString ModifyTime
            {
                get { return result.ModifyTime; }
                set { SetModifyTime(value); }
            }
            public Builder SetModifyTime(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasModifyTime = true;
                result.modifyTime_ = value;
                return this;
            }
            public Builder ClearModifyTime()
            {
                PrepareBuilder();
                result.hasModifyTime = false;
                result.modifyTime_ = pb::ByteString.Empty;
                return this;
            }
        }
        static HongBaoStatisticLatest()
        {
            object.ReferenceEquals(CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.MmpayHongBaoModel.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class PreOrderDBWrapper : pb::GeneratedMessage<PreOrderDBWrapper, PreOrderDBWrapper.Builder>
    {
        private PreOrderDBWrapper() { }
        private static readonly PreOrderDBWrapper defaultInstance = new PreOrderDBWrapper().MakeReadOnly();
        private static readonly string[] _preOrderDBWrapperFieldNames = new string[] { "create_time", "listid", "modify_time", "request", "standby1", "standby2", "standby3", "standby4", "standby5", "standby6", "standby7", "standby8" };
        private static readonly uint[] _preOrderDBWrapperFieldTags = new uint[] { 26, 10, 34, 18, 40, 48, 58, 66, 74, 82, 90, 98 };
        public static PreOrderDBWrapper DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override PreOrderDBWrapper DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override PreOrderDBWrapper ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.MmpayHongBaoModel.internal__static_MmpayHongBaoModel_PreOrderDBWrapper__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<PreOrderDBWrapper, PreOrderDBWrapper.Builder> InternalFieldAccessors
        {
            get { return CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.MmpayHongBaoModel.internal__static_MmpayHongBaoModel_PreOrderDBWrapper__FieldAccessorTable; }
        }

        public const int ListidFieldNumber = 1;
        private bool hasListid;
        private pb::ByteString listid_ = pb::ByteString.Empty;
        public bool HasListid
        {
            get { return hasListid; }
        }
        public pb::ByteString Listid
        {
            get { return listid_; }
        }

        public const int RequestFieldNumber = 2;
        private bool hasRequest;
        private pb::ByteString request_ = pb::ByteString.Empty;
        public bool HasRequest
        {
            get { return hasRequest; }
        }
        public pb::ByteString Request
        {
            get { return request_; }
        }

        public const int CreateTimeFieldNumber = 3;
        private bool hasCreateTime;
        private pb::ByteString createTime_ = pb::ByteString.Empty;
        public bool HasCreateTime
        {
            get { return hasCreateTime; }
        }
        public pb::ByteString CreateTime
        {
            get { return createTime_; }
        }

        public const int ModifyTimeFieldNumber = 4;
        private bool hasModifyTime;
        private pb::ByteString modifyTime_ = pb::ByteString.Empty;
        public bool HasModifyTime
        {
            get { return hasModifyTime; }
        }
        public pb::ByteString ModifyTime
        {
            get { return modifyTime_; }
        }

        public const int Standby1FieldNumber = 5;
        private bool hasStandby1;
        private uint standby1_;
        public bool HasStandby1
        {
            get { return hasStandby1; }
        }
        [global::System.CLSCompliant(false)]
        public uint Standby1
        {
            get { return standby1_; }
        }

        public const int Standby2FieldNumber = 6;
        private bool hasStandby2;
        private uint standby2_;
        public bool HasStandby2
        {
            get { return hasStandby2; }
        }
        [global::System.CLSCompliant(false)]
        public uint Standby2
        {
            get { return standby2_; }
        }

        public const int Standby3FieldNumber = 7;
        private bool hasStandby3;
        private pb::ByteString standby3_ = pb::ByteString.Empty;
        public bool HasStandby3
        {
            get { return hasStandby3; }
        }
        public pb::ByteString Standby3
        {
            get { return standby3_; }
        }

        public const int Standby4FieldNumber = 8;
        private bool hasStandby4;
        private pb::ByteString standby4_ = pb::ByteString.Empty;
        public bool HasStandby4
        {
            get { return hasStandby4; }
        }
        public pb::ByteString Standby4
        {
            get { return standby4_; }
        }

        public const int Standby5FieldNumber = 9;
        private bool hasStandby5;
        private pb::ByteString standby5_ = pb::ByteString.Empty;
        public bool HasStandby5
        {
            get { return hasStandby5; }
        }
        public pb::ByteString Standby5
        {
            get { return standby5_; }
        }

        public const int Standby6FieldNumber = 10;
        private bool hasStandby6;
        private pb::ByteString standby6_ = pb::ByteString.Empty;
        public bool HasStandby6
        {
            get { return hasStandby6; }
        }
        public pb::ByteString Standby6
        {
            get { return standby6_; }
        }

        public const int Standby7FieldNumber = 11;
        private bool hasStandby7;
        private pb::ByteString standby7_ = pb::ByteString.Empty;
        public bool HasStandby7
        {
            get { return hasStandby7; }
        }
        public pb::ByteString Standby7
        {
            get { return standby7_; }
        }

        public const int Standby8FieldNumber = 12;
        private bool hasStandby8;
        private pb::ByteString standby8_ = pb::ByteString.Empty;
        public bool HasStandby8
        {
            get { return hasStandby8; }
        }
        public pb::ByteString Standby8
        {
            get { return standby8_; }
        }

        public override bool IsInitialized
        {
            get
            {
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _preOrderDBWrapperFieldNames;
            if (hasListid)
            {
                output.WriteBytes(1, field_names[1], Listid);
            }
            if (hasRequest)
            {
                output.WriteBytes(2, field_names[3], Request);
            }
            if (hasCreateTime)
            {
                output.WriteBytes(3, field_names[0], CreateTime);
            }
            if (hasModifyTime)
            {
                output.WriteBytes(4, field_names[2], ModifyTime);
            }
            if (hasStandby1)
            {
                output.WriteUInt32(5, field_names[4], Standby1);
            }
            if (hasStandby2)
            {
                output.WriteUInt32(6, field_names[5], Standby2);
            }
            if (hasStandby3)
            {
                output.WriteBytes(7, field_names[6], Standby3);
            }
            if (hasStandby4)
            {
                output.WriteBytes(8, field_names[7], Standby4);
            }
            if (hasStandby5)
            {
                output.WriteBytes(9, field_names[8], Standby5);
            }
            if (hasStandby6)
            {
                output.WriteBytes(10, field_names[9], Standby6);
            }
            if (hasStandby7)
            {
                output.WriteBytes(11, field_names[10], Standby7);
            }
            if (hasStandby8)
            {
                output.WriteBytes(12, field_names[11], Standby8);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasListid)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(1, Listid);
                }
                if (hasRequest)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(2, Request);
                }
                if (hasCreateTime)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(3, CreateTime);
                }
                if (hasModifyTime)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(4, ModifyTime);
                }
                if (hasStandby1)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(5, Standby1);
                }
                if (hasStandby2)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(6, Standby2);
                }
                if (hasStandby3)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(7, Standby3);
                }
                if (hasStandby4)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(8, Standby4);
                }
                if (hasStandby5)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(9, Standby5);
                }
                if (hasStandby6)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(10, Standby6);
                }
                if (hasStandby7)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(11, Standby7);
                }
                if (hasStandby8)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(12, Standby8);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static PreOrderDBWrapper ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static PreOrderDBWrapper ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static PreOrderDBWrapper ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static PreOrderDBWrapper ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static PreOrderDBWrapper ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static PreOrderDBWrapper ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static PreOrderDBWrapper ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static PreOrderDBWrapper ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static PreOrderDBWrapper ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static PreOrderDBWrapper ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private PreOrderDBWrapper MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(PreOrderDBWrapper prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<PreOrderDBWrapper, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(PreOrderDBWrapper cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private PreOrderDBWrapper result;

            private PreOrderDBWrapper PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    PreOrderDBWrapper original = result;
                    result = new PreOrderDBWrapper();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override PreOrderDBWrapper MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.PreOrderDBWrapper.Descriptor; }
            }

            public override PreOrderDBWrapper DefaultInstanceForType
            {
                get { return CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.PreOrderDBWrapper.DefaultInstance; }
            }

            public override PreOrderDBWrapper BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is PreOrderDBWrapper)
                {
                    return MergeFrom((PreOrderDBWrapper)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(PreOrderDBWrapper other)
            {
                if (other == CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.PreOrderDBWrapper.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasListid)
                {
                    Listid = other.Listid;
                }
                if (other.HasRequest)
                {
                    Request = other.Request;
                }
                if (other.HasCreateTime)
                {
                    CreateTime = other.CreateTime;
                }
                if (other.HasModifyTime)
                {
                    ModifyTime = other.ModifyTime;
                }
                if (other.HasStandby1)
                {
                    Standby1 = other.Standby1;
                }
                if (other.HasStandby2)
                {
                    Standby2 = other.Standby2;
                }
                if (other.HasStandby3)
                {
                    Standby3 = other.Standby3;
                }
                if (other.HasStandby4)
                {
                    Standby4 = other.Standby4;
                }
                if (other.HasStandby5)
                {
                    Standby5 = other.Standby5;
                }
                if (other.HasStandby6)
                {
                    Standby6 = other.Standby6;
                }
                if (other.HasStandby7)
                {
                    Standby7 = other.Standby7;
                }
                if (other.HasStandby8)
                {
                    Standby8 = other.Standby8;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_preOrderDBWrapperFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _preOrderDBWrapperFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                result.hasListid = input.ReadBytes(ref result.listid_);
                                break;
                            }
                        case 18:
                            {
                                result.hasRequest = input.ReadBytes(ref result.request_);
                                break;
                            }
                        case 26:
                            {
                                result.hasCreateTime = input.ReadBytes(ref result.createTime_);
                                break;
                            }
                        case 34:
                            {
                                result.hasModifyTime = input.ReadBytes(ref result.modifyTime_);
                                break;
                            }
                        case 40:
                            {
                                result.hasStandby1 = input.ReadUInt32(ref result.standby1_);
                                break;
                            }
                        case 48:
                            {
                                result.hasStandby2 = input.ReadUInt32(ref result.standby2_);
                                break;
                            }
                        case 58:
                            {
                                result.hasStandby3 = input.ReadBytes(ref result.standby3_);
                                break;
                            }
                        case 66:
                            {
                                result.hasStandby4 = input.ReadBytes(ref result.standby4_);
                                break;
                            }
                        case 74:
                            {
                                result.hasStandby5 = input.ReadBytes(ref result.standby5_);
                                break;
                            }
                        case 82:
                            {
                                result.hasStandby6 = input.ReadBytes(ref result.standby6_);
                                break;
                            }
                        case 90:
                            {
                                result.hasStandby7 = input.ReadBytes(ref result.standby7_);
                                break;
                            }
                        case 98:
                            {
                                result.hasStandby8 = input.ReadBytes(ref result.standby8_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasListid
            {
                get { return result.hasListid; }
            }
            public pb::ByteString Listid
            {
                get { return result.Listid; }
                set { SetListid(value); }
            }
            public Builder SetListid(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasListid = true;
                result.listid_ = value;
                return this;
            }
            public Builder ClearListid()
            {
                PrepareBuilder();
                result.hasListid = false;
                result.listid_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasRequest
            {
                get { return result.hasRequest; }
            }
            public pb::ByteString Request
            {
                get { return result.Request; }
                set { SetRequest(value); }
            }
            public Builder SetRequest(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasRequest = true;
                result.request_ = value;
                return this;
            }
            public Builder ClearRequest()
            {
                PrepareBuilder();
                result.hasRequest = false;
                result.request_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasCreateTime
            {
                get { return result.hasCreateTime; }
            }
            public pb::ByteString CreateTime
            {
                get { return result.CreateTime; }
                set { SetCreateTime(value); }
            }
            public Builder SetCreateTime(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasCreateTime = true;
                result.createTime_ = value;
                return this;
            }
            public Builder ClearCreateTime()
            {
                PrepareBuilder();
                result.hasCreateTime = false;
                result.createTime_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasModifyTime
            {
                get { return result.hasModifyTime; }
            }
            public pb::ByteString ModifyTime
            {
                get { return result.ModifyTime; }
                set { SetModifyTime(value); }
            }
            public Builder SetModifyTime(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasModifyTime = true;
                result.modifyTime_ = value;
                return this;
            }
            public Builder ClearModifyTime()
            {
                PrepareBuilder();
                result.hasModifyTime = false;
                result.modifyTime_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasStandby1
            {
                get { return result.hasStandby1; }
            }
            [global::System.CLSCompliant(false)]
            public uint Standby1
            {
                get { return result.Standby1; }
                set { SetStandby1(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetStandby1(uint value)
            {
                PrepareBuilder();
                result.hasStandby1 = true;
                result.standby1_ = value;
                return this;
            }
            public Builder ClearStandby1()
            {
                PrepareBuilder();
                result.hasStandby1 = false;
                result.standby1_ = 0;
                return this;
            }

            public bool HasStandby2
            {
                get { return result.hasStandby2; }
            }
            [global::System.CLSCompliant(false)]
            public uint Standby2
            {
                get { return result.Standby2; }
                set { SetStandby2(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetStandby2(uint value)
            {
                PrepareBuilder();
                result.hasStandby2 = true;
                result.standby2_ = value;
                return this;
            }
            public Builder ClearStandby2()
            {
                PrepareBuilder();
                result.hasStandby2 = false;
                result.standby2_ = 0;
                return this;
            }

            public bool HasStandby3
            {
                get { return result.hasStandby3; }
            }
            public pb::ByteString Standby3
            {
                get { return result.Standby3; }
                set { SetStandby3(value); }
            }
            public Builder SetStandby3(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasStandby3 = true;
                result.standby3_ = value;
                return this;
            }
            public Builder ClearStandby3()
            {
                PrepareBuilder();
                result.hasStandby3 = false;
                result.standby3_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasStandby4
            {
                get { return result.hasStandby4; }
            }
            public pb::ByteString Standby4
            {
                get { return result.Standby4; }
                set { SetStandby4(value); }
            }
            public Builder SetStandby4(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasStandby4 = true;
                result.standby4_ = value;
                return this;
            }
            public Builder ClearStandby4()
            {
                PrepareBuilder();
                result.hasStandby4 = false;
                result.standby4_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasStandby5
            {
                get { return result.hasStandby5; }
            }
            public pb::ByteString Standby5
            {
                get { return result.Standby5; }
                set { SetStandby5(value); }
            }
            public Builder SetStandby5(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasStandby5 = true;
                result.standby5_ = value;
                return this;
            }
            public Builder ClearStandby5()
            {
                PrepareBuilder();
                result.hasStandby5 = false;
                result.standby5_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasStandby6
            {
                get { return result.hasStandby6; }
            }
            public pb::ByteString Standby6
            {
                get { return result.Standby6; }
                set { SetStandby6(value); }
            }
            public Builder SetStandby6(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasStandby6 = true;
                result.standby6_ = value;
                return this;
            }
            public Builder ClearStandby6()
            {
                PrepareBuilder();
                result.hasStandby6 = false;
                result.standby6_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasStandby7
            {
                get { return result.hasStandby7; }
            }
            public pb::ByteString Standby7
            {
                get { return result.Standby7; }
                set { SetStandby7(value); }
            }
            public Builder SetStandby7(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasStandby7 = true;
                result.standby7_ = value;
                return this;
            }
            public Builder ClearStandby7()
            {
                PrepareBuilder();
                result.hasStandby7 = false;
                result.standby7_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasStandby8
            {
                get { return result.hasStandby8; }
            }
            public pb::ByteString Standby8
            {
                get { return result.Standby8; }
                set { SetStandby8(value); }
            }
            public Builder SetStandby8(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasStandby8 = true;
                result.standby8_ = value;
                return this;
            }
            public Builder ClearStandby8()
            {
                PrepareBuilder();
                result.hasStandby8 = false;
                result.standby8_ = pb::ByteString.Empty;
                return this;
            }
        }
        static PreOrderDBWrapper()
        {
            object.ReferenceEquals(CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.MmpayHongBaoModel.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class PreOrderRequestDB : pb::GeneratedMessage<PreOrderRequestDB, PreOrderRequestDB.Builder>
    {
        private PreOrderRequestDB() { }
        private static readonly PreOrderRequestDB defaultInstance = new PreOrderRequestDB().MakeReadOnly();
        private static readonly string[] _preOrderRequestDBFieldNames = new string[] { "clientVersion", "deviceType", "inWay", "order", "sendUserName", "sessionType", "ticket", "username" };
        private static readonly uint[] _preOrderRequestDBFieldTags = new uint[] { 56, 48, 32, 10, 26, 40, 66, 18 };
        public static PreOrderRequestDB DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override PreOrderRequestDB DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override PreOrderRequestDB ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.MmpayHongBaoModel.internal__static_MmpayHongBaoModel_PreOrderRequestDB__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<PreOrderRequestDB, PreOrderRequestDB.Builder> InternalFieldAccessors
        {
            get { return CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.MmpayHongBaoModel.internal__static_MmpayHongBaoModel_PreOrderRequestDB__FieldAccessorTable; }
        }

        public const int OrderFieldNumber = 1;
        private bool hasOrder;
        private CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoSendOrder order_;
        public bool HasOrder
        {
            get { return hasOrder; }
        }
        public CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoSendOrder Order
        {
            get { return order_ ?? CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoSendOrder.DefaultInstance; }
        }

        public const int UsernameFieldNumber = 2;
        private bool hasUsername;
        private pb::ByteString username_ = pb::ByteString.Empty;
        public bool HasUsername
        {
            get { return hasUsername; }
        }
        public pb::ByteString Username
        {
            get { return username_; }
        }

        public const int SendUserNameFieldNumber = 3;
        private bool hasSendUserName;
        private pb::ByteString sendUserName_ = pb::ByteString.Empty;
        public bool HasSendUserName
        {
            get { return hasSendUserName; }
        }
        public pb::ByteString SendUserName
        {
            get { return sendUserName_; }
        }

        public const int InWayFieldNumber = 4;
        private bool hasInWay;
        private uint inWay_;
        public bool HasInWay
        {
            get { return hasInWay; }
        }
        [global::System.CLSCompliant(false)]
        public uint InWay
        {
            get { return inWay_; }
        }

        public const int SessionTypeFieldNumber = 5;
        private bool hasSessionType;
        private uint sessionType_;
        public bool HasSessionType
        {
            get { return hasSessionType; }
        }
        [global::System.CLSCompliant(false)]
        public uint SessionType
        {
            get { return sessionType_; }
        }

        public const int DeviceTypeFieldNumber = 6;
        private bool hasDeviceType;
        private uint deviceType_;
        public bool HasDeviceType
        {
            get { return hasDeviceType; }
        }
        [global::System.CLSCompliant(false)]
        public uint DeviceType
        {
            get { return deviceType_; }
        }

        public const int ClientVersionFieldNumber = 7;
        private bool hasClientVersion;
        private uint clientVersion_;
        public bool HasClientVersion
        {
            get { return hasClientVersion; }
        }
        [global::System.CLSCompliant(false)]
        public uint ClientVersion
        {
            get { return clientVersion_; }
        }

        public const int TicketFieldNumber = 8;
        private bool hasTicket;
        private pb::ByteString ticket_ = pb::ByteString.Empty;
        public bool HasTicket
        {
            get { return hasTicket; }
        }
        public pb::ByteString Ticket
        {
            get { return ticket_; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasOrder) return false;
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _preOrderRequestDBFieldNames;
            if (hasOrder)
            {
                output.WriteMessage(1, field_names[3], Order);
            }
            if (hasUsername)
            {
                output.WriteBytes(2, field_names[7], Username);
            }
            if (hasSendUserName)
            {
                output.WriteBytes(3, field_names[4], SendUserName);
            }
            if (hasInWay)
            {
                output.WriteUInt32(4, field_names[2], InWay);
            }
            if (hasSessionType)
            {
                output.WriteUInt32(5, field_names[5], SessionType);
            }
            if (hasDeviceType)
            {
                output.WriteUInt32(6, field_names[1], DeviceType);
            }
            if (hasClientVersion)
            {
                output.WriteUInt32(7, field_names[0], ClientVersion);
            }
            if (hasTicket)
            {
                output.WriteBytes(8, field_names[6], Ticket);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasOrder)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(1, Order);
                }
                if (hasUsername)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(2, Username);
                }
                if (hasSendUserName)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(3, SendUserName);
                }
                if (hasInWay)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(4, InWay);
                }
                if (hasSessionType)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(5, SessionType);
                }
                if (hasDeviceType)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(6, DeviceType);
                }
                if (hasClientVersion)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(7, ClientVersion);
                }
                if (hasTicket)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(8, Ticket);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static PreOrderRequestDB ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static PreOrderRequestDB ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static PreOrderRequestDB ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static PreOrderRequestDB ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static PreOrderRequestDB ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static PreOrderRequestDB ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static PreOrderRequestDB ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static PreOrderRequestDB ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static PreOrderRequestDB ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static PreOrderRequestDB ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private PreOrderRequestDB MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(PreOrderRequestDB prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<PreOrderRequestDB, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(PreOrderRequestDB cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private PreOrderRequestDB result;

            private PreOrderRequestDB PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    PreOrderRequestDB original = result;
                    result = new PreOrderRequestDB();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override PreOrderRequestDB MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.PreOrderRequestDB.Descriptor; }
            }

            public override PreOrderRequestDB DefaultInstanceForType
            {
                get { return CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.PreOrderRequestDB.DefaultInstance; }
            }

            public override PreOrderRequestDB BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is PreOrderRequestDB)
                {
                    return MergeFrom((PreOrderRequestDB)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(PreOrderRequestDB other)
            {
                if (other == CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.PreOrderRequestDB.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasOrder)
                {
                    MergeOrder(other.Order);
                }
                if (other.HasUsername)
                {
                    Username = other.Username;
                }
                if (other.HasSendUserName)
                {
                    SendUserName = other.SendUserName;
                }
                if (other.HasInWay)
                {
                    InWay = other.InWay;
                }
                if (other.HasSessionType)
                {
                    SessionType = other.SessionType;
                }
                if (other.HasDeviceType)
                {
                    DeviceType = other.DeviceType;
                }
                if (other.HasClientVersion)
                {
                    ClientVersion = other.ClientVersion;
                }
                if (other.HasTicket)
                {
                    Ticket = other.Ticket;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_preOrderRequestDBFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _preOrderRequestDBFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoSendOrder.Builder subBuilder = CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoSendOrder.CreateBuilder();
                                if (result.hasOrder)
                                {
                                    subBuilder.MergeFrom(Order);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                Order = subBuilder.BuildPartial();
                                break;
                            }
                        case 18:
                            {
                                result.hasUsername = input.ReadBytes(ref result.username_);
                                break;
                            }
                        case 26:
                            {
                                result.hasSendUserName = input.ReadBytes(ref result.sendUserName_);
                                break;
                            }
                        case 32:
                            {
                                result.hasInWay = input.ReadUInt32(ref result.inWay_);
                                break;
                            }
                        case 40:
                            {
                                result.hasSessionType = input.ReadUInt32(ref result.sessionType_);
                                break;
                            }
                        case 48:
                            {
                                result.hasDeviceType = input.ReadUInt32(ref result.deviceType_);
                                break;
                            }
                        case 56:
                            {
                                result.hasClientVersion = input.ReadUInt32(ref result.clientVersion_);
                                break;
                            }
                        case 66:
                            {
                                result.hasTicket = input.ReadBytes(ref result.ticket_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasOrder
            {
                get { return result.hasOrder; }
            }
            public CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoSendOrder Order
            {
                get { return result.Order; }
                set { SetOrder(value); }
            }
            public Builder SetOrder(CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoSendOrder value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasOrder = true;
                result.order_ = value;
                return this;
            }
            public Builder SetOrder(CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoSendOrder.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasOrder = true;
                result.order_ = builderForValue.Build();
                return this;
            }
            public Builder MergeOrder(CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoSendOrder value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasOrder &&
                    result.order_ != CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoSendOrder.DefaultInstance)
                {
                    result.order_ = CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoSendOrder.CreateBuilder(result.order_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.order_ = value;
                }
                result.hasOrder = true;
                return this;
            }
            public Builder ClearOrder()
            {
                PrepareBuilder();
                result.hasOrder = false;
                result.order_ = null;
                return this;
            }

            public bool HasUsername
            {
                get { return result.hasUsername; }
            }
            public pb::ByteString Username
            {
                get { return result.Username; }
                set { SetUsername(value); }
            }
            public Builder SetUsername(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasUsername = true;
                result.username_ = value;
                return this;
            }
            public Builder ClearUsername()
            {
                PrepareBuilder();
                result.hasUsername = false;
                result.username_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasSendUserName
            {
                get { return result.hasSendUserName; }
            }
            public pb::ByteString SendUserName
            {
                get { return result.SendUserName; }
                set { SetSendUserName(value); }
            }
            public Builder SetSendUserName(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasSendUserName = true;
                result.sendUserName_ = value;
                return this;
            }
            public Builder ClearSendUserName()
            {
                PrepareBuilder();
                result.hasSendUserName = false;
                result.sendUserName_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasInWay
            {
                get { return result.hasInWay; }
            }
            [global::System.CLSCompliant(false)]
            public uint InWay
            {
                get { return result.InWay; }
                set { SetInWay(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetInWay(uint value)
            {
                PrepareBuilder();
                result.hasInWay = true;
                result.inWay_ = value;
                return this;
            }
            public Builder ClearInWay()
            {
                PrepareBuilder();
                result.hasInWay = false;
                result.inWay_ = 0;
                return this;
            }

            public bool HasSessionType
            {
                get { return result.hasSessionType; }
            }
            [global::System.CLSCompliant(false)]
            public uint SessionType
            {
                get { return result.SessionType; }
                set { SetSessionType(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetSessionType(uint value)
            {
                PrepareBuilder();
                result.hasSessionType = true;
                result.sessionType_ = value;
                return this;
            }
            public Builder ClearSessionType()
            {
                PrepareBuilder();
                result.hasSessionType = false;
                result.sessionType_ = 0;
                return this;
            }

            public bool HasDeviceType
            {
                get { return result.hasDeviceType; }
            }
            [global::System.CLSCompliant(false)]
            public uint DeviceType
            {
                get { return result.DeviceType; }
                set { SetDeviceType(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetDeviceType(uint value)
            {
                PrepareBuilder();
                result.hasDeviceType = true;
                result.deviceType_ = value;
                return this;
            }
            public Builder ClearDeviceType()
            {
                PrepareBuilder();
                result.hasDeviceType = false;
                result.deviceType_ = 0;
                return this;
            }

            public bool HasClientVersion
            {
                get { return result.hasClientVersion; }
            }
            [global::System.CLSCompliant(false)]
            public uint ClientVersion
            {
                get { return result.ClientVersion; }
                set { SetClientVersion(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetClientVersion(uint value)
            {
                PrepareBuilder();
                result.hasClientVersion = true;
                result.clientVersion_ = value;
                return this;
            }
            public Builder ClearClientVersion()
            {
                PrepareBuilder();
                result.hasClientVersion = false;
                result.clientVersion_ = 0;
                return this;
            }

            public bool HasTicket
            {
                get { return result.hasTicket; }
            }
            public pb::ByteString Ticket
            {
                get { return result.Ticket; }
                set { SetTicket(value); }
            }
            public Builder SetTicket(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasTicket = true;
                result.ticket_ = value;
                return this;
            }
            public Builder ClearTicket()
            {
                PrepareBuilder();
                result.hasTicket = false;
                result.ticket_ = pb::ByteString.Empty;
                return this;
            }
        }
        static PreOrderRequestDB()
        {
            object.ReferenceEquals(CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.MmpayHongBaoModel.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class HongBaoRefundRecord : pb::GeneratedMessage<HongBaoRefundRecord, HongBaoRefundRecord.Builder>
    {
        private HongBaoRefundRecord() { }
        private static readonly HongBaoRefundRecord defaultInstance = new HongBaoRefundRecord().MakeReadOnly();
        private static readonly string[] _hongBaoRefundRecordFieldNames = new string[] { "backup_int1", "backup_int2", "create_time", "memo", "modify_time", "pay_time", "payid", "refund_amount", "refund_cause", "refundid", "sendid", "spid", "state", "total_amount" };
        private static readonly uint[] _hongBaoRefundRecordFieldTags = new uint[] { 104, 112, 90, 74, 98, 82, 26, 48, 64, 10, 18, 34, 56, 40 };
        public static HongBaoRefundRecord DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override HongBaoRefundRecord DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override HongBaoRefundRecord ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.MmpayHongBaoModel.internal__static_MmpayHongBaoModel_HongBaoRefundRecord__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<HongBaoRefundRecord, HongBaoRefundRecord.Builder> InternalFieldAccessors
        {
            get { return CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.MmpayHongBaoModel.internal__static_MmpayHongBaoModel_HongBaoRefundRecord__FieldAccessorTable; }
        }

        public const int RefundidFieldNumber = 1;
        private bool hasRefundid;
        private pb::ByteString refundid_ = pb::ByteString.Empty;
        public bool HasRefundid
        {
            get { return hasRefundid; }
        }
        public pb::ByteString Refundid
        {
            get { return refundid_; }
        }

        public const int SendidFieldNumber = 2;
        private bool hasSendid;
        private pb::ByteString sendid_ = pb::ByteString.Empty;
        public bool HasSendid
        {
            get { return hasSendid; }
        }
        public pb::ByteString Sendid
        {
            get { return sendid_; }
        }

        public const int PayidFieldNumber = 3;
        private bool hasPayid;
        private pb::ByteString payid_ = pb::ByteString.Empty;
        public bool HasPayid
        {
            get { return hasPayid; }
        }
        public pb::ByteString Payid
        {
            get { return payid_; }
        }

        public const int SpidFieldNumber = 4;
        private bool hasSpid;
        private pb::ByteString spid_ = pb::ByteString.Empty;
        public bool HasSpid
        {
            get { return hasSpid; }
        }
        public pb::ByteString Spid
        {
            get { return spid_; }
        }

        public const int TotalAmountFieldNumber = 5;
        private bool hasTotalAmount;
        private long totalAmount_;
        public bool HasTotalAmount
        {
            get { return hasTotalAmount; }
        }
        public long TotalAmount
        {
            get { return totalAmount_; }
        }

        public const int RefundAmountFieldNumber = 6;
        private bool hasRefundAmount;
        private long refundAmount_;
        public bool HasRefundAmount
        {
            get { return hasRefundAmount; }
        }
        public long RefundAmount
        {
            get { return refundAmount_; }
        }

        public const int StateFieldNumber = 7;
        private bool hasState;
        private int state_;
        public bool HasState
        {
            get { return hasState; }
        }
        public int State
        {
            get { return state_; }
        }

        public const int RefundCauseFieldNumber = 8;
        private bool hasRefundCause;
        private int refundCause_;
        public bool HasRefundCause
        {
            get { return hasRefundCause; }
        }
        public int RefundCause
        {
            get { return refundCause_; }
        }

        public const int MemoFieldNumber = 9;
        private bool hasMemo;
        private pb::ByteString memo_ = pb::ByteString.Empty;
        public bool HasMemo
        {
            get { return hasMemo; }
        }
        public pb::ByteString Memo
        {
            get { return memo_; }
        }

        public const int PayTimeFieldNumber = 10;
        private bool hasPayTime;
        private pb::ByteString payTime_ = pb::ByteString.Empty;
        public bool HasPayTime
        {
            get { return hasPayTime; }
        }
        public pb::ByteString PayTime
        {
            get { return payTime_; }
        }

        public const int CreateTimeFieldNumber = 11;
        private bool hasCreateTime;
        private pb::ByteString createTime_ = pb::ByteString.Empty;
        public bool HasCreateTime
        {
            get { return hasCreateTime; }
        }
        public pb::ByteString CreateTime
        {
            get { return createTime_; }
        }

        public const int ModifyTimeFieldNumber = 12;
        private bool hasModifyTime;
        private pb::ByteString modifyTime_ = pb::ByteString.Empty;
        public bool HasModifyTime
        {
            get { return hasModifyTime; }
        }
        public pb::ByteString ModifyTime
        {
            get { return modifyTime_; }
        }

        public const int BackupInt1FieldNumber = 13;
        private bool hasBackupInt1;
        private int backupInt1_;
        public bool HasBackupInt1
        {
            get { return hasBackupInt1; }
        }
        public int BackupInt1
        {
            get { return backupInt1_; }
        }

        public const int BackupInt2FieldNumber = 14;
        private bool hasBackupInt2;
        private int backupInt2_;
        public bool HasBackupInt2
        {
            get { return hasBackupInt2; }
        }
        public int BackupInt2
        {
            get { return backupInt2_; }
        }

        public override bool IsInitialized
        {
            get
            {
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _hongBaoRefundRecordFieldNames;
            if (hasRefundid)
            {
                output.WriteBytes(1, field_names[9], Refundid);
            }
            if (hasSendid)
            {
                output.WriteBytes(2, field_names[10], Sendid);
            }
            if (hasPayid)
            {
                output.WriteBytes(3, field_names[6], Payid);
            }
            if (hasSpid)
            {
                output.WriteBytes(4, field_names[11], Spid);
            }
            if (hasTotalAmount)
            {
                output.WriteInt64(5, field_names[13], TotalAmount);
            }
            if (hasRefundAmount)
            {
                output.WriteInt64(6, field_names[7], RefundAmount);
            }
            if (hasState)
            {
                output.WriteInt32(7, field_names[12], State);
            }
            if (hasRefundCause)
            {
                output.WriteInt32(8, field_names[8], RefundCause);
            }
            if (hasMemo)
            {
                output.WriteBytes(9, field_names[3], Memo);
            }
            if (hasPayTime)
            {
                output.WriteBytes(10, field_names[5], PayTime);
            }
            if (hasCreateTime)
            {
                output.WriteBytes(11, field_names[2], CreateTime);
            }
            if (hasModifyTime)
            {
                output.WriteBytes(12, field_names[4], ModifyTime);
            }
            if (hasBackupInt1)
            {
                output.WriteInt32(13, field_names[0], BackupInt1);
            }
            if (hasBackupInt2)
            {
                output.WriteInt32(14, field_names[1], BackupInt2);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasRefundid)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(1, Refundid);
                }
                if (hasSendid)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(2, Sendid);
                }
                if (hasPayid)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(3, Payid);
                }
                if (hasSpid)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(4, Spid);
                }
                if (hasTotalAmount)
                {
                    size += pb::CodedOutputStream.ComputeInt64Size(5, TotalAmount);
                }
                if (hasRefundAmount)
                {
                    size += pb::CodedOutputStream.ComputeInt64Size(6, RefundAmount);
                }
                if (hasState)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(7, State);
                }
                if (hasRefundCause)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(8, RefundCause);
                }
                if (hasMemo)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(9, Memo);
                }
                if (hasPayTime)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(10, PayTime);
                }
                if (hasCreateTime)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(11, CreateTime);
                }
                if (hasModifyTime)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(12, ModifyTime);
                }
                if (hasBackupInt1)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(13, BackupInt1);
                }
                if (hasBackupInt2)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(14, BackupInt2);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static HongBaoRefundRecord ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static HongBaoRefundRecord ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static HongBaoRefundRecord ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static HongBaoRefundRecord ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static HongBaoRefundRecord ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static HongBaoRefundRecord ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static HongBaoRefundRecord ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static HongBaoRefundRecord ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static HongBaoRefundRecord ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static HongBaoRefundRecord ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private HongBaoRefundRecord MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(HongBaoRefundRecord prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<HongBaoRefundRecord, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(HongBaoRefundRecord cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private HongBaoRefundRecord result;

            private HongBaoRefundRecord PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    HongBaoRefundRecord original = result;
                    result = new HongBaoRefundRecord();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override HongBaoRefundRecord MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoRefundRecord.Descriptor; }
            }

            public override HongBaoRefundRecord DefaultInstanceForType
            {
                get { return CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoRefundRecord.DefaultInstance; }
            }

            public override HongBaoRefundRecord BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is HongBaoRefundRecord)
                {
                    return MergeFrom((HongBaoRefundRecord)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(HongBaoRefundRecord other)
            {
                if (other == CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoRefundRecord.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasRefundid)
                {
                    Refundid = other.Refundid;
                }
                if (other.HasSendid)
                {
                    Sendid = other.Sendid;
                }
                if (other.HasPayid)
                {
                    Payid = other.Payid;
                }
                if (other.HasSpid)
                {
                    Spid = other.Spid;
                }
                if (other.HasTotalAmount)
                {
                    TotalAmount = other.TotalAmount;
                }
                if (other.HasRefundAmount)
                {
                    RefundAmount = other.RefundAmount;
                }
                if (other.HasState)
                {
                    State = other.State;
                }
                if (other.HasRefundCause)
                {
                    RefundCause = other.RefundCause;
                }
                if (other.HasMemo)
                {
                    Memo = other.Memo;
                }
                if (other.HasPayTime)
                {
                    PayTime = other.PayTime;
                }
                if (other.HasCreateTime)
                {
                    CreateTime = other.CreateTime;
                }
                if (other.HasModifyTime)
                {
                    ModifyTime = other.ModifyTime;
                }
                if (other.HasBackupInt1)
                {
                    BackupInt1 = other.BackupInt1;
                }
                if (other.HasBackupInt2)
                {
                    BackupInt2 = other.BackupInt2;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_hongBaoRefundRecordFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _hongBaoRefundRecordFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                result.hasRefundid = input.ReadBytes(ref result.refundid_);
                                break;
                            }
                        case 18:
                            {
                                result.hasSendid = input.ReadBytes(ref result.sendid_);
                                break;
                            }
                        case 26:
                            {
                                result.hasPayid = input.ReadBytes(ref result.payid_);
                                break;
                            }
                        case 34:
                            {
                                result.hasSpid = input.ReadBytes(ref result.spid_);
                                break;
                            }
                        case 40:
                            {
                                result.hasTotalAmount = input.ReadInt64(ref result.totalAmount_);
                                break;
                            }
                        case 48:
                            {
                                result.hasRefundAmount = input.ReadInt64(ref result.refundAmount_);
                                break;
                            }
                        case 56:
                            {
                                result.hasState = input.ReadInt32(ref result.state_);
                                break;
                            }
                        case 64:
                            {
                                result.hasRefundCause = input.ReadInt32(ref result.refundCause_);
                                break;
                            }
                        case 74:
                            {
                                result.hasMemo = input.ReadBytes(ref result.memo_);
                                break;
                            }
                        case 82:
                            {
                                result.hasPayTime = input.ReadBytes(ref result.payTime_);
                                break;
                            }
                        case 90:
                            {
                                result.hasCreateTime = input.ReadBytes(ref result.createTime_);
                                break;
                            }
                        case 98:
                            {
                                result.hasModifyTime = input.ReadBytes(ref result.modifyTime_);
                                break;
                            }
                        case 104:
                            {
                                result.hasBackupInt1 = input.ReadInt32(ref result.backupInt1_);
                                break;
                            }
                        case 112:
                            {
                                result.hasBackupInt2 = input.ReadInt32(ref result.backupInt2_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasRefundid
            {
                get { return result.hasRefundid; }
            }
            public pb::ByteString Refundid
            {
                get { return result.Refundid; }
                set { SetRefundid(value); }
            }
            public Builder SetRefundid(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasRefundid = true;
                result.refundid_ = value;
                return this;
            }
            public Builder ClearRefundid()
            {
                PrepareBuilder();
                result.hasRefundid = false;
                result.refundid_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasSendid
            {
                get { return result.hasSendid; }
            }
            public pb::ByteString Sendid
            {
                get { return result.Sendid; }
                set { SetSendid(value); }
            }
            public Builder SetSendid(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasSendid = true;
                result.sendid_ = value;
                return this;
            }
            public Builder ClearSendid()
            {
                PrepareBuilder();
                result.hasSendid = false;
                result.sendid_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasPayid
            {
                get { return result.hasPayid; }
            }
            public pb::ByteString Payid
            {
                get { return result.Payid; }
                set { SetPayid(value); }
            }
            public Builder SetPayid(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasPayid = true;
                result.payid_ = value;
                return this;
            }
            public Builder ClearPayid()
            {
                PrepareBuilder();
                result.hasPayid = false;
                result.payid_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasSpid
            {
                get { return result.hasSpid; }
            }
            public pb::ByteString Spid
            {
                get { return result.Spid; }
                set { SetSpid(value); }
            }
            public Builder SetSpid(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasSpid = true;
                result.spid_ = value;
                return this;
            }
            public Builder ClearSpid()
            {
                PrepareBuilder();
                result.hasSpid = false;
                result.spid_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasTotalAmount
            {
                get { return result.hasTotalAmount; }
            }
            public long TotalAmount
            {
                get { return result.TotalAmount; }
                set { SetTotalAmount(value); }
            }
            public Builder SetTotalAmount(long value)
            {
                PrepareBuilder();
                result.hasTotalAmount = true;
                result.totalAmount_ = value;
                return this;
            }
            public Builder ClearTotalAmount()
            {
                PrepareBuilder();
                result.hasTotalAmount = false;
                result.totalAmount_ = 0L;
                return this;
            }

            public bool HasRefundAmount
            {
                get { return result.hasRefundAmount; }
            }
            public long RefundAmount
            {
                get { return result.RefundAmount; }
                set { SetRefundAmount(value); }
            }
            public Builder SetRefundAmount(long value)
            {
                PrepareBuilder();
                result.hasRefundAmount = true;
                result.refundAmount_ = value;
                return this;
            }
            public Builder ClearRefundAmount()
            {
                PrepareBuilder();
                result.hasRefundAmount = false;
                result.refundAmount_ = 0L;
                return this;
            }

            public bool HasState
            {
                get { return result.hasState; }
            }
            public int State
            {
                get { return result.State; }
                set { SetState(value); }
            }
            public Builder SetState(int value)
            {
                PrepareBuilder();
                result.hasState = true;
                result.state_ = value;
                return this;
            }
            public Builder ClearState()
            {
                PrepareBuilder();
                result.hasState = false;
                result.state_ = 0;
                return this;
            }

            public bool HasRefundCause
            {
                get { return result.hasRefundCause; }
            }
            public int RefundCause
            {
                get { return result.RefundCause; }
                set { SetRefundCause(value); }
            }
            public Builder SetRefundCause(int value)
            {
                PrepareBuilder();
                result.hasRefundCause = true;
                result.refundCause_ = value;
                return this;
            }
            public Builder ClearRefundCause()
            {
                PrepareBuilder();
                result.hasRefundCause = false;
                result.refundCause_ = 0;
                return this;
            }

            public bool HasMemo
            {
                get { return result.hasMemo; }
            }
            public pb::ByteString Memo
            {
                get { return result.Memo; }
                set { SetMemo(value); }
            }
            public Builder SetMemo(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasMemo = true;
                result.memo_ = value;
                return this;
            }
            public Builder ClearMemo()
            {
                PrepareBuilder();
                result.hasMemo = false;
                result.memo_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasPayTime
            {
                get { return result.hasPayTime; }
            }
            public pb::ByteString PayTime
            {
                get { return result.PayTime; }
                set { SetPayTime(value); }
            }
            public Builder SetPayTime(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasPayTime = true;
                result.payTime_ = value;
                return this;
            }
            public Builder ClearPayTime()
            {
                PrepareBuilder();
                result.hasPayTime = false;
                result.payTime_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasCreateTime
            {
                get { return result.hasCreateTime; }
            }
            public pb::ByteString CreateTime
            {
                get { return result.CreateTime; }
                set { SetCreateTime(value); }
            }
            public Builder SetCreateTime(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasCreateTime = true;
                result.createTime_ = value;
                return this;
            }
            public Builder ClearCreateTime()
            {
                PrepareBuilder();
                result.hasCreateTime = false;
                result.createTime_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasModifyTime
            {
                get { return result.hasModifyTime; }
            }
            public pb::ByteString ModifyTime
            {
                get { return result.ModifyTime; }
                set { SetModifyTime(value); }
            }
            public Builder SetModifyTime(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasModifyTime = true;
                result.modifyTime_ = value;
                return this;
            }
            public Builder ClearModifyTime()
            {
                PrepareBuilder();
                result.hasModifyTime = false;
                result.modifyTime_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasBackupInt1
            {
                get { return result.hasBackupInt1; }
            }
            public int BackupInt1
            {
                get { return result.BackupInt1; }
                set { SetBackupInt1(value); }
            }
            public Builder SetBackupInt1(int value)
            {
                PrepareBuilder();
                result.hasBackupInt1 = true;
                result.backupInt1_ = value;
                return this;
            }
            public Builder ClearBackupInt1()
            {
                PrepareBuilder();
                result.hasBackupInt1 = false;
                result.backupInt1_ = 0;
                return this;
            }

            public bool HasBackupInt2
            {
                get { return result.hasBackupInt2; }
            }
            public int BackupInt2
            {
                get { return result.BackupInt2; }
                set { SetBackupInt2(value); }
            }
            public Builder SetBackupInt2(int value)
            {
                PrepareBuilder();
                result.hasBackupInt2 = true;
                result.backupInt2_ = value;
                return this;
            }
            public Builder ClearBackupInt2()
            {
                PrepareBuilder();
                result.hasBackupInt2 = false;
                result.backupInt2_ = 0;
                return this;
            }
        }
        static HongBaoRefundRecord()
        {
            object.ReferenceEquals(CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.MmpayHongBaoModel.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class CommRes : pb::GeneratedMessage<CommRes, CommRes.Builder>
    {
        private CommRes() { }
        private static readonly CommRes defaultInstance = new CommRes().MakeReadOnly();
        private static readonly string[] _commResFieldNames = new string[] { "retcode", "retmsg" };
        private static readonly uint[] _commResFieldTags = new uint[] { 10, 18 };
        public static CommRes DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override CommRes DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override CommRes ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.MmpayHongBaoModel.internal__static_MmpayHongBaoModel_CommRes__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<CommRes, CommRes.Builder> InternalFieldAccessors
        {
            get { return CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.MmpayHongBaoModel.internal__static_MmpayHongBaoModel_CommRes__FieldAccessorTable; }
        }

        public const int RetcodeFieldNumber = 1;
        private bool hasRetcode;
        private pb::ByteString retcode_ = (pb::ByteString)CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.CommRes.Descriptor.Fields[0].DefaultValue;
        public bool HasRetcode
        {
            get { return hasRetcode; }
        }
        public pb::ByteString Retcode
        {
            get { return retcode_; }
        }

        public const int RetmsgFieldNumber = 2;
        private bool hasRetmsg;
        private pb::ByteString retmsg_ = (pb::ByteString)CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.CommRes.Descriptor.Fields[1].DefaultValue;
        public bool HasRetmsg
        {
            get { return hasRetmsg; }
        }
        public pb::ByteString Retmsg
        {
            get { return retmsg_; }
        }

        public override bool IsInitialized
        {
            get
            {
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _commResFieldNames;
            if (hasRetcode)
            {
                output.WriteBytes(1, field_names[0], Retcode);
            }
            if (hasRetmsg)
            {
                output.WriteBytes(2, field_names[1], Retmsg);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasRetcode)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(1, Retcode);
                }
                if (hasRetmsg)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(2, Retmsg);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static CommRes ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static CommRes ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static CommRes ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static CommRes ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static CommRes ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static CommRes ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static CommRes ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static CommRes ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static CommRes ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static CommRes ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private CommRes MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(CommRes prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<CommRes, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(CommRes cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private CommRes result;

            private CommRes PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    CommRes original = result;
                    result = new CommRes();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override CommRes MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.CommRes.Descriptor; }
            }

            public override CommRes DefaultInstanceForType
            {
                get { return CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.CommRes.DefaultInstance; }
            }

            public override CommRes BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is CommRes)
                {
                    return MergeFrom((CommRes)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(CommRes other)
            {
                if (other == CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.CommRes.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasRetcode)
                {
                    Retcode = other.Retcode;
                }
                if (other.HasRetmsg)
                {
                    Retmsg = other.Retmsg;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_commResFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _commResFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                result.hasRetcode = input.ReadBytes(ref result.retcode_);
                                break;
                            }
                        case 18:
                            {
                                result.hasRetmsg = input.ReadBytes(ref result.retmsg_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasRetcode
            {
                get { return result.hasRetcode; }
            }
            public pb::ByteString Retcode
            {
                get { return result.Retcode; }
                set { SetRetcode(value); }
            }
            public Builder SetRetcode(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasRetcode = true;
                result.retcode_ = value;
                return this;
            }
            public Builder ClearRetcode()
            {
                PrepareBuilder();
                result.hasRetcode = false;
                result.retcode_ = (pb::ByteString)CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.CommRes.Descriptor.Fields[0].DefaultValue;
                return this;
            }

            public bool HasRetmsg
            {
                get { return result.hasRetmsg; }
            }
            public pb::ByteString Retmsg
            {
                get { return result.Retmsg; }
                set { SetRetmsg(value); }
            }
            public Builder SetRetmsg(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasRetmsg = true;
                result.retmsg_ = value;
                return this;
            }
            public Builder ClearRetmsg()
            {
                PrepareBuilder();
                result.hasRetmsg = false;
                result.retmsg_ = (pb::ByteString)CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.CommRes.Descriptor.Fields[1].DefaultValue;
                return this;
            }
        }
        static CommRes()
        {
            object.ReferenceEquals(CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.MmpayHongBaoModel.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class HongBaoSpRelation : pb::GeneratedMessage<HongBaoSpRelation, HongBaoSpRelation.Builder>
    {
        private HongBaoSpRelation() { }
        private static readonly HongBaoSpRelation defaultInstance = new HongBaoSpRelation().MakeReadOnly();
        private static readonly string[] _hongBaoSpRelationFieldNames = new string[] { "create_time", "mch_id", "modify_time", "send_id", "send_model", "sp_billno", "sp_type" };
        private static readonly uint[] _hongBaoSpRelationFieldTags = new uint[] { 42, 18, 50, 26, 56, 10, 32 };
        public static HongBaoSpRelation DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override HongBaoSpRelation DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override HongBaoSpRelation ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.MmpayHongBaoModel.internal__static_MmpayHongBaoModel_HongBaoSpRelation__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<HongBaoSpRelation, HongBaoSpRelation.Builder> InternalFieldAccessors
        {
            get { return CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.MmpayHongBaoModel.internal__static_MmpayHongBaoModel_HongBaoSpRelation__FieldAccessorTable; }
        }

        public const int SpBillnoFieldNumber = 1;
        private bool hasSpBillno;
        private pb::ByteString spBillno_ = pb::ByteString.Empty;
        public bool HasSpBillno
        {
            get { return hasSpBillno; }
        }
        public pb::ByteString SpBillno
        {
            get { return spBillno_; }
        }

        public const int MchIdFieldNumber = 2;
        private bool hasMchId;
        private pb::ByteString mchId_ = pb::ByteString.Empty;
        public bool HasMchId
        {
            get { return hasMchId; }
        }
        public pb::ByteString MchId
        {
            get { return mchId_; }
        }

        public const int SendIdFieldNumber = 3;
        private bool hasSendId;
        private pb::ByteString sendId_ = pb::ByteString.Empty;
        public bool HasSendId
        {
            get { return hasSendId; }
        }
        public pb::ByteString SendId
        {
            get { return sendId_; }
        }

        public const int SpTypeFieldNumber = 4;
        private bool hasSpType;
        private uint spType_;
        public bool HasSpType
        {
            get { return hasSpType; }
        }
        [global::System.CLSCompliant(false)]
        public uint SpType
        {
            get { return spType_; }
        }

        public const int CreateTimeFieldNumber = 5;
        private bool hasCreateTime;
        private pb::ByteString createTime_ = pb::ByteString.Empty;
        public bool HasCreateTime
        {
            get { return hasCreateTime; }
        }
        public pb::ByteString CreateTime
        {
            get { return createTime_; }
        }

        public const int ModifyTimeFieldNumber = 6;
        private bool hasModifyTime;
        private pb::ByteString modifyTime_ = pb::ByteString.Empty;
        public bool HasModifyTime
        {
            get { return hasModifyTime; }
        }
        public pb::ByteString ModifyTime
        {
            get { return modifyTime_; }
        }

        public const int SendModelFieldNumber = 7;
        private bool hasSendModel;
        private int sendModel_;
        public bool HasSendModel
        {
            get { return hasSendModel; }
        }
        public int SendModel
        {
            get { return sendModel_; }
        }

        public override bool IsInitialized
        {
            get
            {
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _hongBaoSpRelationFieldNames;
            if (hasSpBillno)
            {
                output.WriteBytes(1, field_names[5], SpBillno);
            }
            if (hasMchId)
            {
                output.WriteBytes(2, field_names[1], MchId);
            }
            if (hasSendId)
            {
                output.WriteBytes(3, field_names[3], SendId);
            }
            if (hasSpType)
            {
                output.WriteUInt32(4, field_names[6], SpType);
            }
            if (hasCreateTime)
            {
                output.WriteBytes(5, field_names[0], CreateTime);
            }
            if (hasModifyTime)
            {
                output.WriteBytes(6, field_names[2], ModifyTime);
            }
            if (hasSendModel)
            {
                output.WriteInt32(7, field_names[4], SendModel);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasSpBillno)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(1, SpBillno);
                }
                if (hasMchId)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(2, MchId);
                }
                if (hasSendId)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(3, SendId);
                }
                if (hasSpType)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(4, SpType);
                }
                if (hasCreateTime)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(5, CreateTime);
                }
                if (hasModifyTime)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(6, ModifyTime);
                }
                if (hasSendModel)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(7, SendModel);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static HongBaoSpRelation ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static HongBaoSpRelation ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static HongBaoSpRelation ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static HongBaoSpRelation ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static HongBaoSpRelation ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static HongBaoSpRelation ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static HongBaoSpRelation ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static HongBaoSpRelation ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static HongBaoSpRelation ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static HongBaoSpRelation ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private HongBaoSpRelation MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(HongBaoSpRelation prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<HongBaoSpRelation, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(HongBaoSpRelation cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private HongBaoSpRelation result;

            private HongBaoSpRelation PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    HongBaoSpRelation original = result;
                    result = new HongBaoSpRelation();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override HongBaoSpRelation MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoSpRelation.Descriptor; }
            }

            public override HongBaoSpRelation DefaultInstanceForType
            {
                get { return CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoSpRelation.DefaultInstance; }
            }

            public override HongBaoSpRelation BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is HongBaoSpRelation)
                {
                    return MergeFrom((HongBaoSpRelation)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(HongBaoSpRelation other)
            {
                if (other == CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoSpRelation.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasSpBillno)
                {
                    SpBillno = other.SpBillno;
                }
                if (other.HasMchId)
                {
                    MchId = other.MchId;
                }
                if (other.HasSendId)
                {
                    SendId = other.SendId;
                }
                if (other.HasSpType)
                {
                    SpType = other.SpType;
                }
                if (other.HasCreateTime)
                {
                    CreateTime = other.CreateTime;
                }
                if (other.HasModifyTime)
                {
                    ModifyTime = other.ModifyTime;
                }
                if (other.HasSendModel)
                {
                    SendModel = other.SendModel;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_hongBaoSpRelationFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _hongBaoSpRelationFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                result.hasSpBillno = input.ReadBytes(ref result.spBillno_);
                                break;
                            }
                        case 18:
                            {
                                result.hasMchId = input.ReadBytes(ref result.mchId_);
                                break;
                            }
                        case 26:
                            {
                                result.hasSendId = input.ReadBytes(ref result.sendId_);
                                break;
                            }
                        case 32:
                            {
                                result.hasSpType = input.ReadUInt32(ref result.spType_);
                                break;
                            }
                        case 42:
                            {
                                result.hasCreateTime = input.ReadBytes(ref result.createTime_);
                                break;
                            }
                        case 50:
                            {
                                result.hasModifyTime = input.ReadBytes(ref result.modifyTime_);
                                break;
                            }
                        case 56:
                            {
                                result.hasSendModel = input.ReadInt32(ref result.sendModel_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasSpBillno
            {
                get { return result.hasSpBillno; }
            }
            public pb::ByteString SpBillno
            {
                get { return result.SpBillno; }
                set { SetSpBillno(value); }
            }
            public Builder SetSpBillno(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasSpBillno = true;
                result.spBillno_ = value;
                return this;
            }
            public Builder ClearSpBillno()
            {
                PrepareBuilder();
                result.hasSpBillno = false;
                result.spBillno_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasMchId
            {
                get { return result.hasMchId; }
            }
            public pb::ByteString MchId
            {
                get { return result.MchId; }
                set { SetMchId(value); }
            }
            public Builder SetMchId(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasMchId = true;
                result.mchId_ = value;
                return this;
            }
            public Builder ClearMchId()
            {
                PrepareBuilder();
                result.hasMchId = false;
                result.mchId_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasSendId
            {
                get { return result.hasSendId; }
            }
            public pb::ByteString SendId
            {
                get { return result.SendId; }
                set { SetSendId(value); }
            }
            public Builder SetSendId(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasSendId = true;
                result.sendId_ = value;
                return this;
            }
            public Builder ClearSendId()
            {
                PrepareBuilder();
                result.hasSendId = false;
                result.sendId_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasSpType
            {
                get { return result.hasSpType; }
            }
            [global::System.CLSCompliant(false)]
            public uint SpType
            {
                get { return result.SpType; }
                set { SetSpType(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetSpType(uint value)
            {
                PrepareBuilder();
                result.hasSpType = true;
                result.spType_ = value;
                return this;
            }
            public Builder ClearSpType()
            {
                PrepareBuilder();
                result.hasSpType = false;
                result.spType_ = 0;
                return this;
            }

            public bool HasCreateTime
            {
                get { return result.hasCreateTime; }
            }
            public pb::ByteString CreateTime
            {
                get { return result.CreateTime; }
                set { SetCreateTime(value); }
            }
            public Builder SetCreateTime(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasCreateTime = true;
                result.createTime_ = value;
                return this;
            }
            public Builder ClearCreateTime()
            {
                PrepareBuilder();
                result.hasCreateTime = false;
                result.createTime_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasModifyTime
            {
                get { return result.hasModifyTime; }
            }
            public pb::ByteString ModifyTime
            {
                get { return result.ModifyTime; }
                set { SetModifyTime(value); }
            }
            public Builder SetModifyTime(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasModifyTime = true;
                result.modifyTime_ = value;
                return this;
            }
            public Builder ClearModifyTime()
            {
                PrepareBuilder();
                result.hasModifyTime = false;
                result.modifyTime_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasSendModel
            {
                get { return result.hasSendModel; }
            }
            public int SendModel
            {
                get { return result.SendModel; }
                set { SetSendModel(value); }
            }
            public Builder SetSendModel(int value)
            {
                PrepareBuilder();
                result.hasSendModel = true;
                result.sendModel_ = value;
                return this;
            }
            public Builder ClearSendModel()
            {
                PrepareBuilder();
                result.hasSendModel = false;
                result.sendModel_ = 0;
                return this;
            }
        }
        static HongBaoSpRelation()
        {
            object.ReferenceEquals(CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.MmpayHongBaoModel.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class HongBaoWagerInfo : pb::GeneratedMessage<HongBaoWagerInfo, HongBaoWagerInfo.Builder>
    {
        private HongBaoWagerInfo() { }
        private static readonly HongBaoWagerInfo defaultInstance = new HongBaoWagerInfo().MakeReadOnly();
        private static readonly string[] _hongBaoWagerInfoFieldNames = new string[] { "clientip", "clientversion", "deviceid", "devicetypeid", "fromuin", "hbcount", "hbtype", "money", "pagetype", "sendid", "source", "tousername" };
        private static readonly uint[] _hongBaoWagerInfoFieldTags = new uint[] { 74, 88, 98, 80, 8, 56, 40, 32, 16, 66, 48, 26 };
        public static HongBaoWagerInfo DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override HongBaoWagerInfo DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override HongBaoWagerInfo ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.MmpayHongBaoModel.internal__static_MmpayHongBaoModel_HongBaoWagerInfo__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<HongBaoWagerInfo, HongBaoWagerInfo.Builder> InternalFieldAccessors
        {
            get { return CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.MmpayHongBaoModel.internal__static_MmpayHongBaoModel_HongBaoWagerInfo__FieldAccessorTable; }
        }

        public const int FromuinFieldNumber = 1;
        private bool hasFromuin;
        private uint fromuin_;
        public bool HasFromuin
        {
            get { return hasFromuin; }
        }
        [global::System.CLSCompliant(false)]
        public uint Fromuin
        {
            get { return fromuin_; }
        }

        public const int PagetypeFieldNumber = 2;
        private bool hasPagetype;
        private uint pagetype_;
        public bool HasPagetype
        {
            get { return hasPagetype; }
        }
        [global::System.CLSCompliant(false)]
        public uint Pagetype
        {
            get { return pagetype_; }
        }

        public const int TousernameFieldNumber = 3;
        private bool hasTousername;
        private string tousername_ = "";
        public bool HasTousername
        {
            get { return hasTousername; }
        }
        public string Tousername
        {
            get { return tousername_; }
        }

        public const int MoneyFieldNumber = 4;
        private bool hasMoney;
        private uint money_;
        public bool HasMoney
        {
            get { return hasMoney; }
        }
        [global::System.CLSCompliant(false)]
        public uint Money
        {
            get { return money_; }
        }

        public const int HbtypeFieldNumber = 5;
        private bool hasHbtype;
        private uint hbtype_;
        public bool HasHbtype
        {
            get { return hasHbtype; }
        }
        [global::System.CLSCompliant(false)]
        public uint Hbtype
        {
            get { return hbtype_; }
        }

        public const int SourceFieldNumber = 6;
        private bool hasSource;
        private uint source_;
        public bool HasSource
        {
            get { return hasSource; }
        }
        [global::System.CLSCompliant(false)]
        public uint Source
        {
            get { return source_; }
        }

        public const int HbcountFieldNumber = 7;
        private bool hasHbcount;
        private uint hbcount_;
        public bool HasHbcount
        {
            get { return hasHbcount; }
        }
        [global::System.CLSCompliant(false)]
        public uint Hbcount
        {
            get { return hbcount_; }
        }

        public const int SendidFieldNumber = 8;
        private bool hasSendid;
        private string sendid_ = "";
        public bool HasSendid
        {
            get { return hasSendid; }
        }
        public string Sendid
        {
            get { return sendid_; }
        }

        public const int ClientipFieldNumber = 9;
        private bool hasClientip;
        private string clientip_ = "";
        public bool HasClientip
        {
            get { return hasClientip; }
        }
        public string Clientip
        {
            get { return clientip_; }
        }

        public const int DevicetypeidFieldNumber = 10;
        private bool hasDevicetypeid;
        private uint devicetypeid_;
        public bool HasDevicetypeid
        {
            get { return hasDevicetypeid; }
        }
        [global::System.CLSCompliant(false)]
        public uint Devicetypeid
        {
            get { return devicetypeid_; }
        }

        public const int ClientversionFieldNumber = 11;
        private bool hasClientversion;
        private uint clientversion_;
        public bool HasClientversion
        {
            get { return hasClientversion; }
        }
        [global::System.CLSCompliant(false)]
        public uint Clientversion
        {
            get { return clientversion_; }
        }

        public const int DeviceidFieldNumber = 12;
        private bool hasDeviceid;
        private string deviceid_ = "";
        public bool HasDeviceid
        {
            get { return hasDeviceid; }
        }
        public string Deviceid
        {
            get { return deviceid_; }
        }

        public override bool IsInitialized
        {
            get
            {
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _hongBaoWagerInfoFieldNames;
            if (hasFromuin)
            {
                output.WriteUInt32(1, field_names[4], Fromuin);
            }
            if (hasPagetype)
            {
                output.WriteUInt32(2, field_names[8], Pagetype);
            }
            if (hasTousername)
            {
                output.WriteString(3, field_names[11], Tousername);
            }
            if (hasMoney)
            {
                output.WriteUInt32(4, field_names[7], Money);
            }
            if (hasHbtype)
            {
                output.WriteUInt32(5, field_names[6], Hbtype);
            }
            if (hasSource)
            {
                output.WriteUInt32(6, field_names[10], Source);
            }
            if (hasHbcount)
            {
                output.WriteUInt32(7, field_names[5], Hbcount);
            }
            if (hasSendid)
            {
                output.WriteString(8, field_names[9], Sendid);
            }
            if (hasClientip)
            {
                output.WriteString(9, field_names[0], Clientip);
            }
            if (hasDevicetypeid)
            {
                output.WriteUInt32(10, field_names[3], Devicetypeid);
            }
            if (hasClientversion)
            {
                output.WriteUInt32(11, field_names[1], Clientversion);
            }
            if (hasDeviceid)
            {
                output.WriteString(12, field_names[2], Deviceid);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasFromuin)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(1, Fromuin);
                }
                if (hasPagetype)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(2, Pagetype);
                }
                if (hasTousername)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(3, Tousername);
                }
                if (hasMoney)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(4, Money);
                }
                if (hasHbtype)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(5, Hbtype);
                }
                if (hasSource)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(6, Source);
                }
                if (hasHbcount)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(7, Hbcount);
                }
                if (hasSendid)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(8, Sendid);
                }
                if (hasClientip)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(9, Clientip);
                }
                if (hasDevicetypeid)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(10, Devicetypeid);
                }
                if (hasClientversion)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(11, Clientversion);
                }
                if (hasDeviceid)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(12, Deviceid);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static HongBaoWagerInfo ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static HongBaoWagerInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static HongBaoWagerInfo ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static HongBaoWagerInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static HongBaoWagerInfo ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static HongBaoWagerInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static HongBaoWagerInfo ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static HongBaoWagerInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static HongBaoWagerInfo ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static HongBaoWagerInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private HongBaoWagerInfo MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(HongBaoWagerInfo prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<HongBaoWagerInfo, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(HongBaoWagerInfo cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private HongBaoWagerInfo result;

            private HongBaoWagerInfo PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    HongBaoWagerInfo original = result;
                    result = new HongBaoWagerInfo();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override HongBaoWagerInfo MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoWagerInfo.Descriptor; }
            }

            public override HongBaoWagerInfo DefaultInstanceForType
            {
                get { return CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoWagerInfo.DefaultInstance; }
            }

            public override HongBaoWagerInfo BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is HongBaoWagerInfo)
                {
                    return MergeFrom((HongBaoWagerInfo)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(HongBaoWagerInfo other)
            {
                if (other == CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoWagerInfo.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasFromuin)
                {
                    Fromuin = other.Fromuin;
                }
                if (other.HasPagetype)
                {
                    Pagetype = other.Pagetype;
                }
                if (other.HasTousername)
                {
                    Tousername = other.Tousername;
                }
                if (other.HasMoney)
                {
                    Money = other.Money;
                }
                if (other.HasHbtype)
                {
                    Hbtype = other.Hbtype;
                }
                if (other.HasSource)
                {
                    Source = other.Source;
                }
                if (other.HasHbcount)
                {
                    Hbcount = other.Hbcount;
                }
                if (other.HasSendid)
                {
                    Sendid = other.Sendid;
                }
                if (other.HasClientip)
                {
                    Clientip = other.Clientip;
                }
                if (other.HasDevicetypeid)
                {
                    Devicetypeid = other.Devicetypeid;
                }
                if (other.HasClientversion)
                {
                    Clientversion = other.Clientversion;
                }
                if (other.HasDeviceid)
                {
                    Deviceid = other.Deviceid;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_hongBaoWagerInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _hongBaoWagerInfoFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 8:
                            {
                                result.hasFromuin = input.ReadUInt32(ref result.fromuin_);
                                break;
                            }
                        case 16:
                            {
                                result.hasPagetype = input.ReadUInt32(ref result.pagetype_);
                                break;
                            }
                        case 26:
                            {
                                result.hasTousername = input.ReadString(ref result.tousername_);
                                break;
                            }
                        case 32:
                            {
                                result.hasMoney = input.ReadUInt32(ref result.money_);
                                break;
                            }
                        case 40:
                            {
                                result.hasHbtype = input.ReadUInt32(ref result.hbtype_);
                                break;
                            }
                        case 48:
                            {
                                result.hasSource = input.ReadUInt32(ref result.source_);
                                break;
                            }
                        case 56:
                            {
                                result.hasHbcount = input.ReadUInt32(ref result.hbcount_);
                                break;
                            }
                        case 66:
                            {
                                result.hasSendid = input.ReadString(ref result.sendid_);
                                break;
                            }
                        case 74:
                            {
                                result.hasClientip = input.ReadString(ref result.clientip_);
                                break;
                            }
                        case 80:
                            {
                                result.hasDevicetypeid = input.ReadUInt32(ref result.devicetypeid_);
                                break;
                            }
                        case 88:
                            {
                                result.hasClientversion = input.ReadUInt32(ref result.clientversion_);
                                break;
                            }
                        case 98:
                            {
                                result.hasDeviceid = input.ReadString(ref result.deviceid_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasFromuin
            {
                get { return result.hasFromuin; }
            }
            [global::System.CLSCompliant(false)]
            public uint Fromuin
            {
                get { return result.Fromuin; }
                set { SetFromuin(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetFromuin(uint value)
            {
                PrepareBuilder();
                result.hasFromuin = true;
                result.fromuin_ = value;
                return this;
            }
            public Builder ClearFromuin()
            {
                PrepareBuilder();
                result.hasFromuin = false;
                result.fromuin_ = 0;
                return this;
            }

            public bool HasPagetype
            {
                get { return result.hasPagetype; }
            }
            [global::System.CLSCompliant(false)]
            public uint Pagetype
            {
                get { return result.Pagetype; }
                set { SetPagetype(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetPagetype(uint value)
            {
                PrepareBuilder();
                result.hasPagetype = true;
                result.pagetype_ = value;
                return this;
            }
            public Builder ClearPagetype()
            {
                PrepareBuilder();
                result.hasPagetype = false;
                result.pagetype_ = 0;
                return this;
            }

            public bool HasTousername
            {
                get { return result.hasTousername; }
            }
            public string Tousername
            {
                get { return result.Tousername; }
                set { SetTousername(value); }
            }
            public Builder SetTousername(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasTousername = true;
                result.tousername_ = value;
                return this;
            }
            public Builder ClearTousername()
            {
                PrepareBuilder();
                result.hasTousername = false;
                result.tousername_ = "";
                return this;
            }

            public bool HasMoney
            {
                get { return result.hasMoney; }
            }
            [global::System.CLSCompliant(false)]
            public uint Money
            {
                get { return result.Money; }
                set { SetMoney(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetMoney(uint value)
            {
                PrepareBuilder();
                result.hasMoney = true;
                result.money_ = value;
                return this;
            }
            public Builder ClearMoney()
            {
                PrepareBuilder();
                result.hasMoney = false;
                result.money_ = 0;
                return this;
            }

            public bool HasHbtype
            {
                get { return result.hasHbtype; }
            }
            [global::System.CLSCompliant(false)]
            public uint Hbtype
            {
                get { return result.Hbtype; }
                set { SetHbtype(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetHbtype(uint value)
            {
                PrepareBuilder();
                result.hasHbtype = true;
                result.hbtype_ = value;
                return this;
            }
            public Builder ClearHbtype()
            {
                PrepareBuilder();
                result.hasHbtype = false;
                result.hbtype_ = 0;
                return this;
            }

            public bool HasSource
            {
                get { return result.hasSource; }
            }
            [global::System.CLSCompliant(false)]
            public uint Source
            {
                get { return result.Source; }
                set { SetSource(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetSource(uint value)
            {
                PrepareBuilder();
                result.hasSource = true;
                result.source_ = value;
                return this;
            }
            public Builder ClearSource()
            {
                PrepareBuilder();
                result.hasSource = false;
                result.source_ = 0;
                return this;
            }

            public bool HasHbcount
            {
                get { return result.hasHbcount; }
            }
            [global::System.CLSCompliant(false)]
            public uint Hbcount
            {
                get { return result.Hbcount; }
                set { SetHbcount(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetHbcount(uint value)
            {
                PrepareBuilder();
                result.hasHbcount = true;
                result.hbcount_ = value;
                return this;
            }
            public Builder ClearHbcount()
            {
                PrepareBuilder();
                result.hasHbcount = false;
                result.hbcount_ = 0;
                return this;
            }

            public bool HasSendid
            {
                get { return result.hasSendid; }
            }
            public string Sendid
            {
                get { return result.Sendid; }
                set { SetSendid(value); }
            }
            public Builder SetSendid(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasSendid = true;
                result.sendid_ = value;
                return this;
            }
            public Builder ClearSendid()
            {
                PrepareBuilder();
                result.hasSendid = false;
                result.sendid_ = "";
                return this;
            }

            public bool HasClientip
            {
                get { return result.hasClientip; }
            }
            public string Clientip
            {
                get { return result.Clientip; }
                set { SetClientip(value); }
            }
            public Builder SetClientip(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasClientip = true;
                result.clientip_ = value;
                return this;
            }
            public Builder ClearClientip()
            {
                PrepareBuilder();
                result.hasClientip = false;
                result.clientip_ = "";
                return this;
            }

            public bool HasDevicetypeid
            {
                get { return result.hasDevicetypeid; }
            }
            [global::System.CLSCompliant(false)]
            public uint Devicetypeid
            {
                get { return result.Devicetypeid; }
                set { SetDevicetypeid(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetDevicetypeid(uint value)
            {
                PrepareBuilder();
                result.hasDevicetypeid = true;
                result.devicetypeid_ = value;
                return this;
            }
            public Builder ClearDevicetypeid()
            {
                PrepareBuilder();
                result.hasDevicetypeid = false;
                result.devicetypeid_ = 0;
                return this;
            }

            public bool HasClientversion
            {
                get { return result.hasClientversion; }
            }
            [global::System.CLSCompliant(false)]
            public uint Clientversion
            {
                get { return result.Clientversion; }
                set { SetClientversion(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetClientversion(uint value)
            {
                PrepareBuilder();
                result.hasClientversion = true;
                result.clientversion_ = value;
                return this;
            }
            public Builder ClearClientversion()
            {
                PrepareBuilder();
                result.hasClientversion = false;
                result.clientversion_ = 0;
                return this;
            }

            public bool HasDeviceid
            {
                get { return result.hasDeviceid; }
            }
            public string Deviceid
            {
                get { return result.Deviceid; }
                set { SetDeviceid(value); }
            }
            public Builder SetDeviceid(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasDeviceid = true;
                result.deviceid_ = value;
                return this;
            }
            public Builder ClearDeviceid()
            {
                PrepareBuilder();
                result.hasDeviceid = false;
                result.deviceid_ = "";
                return this;
            }
        }
        static HongBaoWagerInfo()
        {
            object.ReferenceEquals(CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.MmpayHongBaoModel.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class HongBaoUserSendIndex : pb::GeneratedMessage<HongBaoUserSendIndex, HongBaoUserSendIndex.Builder>
    {
        private HongBaoUserSendIndex() { }
        private static readonly HongBaoUserSendIndex defaultInstance = new HongBaoUserSendIndex().MakeReadOnly();
        private static readonly string[] _hongBaoUserSendIndexFieldNames = new string[] { "create_time", "send_id", "uin" };
        private static readonly uint[] _hongBaoUserSendIndexFieldTags = new uint[] { 26, 18, 8 };
        public static HongBaoUserSendIndex DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override HongBaoUserSendIndex DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override HongBaoUserSendIndex ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.MmpayHongBaoModel.internal__static_MmpayHongBaoModel_HongBaoUserSendIndex__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<HongBaoUserSendIndex, HongBaoUserSendIndex.Builder> InternalFieldAccessors
        {
            get { return CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.MmpayHongBaoModel.internal__static_MmpayHongBaoModel_HongBaoUserSendIndex__FieldAccessorTable; }
        }

        public const int UinFieldNumber = 1;
        private bool hasUin;
        private ulong uin_;
        public bool HasUin
        {
            get { return hasUin; }
        }
        [global::System.CLSCompliant(false)]
        public ulong Uin
        {
            get { return uin_; }
        }

        public const int SendIdFieldNumber = 2;
        private bool hasSendId;
        private pb::ByteString sendId_ = pb::ByteString.Empty;
        public bool HasSendId
        {
            get { return hasSendId; }
        }
        public pb::ByteString SendId
        {
            get { return sendId_; }
        }

        public const int CreateTimeFieldNumber = 3;
        private bool hasCreateTime;
        private pb::ByteString createTime_ = pb::ByteString.Empty;
        public bool HasCreateTime
        {
            get { return hasCreateTime; }
        }
        public pb::ByteString CreateTime
        {
            get { return createTime_; }
        }

        public override bool IsInitialized
        {
            get
            {
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _hongBaoUserSendIndexFieldNames;
            if (hasUin)
            {
                output.WriteUInt64(1, field_names[2], Uin);
            }
            if (hasSendId)
            {
                output.WriteBytes(2, field_names[1], SendId);
            }
            if (hasCreateTime)
            {
                output.WriteBytes(3, field_names[0], CreateTime);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasUin)
                {
                    size += pb::CodedOutputStream.ComputeUInt64Size(1, Uin);
                }
                if (hasSendId)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(2, SendId);
                }
                if (hasCreateTime)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(3, CreateTime);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static HongBaoUserSendIndex ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static HongBaoUserSendIndex ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static HongBaoUserSendIndex ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static HongBaoUserSendIndex ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static HongBaoUserSendIndex ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static HongBaoUserSendIndex ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static HongBaoUserSendIndex ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static HongBaoUserSendIndex ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static HongBaoUserSendIndex ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static HongBaoUserSendIndex ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private HongBaoUserSendIndex MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(HongBaoUserSendIndex prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<HongBaoUserSendIndex, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(HongBaoUserSendIndex cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private HongBaoUserSendIndex result;

            private HongBaoUserSendIndex PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    HongBaoUserSendIndex original = result;
                    result = new HongBaoUserSendIndex();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override HongBaoUserSendIndex MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoUserSendIndex.Descriptor; }
            }

            public override HongBaoUserSendIndex DefaultInstanceForType
            {
                get { return CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoUserSendIndex.DefaultInstance; }
            }

            public override HongBaoUserSendIndex BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is HongBaoUserSendIndex)
                {
                    return MergeFrom((HongBaoUserSendIndex)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(HongBaoUserSendIndex other)
            {
                if (other == CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoUserSendIndex.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasUin)
                {
                    Uin = other.Uin;
                }
                if (other.HasSendId)
                {
                    SendId = other.SendId;
                }
                if (other.HasCreateTime)
                {
                    CreateTime = other.CreateTime;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_hongBaoUserSendIndexFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _hongBaoUserSendIndexFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 8:
                            {
                                result.hasUin = input.ReadUInt64(ref result.uin_);
                                break;
                            }
                        case 18:
                            {
                                result.hasSendId = input.ReadBytes(ref result.sendId_);
                                break;
                            }
                        case 26:
                            {
                                result.hasCreateTime = input.ReadBytes(ref result.createTime_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasUin
            {
                get { return result.hasUin; }
            }
            [global::System.CLSCompliant(false)]
            public ulong Uin
            {
                get { return result.Uin; }
                set { SetUin(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetUin(ulong value)
            {
                PrepareBuilder();
                result.hasUin = true;
                result.uin_ = value;
                return this;
            }
            public Builder ClearUin()
            {
                PrepareBuilder();
                result.hasUin = false;
                result.uin_ = 0UL;
                return this;
            }

            public bool HasSendId
            {
                get { return result.hasSendId; }
            }
            public pb::ByteString SendId
            {
                get { return result.SendId; }
                set { SetSendId(value); }
            }
            public Builder SetSendId(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasSendId = true;
                result.sendId_ = value;
                return this;
            }
            public Builder ClearSendId()
            {
                PrepareBuilder();
                result.hasSendId = false;
                result.sendId_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasCreateTime
            {
                get { return result.hasCreateTime; }
            }
            public pb::ByteString CreateTime
            {
                get { return result.CreateTime; }
                set { SetCreateTime(value); }
            }
            public Builder SetCreateTime(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasCreateTime = true;
                result.createTime_ = value;
                return this;
            }
            public Builder ClearCreateTime()
            {
                PrepareBuilder();
                result.hasCreateTime = false;
                result.createTime_ = pb::ByteString.Empty;
                return this;
            }
        }
        static HongBaoUserSendIndex()
        {
            object.ReferenceEquals(CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.MmpayHongBaoModel.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class HongBaoUserReceiveIndex : pb::GeneratedMessage<HongBaoUserReceiveIndex, HongBaoUserReceiveIndex.Builder>
    {
        private HongBaoUserReceiveIndex() { }
        private static readonly HongBaoUserReceiveIndex defaultInstance = new HongBaoUserReceiveIndex().MakeReadOnly();
        private static readonly string[] _hongBaoUserReceiveIndexFieldNames = new string[] { "create_time", "db_idx", "receive_id", "uin" };
        private static readonly uint[] _hongBaoUserReceiveIndexFieldTags = new uint[] { 34, 24, 18, 8 };
        public static HongBaoUserReceiveIndex DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override HongBaoUserReceiveIndex DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override HongBaoUserReceiveIndex ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.MmpayHongBaoModel.internal__static_MmpayHongBaoModel_HongBaoUserReceiveIndex__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<HongBaoUserReceiveIndex, HongBaoUserReceiveIndex.Builder> InternalFieldAccessors
        {
            get { return CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.MmpayHongBaoModel.internal__static_MmpayHongBaoModel_HongBaoUserReceiveIndex__FieldAccessorTable; }
        }

        public const int UinFieldNumber = 1;
        private bool hasUin;
        private ulong uin_;
        public bool HasUin
        {
            get { return hasUin; }
        }
        [global::System.CLSCompliant(false)]
        public ulong Uin
        {
            get { return uin_; }
        }

        public const int ReceiveIdFieldNumber = 2;
        private bool hasReceiveId;
        private pb::ByteString receiveId_ = pb::ByteString.Empty;
        public bool HasReceiveId
        {
            get { return hasReceiveId; }
        }
        public pb::ByteString ReceiveId
        {
            get { return receiveId_; }
        }

        public const int DbIdxFieldNumber = 3;
        private bool hasDbIdx;
        private uint dbIdx_;
        public bool HasDbIdx
        {
            get { return hasDbIdx; }
        }
        [global::System.CLSCompliant(false)]
        public uint DbIdx
        {
            get { return dbIdx_; }
        }

        public const int CreateTimeFieldNumber = 4;
        private bool hasCreateTime;
        private pb::ByteString createTime_ = pb::ByteString.Empty;
        public bool HasCreateTime
        {
            get { return hasCreateTime; }
        }
        public pb::ByteString CreateTime
        {
            get { return createTime_; }
        }

        public override bool IsInitialized
        {
            get
            {
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _hongBaoUserReceiveIndexFieldNames;
            if (hasUin)
            {
                output.WriteUInt64(1, field_names[3], Uin);
            }
            if (hasReceiveId)
            {
                output.WriteBytes(2, field_names[2], ReceiveId);
            }
            if (hasDbIdx)
            {
                output.WriteUInt32(3, field_names[1], DbIdx);
            }
            if (hasCreateTime)
            {
                output.WriteBytes(4, field_names[0], CreateTime);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasUin)
                {
                    size += pb::CodedOutputStream.ComputeUInt64Size(1, Uin);
                }
                if (hasReceiveId)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(2, ReceiveId);
                }
                if (hasDbIdx)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(3, DbIdx);
                }
                if (hasCreateTime)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(4, CreateTime);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static HongBaoUserReceiveIndex ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static HongBaoUserReceiveIndex ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static HongBaoUserReceiveIndex ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static HongBaoUserReceiveIndex ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static HongBaoUserReceiveIndex ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static HongBaoUserReceiveIndex ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static HongBaoUserReceiveIndex ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static HongBaoUserReceiveIndex ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static HongBaoUserReceiveIndex ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static HongBaoUserReceiveIndex ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private HongBaoUserReceiveIndex MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(HongBaoUserReceiveIndex prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<HongBaoUserReceiveIndex, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(HongBaoUserReceiveIndex cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private HongBaoUserReceiveIndex result;

            private HongBaoUserReceiveIndex PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    HongBaoUserReceiveIndex original = result;
                    result = new HongBaoUserReceiveIndex();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override HongBaoUserReceiveIndex MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoUserReceiveIndex.Descriptor; }
            }

            public override HongBaoUserReceiveIndex DefaultInstanceForType
            {
                get { return CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoUserReceiveIndex.DefaultInstance; }
            }

            public override HongBaoUserReceiveIndex BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is HongBaoUserReceiveIndex)
                {
                    return MergeFrom((HongBaoUserReceiveIndex)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(HongBaoUserReceiveIndex other)
            {
                if (other == CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.HongBaoUserReceiveIndex.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasUin)
                {
                    Uin = other.Uin;
                }
                if (other.HasReceiveId)
                {
                    ReceiveId = other.ReceiveId;
                }
                if (other.HasDbIdx)
                {
                    DbIdx = other.DbIdx;
                }
                if (other.HasCreateTime)
                {
                    CreateTime = other.CreateTime;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_hongBaoUserReceiveIndexFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _hongBaoUserReceiveIndexFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 8:
                            {
                                result.hasUin = input.ReadUInt64(ref result.uin_);
                                break;
                            }
                        case 18:
                            {
                                result.hasReceiveId = input.ReadBytes(ref result.receiveId_);
                                break;
                            }
                        case 24:
                            {
                                result.hasDbIdx = input.ReadUInt32(ref result.dbIdx_);
                                break;
                            }
                        case 34:
                            {
                                result.hasCreateTime = input.ReadBytes(ref result.createTime_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasUin
            {
                get { return result.hasUin; }
            }
            [global::System.CLSCompliant(false)]
            public ulong Uin
            {
                get { return result.Uin; }
                set { SetUin(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetUin(ulong value)
            {
                PrepareBuilder();
                result.hasUin = true;
                result.uin_ = value;
                return this;
            }
            public Builder ClearUin()
            {
                PrepareBuilder();
                result.hasUin = false;
                result.uin_ = 0UL;
                return this;
            }

            public bool HasReceiveId
            {
                get { return result.hasReceiveId; }
            }
            public pb::ByteString ReceiveId
            {
                get { return result.ReceiveId; }
                set { SetReceiveId(value); }
            }
            public Builder SetReceiveId(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasReceiveId = true;
                result.receiveId_ = value;
                return this;
            }
            public Builder ClearReceiveId()
            {
                PrepareBuilder();
                result.hasReceiveId = false;
                result.receiveId_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasDbIdx
            {
                get { return result.hasDbIdx; }
            }
            [global::System.CLSCompliant(false)]
            public uint DbIdx
            {
                get { return result.DbIdx; }
                set { SetDbIdx(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetDbIdx(uint value)
            {
                PrepareBuilder();
                result.hasDbIdx = true;
                result.dbIdx_ = value;
                return this;
            }
            public Builder ClearDbIdx()
            {
                PrepareBuilder();
                result.hasDbIdx = false;
                result.dbIdx_ = 0;
                return this;
            }

            public bool HasCreateTime
            {
                get { return result.hasCreateTime; }
            }
            public pb::ByteString CreateTime
            {
                get { return result.CreateTime; }
                set { SetCreateTime(value); }
            }
            public Builder SetCreateTime(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasCreateTime = true;
                result.createTime_ = value;
                return this;
            }
            public Builder ClearCreateTime()
            {
                PrepareBuilder();
                result.hasCreateTime = false;
                result.createTime_ = pb::ByteString.Empty;
                return this;
            }
        }
        static HongBaoUserReceiveIndex()
        {
            object.ReferenceEquals(CFT.CSOMS.DAL.WechatPay.Entity.MmpayHongBaoModel.MmpayHongBaoModel.Descriptor, null);
        }
    }

    #endregion

}

#endregion Designer generated code
