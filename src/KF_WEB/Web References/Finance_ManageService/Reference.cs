//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18063
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18063.
// 
#pragma warning disable 1591

namespace TENCENT.OSS.CFT.KF.KF_Web.Finance_ManageService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="Finance_ManageSoap", Namespace="http://tempuri.org/")]
    public partial class Finance_Manage : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CheckOldNameOperationCompleted;
        
        private Finance_Header finance_HeaderValueField;
        
        private System.Threading.SendOrPostCallback modifyNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUserTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback changePwdInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback insertMediationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAccInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback checkUserRegOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckRecoverUidOperationCompleted;
        
        private System.Threading.SendOrPostCallback freezeTradeOperationCompleted;
        
        private System.Threading.SendOrPostCallback returnStaticStrOperationCompleted;
        
        private System.Threading.SendOrPostCallback freezeAccountOperationCompleted;
        
        private System.Threading.SendOrPostCallback freezePerAccountOperationCompleted;
        
        private System.Threading.SendOrPostCallback FreezePerAccountWechatOperationCompleted;
        
        private System.Threading.SendOrPostCallback FreezePerAccountWechat_NewOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnFreezePerAccountWechat_NewOperationCompleted;
        
        private System.Threading.SendOrPostCallback dsReBatCheckOperationCompleted;
        
        private System.Threading.SendOrPostCallback logOnUserHistoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback logOnUserOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Finance_Manage() {
            this.Url = global::TENCENT.OSS.CFT.KF.KF_Web.Properties.Settings.Default.finance_web_Finance_ManageService_Finance_Manage;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public Finance_Header Finance_HeaderValue {
            get {
                return this.finance_HeaderValueField;
            }
            set {
                this.finance_HeaderValueField = value;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CheckOldNameCompletedEventHandler CheckOldNameCompleted;
        
        /// <remarks/>
        public event modifyNameCompletedEventHandler modifyNameCompleted;
        
        /// <remarks/>
        public event getUserTypeCompletedEventHandler getUserTypeCompleted;
        
        /// <remarks/>
        public event changePwdInfoCompletedEventHandler changePwdInfoCompleted;
        
        /// <remarks/>
        public event insertMediationCompletedEventHandler insertMediationCompleted;
        
        /// <remarks/>
        public event getAccInfoCompletedEventHandler getAccInfoCompleted;
        
        /// <remarks/>
        public event checkUserRegCompletedEventHandler checkUserRegCompleted;
        
        /// <remarks/>
        public event CheckRecoverUidCompletedEventHandler CheckRecoverUidCompleted;
        
        /// <remarks/>
        public event freezeTradeCompletedEventHandler freezeTradeCompleted;
        
        /// <remarks/>
        public event returnStaticStrCompletedEventHandler returnStaticStrCompleted;
        
        /// <remarks/>
        public event freezeAccountCompletedEventHandler freezeAccountCompleted;
        
        /// <remarks/>
        public event freezePerAccountCompletedEventHandler freezePerAccountCompleted;
        
        /// <remarks/>
        public event FreezePerAccountWechatCompletedEventHandler FreezePerAccountWechatCompleted;
        
        /// <remarks/>
        public event FreezePerAccountWechat_NewCompletedEventHandler FreezePerAccountWechat_NewCompleted;
        
        /// <remarks/>
        public event UnFreezePerAccountWechat_NewCompletedEventHandler UnFreezePerAccountWechat_NewCompleted;
        
        /// <remarks/>
        public event dsReBatCheckCompletedEventHandler dsReBatCheckCompleted;
        
        /// <remarks/>
        public event logOnUserHistoryCompletedEventHandler logOnUserHistoryCompleted;
        
        /// <remarks/>
        public event logOnUserCompletedEventHandler logOnUserCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckOldName", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckOldName(string qqid, string name, out string Msg) {
            object[] results = this.Invoke("CheckOldName", new object[] {
                        qqid,
                        name});
            Msg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCheckOldName(string qqid, string name, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CheckOldName", new object[] {
                        qqid,
                        name}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndCheckOldName(System.IAsyncResult asyncResult, out string Msg) {
            object[] results = this.EndInvoke(asyncResult);
            Msg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckOldNameAsync(string qqid, string name) {
            this.CheckOldNameAsync(qqid, name, null);
        }
        
        /// <remarks/>
        public void CheckOldNameAsync(string qqid, string name, object userState) {
            if ((this.CheckOldNameOperationCompleted == null)) {
                this.CheckOldNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckOldNameOperationCompleted);
            }
            this.InvokeAsync("CheckOldName", new object[] {
                        qqid,
                        name}, this.CheckOldNameOperationCompleted, userState);
        }
        
        private void OnCheckOldNameOperationCompleted(object arg) {
            if ((this.CheckOldNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckOldNameCompleted(this, new CheckOldNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("Finance_HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/modifyName", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool modifyName(string QQID, string changedName, string cCompany) {
            object[] results = this.Invoke("modifyName", new object[] {
                        QQID,
                        changedName,
                        cCompany});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginmodifyName(string QQID, string changedName, string cCompany, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("modifyName", new object[] {
                        QQID,
                        changedName,
                        cCompany}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndmodifyName(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void modifyNameAsync(string QQID, string changedName, string cCompany) {
            this.modifyNameAsync(QQID, changedName, cCompany, null);
        }
        
        /// <remarks/>
        public void modifyNameAsync(string QQID, string changedName, string cCompany, object userState) {
            if ((this.modifyNameOperationCompleted == null)) {
                this.modifyNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmodifyNameOperationCompleted);
            }
            this.InvokeAsync("modifyName", new object[] {
                        QQID,
                        changedName,
                        cCompany}, this.modifyNameOperationCompleted, userState);
        }
        
        private void OnmodifyNameOperationCompleted(object arg) {
            if ((this.modifyNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.modifyNameCompleted(this, new modifyNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getUserType", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool getUserType(string qqid, out string userType, out string Msg) {
            object[] results = this.Invoke("getUserType", new object[] {
                        qqid});
            userType = ((string)(results[1]));
            Msg = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegingetUserType(string qqid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getUserType", new object[] {
                        qqid}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndgetUserType(System.IAsyncResult asyncResult, out string userType, out string Msg) {
            object[] results = this.EndInvoke(asyncResult);
            userType = ((string)(results[1]));
            Msg = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void getUserTypeAsync(string qqid) {
            this.getUserTypeAsync(qqid, null);
        }
        
        /// <remarks/>
        public void getUserTypeAsync(string qqid, object userState) {
            if ((this.getUserTypeOperationCompleted == null)) {
                this.getUserTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUserTypeOperationCompleted);
            }
            this.InvokeAsync("getUserType", new object[] {
                        qqid}, this.getUserTypeOperationCompleted, userState);
        }
        
        private void OngetUserTypeOperationCompleted(object arg) {
            if ((this.getUserTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUserTypeCompleted(this, new getUserTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("Finance_HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/changePwdInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool changePwdInfo(string qqid, string mail, string cleanMimao, string reason, string pathUinfo, string AccInfo, string IDCardInfo, string BankCardInfo, out string Msg) {
            object[] results = this.Invoke("changePwdInfo", new object[] {
                        qqid,
                        mail,
                        cleanMimao,
                        reason,
                        pathUinfo,
                        AccInfo,
                        IDCardInfo,
                        BankCardInfo});
            Msg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginchangePwdInfo(string qqid, string mail, string cleanMimao, string reason, string pathUinfo, string AccInfo, string IDCardInfo, string BankCardInfo, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("changePwdInfo", new object[] {
                        qqid,
                        mail,
                        cleanMimao,
                        reason,
                        pathUinfo,
                        AccInfo,
                        IDCardInfo,
                        BankCardInfo}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndchangePwdInfo(System.IAsyncResult asyncResult, out string Msg) {
            object[] results = this.EndInvoke(asyncResult);
            Msg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void changePwdInfoAsync(string qqid, string mail, string cleanMimao, string reason, string pathUinfo, string AccInfo, string IDCardInfo, string BankCardInfo) {
            this.changePwdInfoAsync(qqid, mail, cleanMimao, reason, pathUinfo, AccInfo, IDCardInfo, BankCardInfo, null);
        }
        
        /// <remarks/>
        public void changePwdInfoAsync(string qqid, string mail, string cleanMimao, string reason, string pathUinfo, string AccInfo, string IDCardInfo, string BankCardInfo, object userState) {
            if ((this.changePwdInfoOperationCompleted == null)) {
                this.changePwdInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnchangePwdInfoOperationCompleted);
            }
            this.InvokeAsync("changePwdInfo", new object[] {
                        qqid,
                        mail,
                        cleanMimao,
                        reason,
                        pathUinfo,
                        AccInfo,
                        IDCardInfo,
                        BankCardInfo}, this.changePwdInfoOperationCompleted, userState);
        }
        
        private void OnchangePwdInfoOperationCompleted(object arg) {
            if ((this.changePwdInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.changePwdInfoCompleted(this, new changePwdInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/insertMediation", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool insertMediation(string qqid, string mail, string cleanMimao, string reason, string uid, string fetchNO, string commTime, string pathAcc, string pathBase, string pathIDCard, string pathBank, string commitTime, string fnameNew, string FIDCardNew, out string Msg) {
            object[] results = this.Invoke("insertMediation", new object[] {
                        qqid,
                        mail,
                        cleanMimao,
                        reason,
                        uid,
                        fetchNO,
                        commTime,
                        pathAcc,
                        pathBase,
                        pathIDCard,
                        pathBank,
                        commitTime,
                        fnameNew,
                        FIDCardNew});
            Msg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegininsertMediation(
                    string qqid, 
                    string mail, 
                    string cleanMimao, 
                    string reason, 
                    string uid, 
                    string fetchNO, 
                    string commTime, 
                    string pathAcc, 
                    string pathBase, 
                    string pathIDCard, 
                    string pathBank, 
                    string commitTime, 
                    string fnameNew, 
                    string FIDCardNew, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return this.BeginInvoke("insertMediation", new object[] {
                        qqid,
                        mail,
                        cleanMimao,
                        reason,
                        uid,
                        fetchNO,
                        commTime,
                        pathAcc,
                        pathBase,
                        pathIDCard,
                        pathBank,
                        commitTime,
                        fnameNew,
                        FIDCardNew}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndinsertMediation(System.IAsyncResult asyncResult, out string Msg) {
            object[] results = this.EndInvoke(asyncResult);
            Msg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void insertMediationAsync(string qqid, string mail, string cleanMimao, string reason, string uid, string fetchNO, string commTime, string pathAcc, string pathBase, string pathIDCard, string pathBank, string commitTime, string fnameNew, string FIDCardNew) {
            this.insertMediationAsync(qqid, mail, cleanMimao, reason, uid, fetchNO, commTime, pathAcc, pathBase, pathIDCard, pathBank, commitTime, fnameNew, FIDCardNew, null);
        }
        
        /// <remarks/>
        public void insertMediationAsync(string qqid, string mail, string cleanMimao, string reason, string uid, string fetchNO, string commTime, string pathAcc, string pathBase, string pathIDCard, string pathBank, string commitTime, string fnameNew, string FIDCardNew, object userState) {
            if ((this.insertMediationOperationCompleted == null)) {
                this.insertMediationOperationCompleted = new System.Threading.SendOrPostCallback(this.OninsertMediationOperationCompleted);
            }
            this.InvokeAsync("insertMediation", new object[] {
                        qqid,
                        mail,
                        cleanMimao,
                        reason,
                        uid,
                        fetchNO,
                        commTime,
                        pathAcc,
                        pathBase,
                        pathIDCard,
                        pathBank,
                        commitTime,
                        fnameNew,
                        FIDCardNew}, this.insertMediationOperationCompleted, userState);
        }
        
        private void OninsertMediationOperationCompleted(object arg) {
            if ((this.insertMediationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.insertMediationCompleted(this, new insertMediationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAccInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool getAccInfo(string qqid, out string name, out string bankNo, out string Msg) {
            object[] results = this.Invoke("getAccInfo", new object[] {
                        qqid});
            name = ((string)(results[1]));
            bankNo = ((string)(results[2]));
            Msg = ((string)(results[3]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegingetAccInfo(string qqid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getAccInfo", new object[] {
                        qqid}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndgetAccInfo(System.IAsyncResult asyncResult, out string name, out string bankNo, out string Msg) {
            object[] results = this.EndInvoke(asyncResult);
            name = ((string)(results[1]));
            bankNo = ((string)(results[2]));
            Msg = ((string)(results[3]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void getAccInfoAsync(string qqid) {
            this.getAccInfoAsync(qqid, null);
        }
        
        /// <remarks/>
        public void getAccInfoAsync(string qqid, object userState) {
            if ((this.getAccInfoOperationCompleted == null)) {
                this.getAccInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAccInfoOperationCompleted);
            }
            this.InvokeAsync("getAccInfo", new object[] {
                        qqid}, this.getAccInfoOperationCompleted, userState);
        }
        
        private void OngetAccInfoOperationCompleted(object arg) {
            if ((this.getAccInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAccInfoCompleted(this, new getAccInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/checkUserReg", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool checkUserReg(string qqid, out string Msg) {
            object[] results = this.Invoke("checkUserReg", new object[] {
                        qqid});
            Msg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegincheckUserReg(string qqid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("checkUserReg", new object[] {
                        qqid}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndcheckUserReg(System.IAsyncResult asyncResult, out string Msg) {
            object[] results = this.EndInvoke(asyncResult);
            Msg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void checkUserRegAsync(string qqid) {
            this.checkUserRegAsync(qqid, null);
        }
        
        /// <remarks/>
        public void checkUserRegAsync(string qqid, object userState) {
            if ((this.checkUserRegOperationCompleted == null)) {
                this.checkUserRegOperationCompleted = new System.Threading.SendOrPostCallback(this.OncheckUserRegOperationCompleted);
            }
            this.InvokeAsync("checkUserReg", new object[] {
                        qqid}, this.checkUserRegOperationCompleted, userState);
        }
        
        private void OncheckUserRegOperationCompleted(object arg) {
            if ((this.checkUserRegCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.checkUserRegCompleted(this, new checkUserRegCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckRecoverUid", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckRecoverUid(string uid, string recoverQQid, out string Msg, out string type) {
            object[] results = this.Invoke("CheckRecoverUid", new object[] {
                        uid,
                        recoverQQid});
            Msg = ((string)(results[1]));
            type = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCheckRecoverUid(string uid, string recoverQQid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CheckRecoverUid", new object[] {
                        uid,
                        recoverQQid}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndCheckRecoverUid(System.IAsyncResult asyncResult, out string Msg, out string type) {
            object[] results = this.EndInvoke(asyncResult);
            Msg = ((string)(results[1]));
            type = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckRecoverUidAsync(string uid, string recoverQQid) {
            this.CheckRecoverUidAsync(uid, recoverQQid, null);
        }
        
        /// <remarks/>
        public void CheckRecoverUidAsync(string uid, string recoverQQid, object userState) {
            if ((this.CheckRecoverUidOperationCompleted == null)) {
                this.CheckRecoverUidOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckRecoverUidOperationCompleted);
            }
            this.InvokeAsync("CheckRecoverUid", new object[] {
                        uid,
                        recoverQQid}, this.CheckRecoverUidOperationCompleted, userState);
        }
        
        private void OnCheckRecoverUidOperationCompleted(object arg) {
            if ((this.CheckRecoverUidCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckRecoverUidCompleted(this, new CheckRecoverUidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("Finance_HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/freezeTrade", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool freezeTrade(string listID, string flstate) {
            object[] results = this.Invoke("freezeTrade", new object[] {
                        listID,
                        flstate});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginfreezeTrade(string listID, string flstate, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("freezeTrade", new object[] {
                        listID,
                        flstate}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndfreezeTrade(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void freezeTradeAsync(string listID, string flstate) {
            this.freezeTradeAsync(listID, flstate, null);
        }
        
        /// <remarks/>
        public void freezeTradeAsync(string listID, string flstate, object userState) {
            if ((this.freezeTradeOperationCompleted == null)) {
                this.freezeTradeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfreezeTradeOperationCompleted);
            }
            this.InvokeAsync("freezeTrade", new object[] {
                        listID,
                        flstate}, this.freezeTradeOperationCompleted, userState);
        }
        
        private void OnfreezeTradeOperationCompleted(object arg) {
            if ((this.freezeTradeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.freezeTradeCompleted(this, new freezeTradeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("Finance_HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/returnStaticStr", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] returnStaticStr() {
            object[] results = this.Invoke("returnStaticStr", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginreturnStaticStr(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("returnStaticStr", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndreturnStaticStr(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void returnStaticStrAsync() {
            this.returnStaticStrAsync(null);
        }
        
        /// <remarks/>
        public void returnStaticStrAsync(object userState) {
            if ((this.returnStaticStrOperationCompleted == null)) {
                this.returnStaticStrOperationCompleted = new System.Threading.SendOrPostCallback(this.OnreturnStaticStrOperationCompleted);
            }
            this.InvokeAsync("returnStaticStr", new object[0], this.returnStaticStrOperationCompleted, userState);
        }
        
        private void OnreturnStaticStrOperationCompleted(object arg) {
            if ((this.returnStaticStrCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.returnStaticStrCompleted(this, new returnStaticStrCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("Finance_HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/freezeAccount", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool freezeAccount(string uid, int type) {
            object[] results = this.Invoke("freezeAccount", new object[] {
                        uid,
                        type});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginfreezeAccount(string uid, int type, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("freezeAccount", new object[] {
                        uid,
                        type}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndfreezeAccount(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void freezeAccountAsync(string uid, int type) {
            this.freezeAccountAsync(uid, type, null);
        }
        
        /// <remarks/>
        public void freezeAccountAsync(string uid, int type, object userState) {
            if ((this.freezeAccountOperationCompleted == null)) {
                this.freezeAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfreezeAccountOperationCompleted);
            }
            this.InvokeAsync("freezeAccount", new object[] {
                        uid,
                        type}, this.freezeAccountOperationCompleted, userState);
        }
        
        private void OnfreezeAccountOperationCompleted(object arg) {
            if ((this.freezeAccountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.freezeAccountCompleted(this, new freezeAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("Finance_HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/freezePerAccount", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool freezePerAccount(string uid, int type, string username) {
            object[] results = this.Invoke("freezePerAccount", new object[] {
                        uid,
                        type,
                        username});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginfreezePerAccount(string uid, int type, string username, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("freezePerAccount", new object[] {
                        uid,
                        type,
                        username}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndfreezePerAccount(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void freezePerAccountAsync(string uid, int type, string username) {
            this.freezePerAccountAsync(uid, type, username, null);
        }
        
        /// <remarks/>
        public void freezePerAccountAsync(string uid, int type, string username, object userState) {
            if ((this.freezePerAccountOperationCompleted == null)) {
                this.freezePerAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfreezePerAccountOperationCompleted);
            }
            this.InvokeAsync("freezePerAccount", new object[] {
                        uid,
                        type,
                        username}, this.freezePerAccountOperationCompleted, userState);
        }
        
        private void OnfreezePerAccountOperationCompleted(object arg) {
            if ((this.freezePerAccountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.freezePerAccountCompleted(this, new freezePerAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("Finance_HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FreezePerAccountWechat", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool FreezePerAccountWechat(string uid, int type) {
            object[] results = this.Invoke("FreezePerAccountWechat", new object[] {
                        uid,
                        type});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginFreezePerAccountWechat(string uid, int type, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("FreezePerAccountWechat", new object[] {
                        uid,
                        type}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndFreezePerAccountWechat(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void FreezePerAccountWechatAsync(string uid, int type) {
            this.FreezePerAccountWechatAsync(uid, type, null);
        }
        
        /// <remarks/>
        public void FreezePerAccountWechatAsync(string uid, int type, object userState) {
            if ((this.FreezePerAccountWechatOperationCompleted == null)) {
                this.FreezePerAccountWechatOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFreezePerAccountWechatOperationCompleted);
            }
            this.InvokeAsync("FreezePerAccountWechat", new object[] {
                        uid,
                        type}, this.FreezePerAccountWechatOperationCompleted, userState);
        }
        
        private void OnFreezePerAccountWechatOperationCompleted(object arg) {
            if ((this.FreezePerAccountWechatCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FreezePerAccountWechatCompleted(this, new FreezePerAccountWechatCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("Finance_HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FreezePerAccountWechat_New", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool FreezePerAccountWechat_New(string uin, string username, string channel) {
            object[] results = this.Invoke("FreezePerAccountWechat_New", new object[] {
                        uin,
                        username,
                        channel});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginFreezePerAccountWechat_New(string uin, string username, string channel, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("FreezePerAccountWechat_New", new object[] {
                        uin,
                        username,
                        channel}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndFreezePerAccountWechat_New(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void FreezePerAccountWechat_NewAsync(string uin, string username, string channel) {
            this.FreezePerAccountWechat_NewAsync(uin, username, channel, null);
        }
        
        /// <remarks/>
        public void FreezePerAccountWechat_NewAsync(string uin, string username, string channel, object userState) {
            if ((this.FreezePerAccountWechat_NewOperationCompleted == null)) {
                this.FreezePerAccountWechat_NewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFreezePerAccountWechat_NewOperationCompleted);
            }
            this.InvokeAsync("FreezePerAccountWechat_New", new object[] {
                        uin,
                        username,
                        channel}, this.FreezePerAccountWechat_NewOperationCompleted, userState);
        }
        
        private void OnFreezePerAccountWechat_NewOperationCompleted(object arg) {
            if ((this.FreezePerAccountWechat_NewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FreezePerAccountWechat_NewCompleted(this, new FreezePerAccountWechat_NewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("Finance_HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UnFreezePerAccountWechat_New", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UnFreezePerAccountWechat_New(string uin, string username) {
            object[] results = this.Invoke("UnFreezePerAccountWechat_New", new object[] {
                        uin,
                        username});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUnFreezePerAccountWechat_New(string uin, string username, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UnFreezePerAccountWechat_New", new object[] {
                        uin,
                        username}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndUnFreezePerAccountWechat_New(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UnFreezePerAccountWechat_NewAsync(string uin, string username) {
            this.UnFreezePerAccountWechat_NewAsync(uin, username, null);
        }
        
        /// <remarks/>
        public void UnFreezePerAccountWechat_NewAsync(string uin, string username, object userState) {
            if ((this.UnFreezePerAccountWechat_NewOperationCompleted == null)) {
                this.UnFreezePerAccountWechat_NewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnFreezePerAccountWechat_NewOperationCompleted);
            }
            this.InvokeAsync("UnFreezePerAccountWechat_New", new object[] {
                        uin,
                        username}, this.UnFreezePerAccountWechat_NewOperationCompleted, userState);
        }
        
        private void OnUnFreezePerAccountWechat_NewOperationCompleted(object arg) {
            if ((this.UnFreezePerAccountWechat_NewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnFreezePerAccountWechat_NewCompleted(this, new UnFreezePerAccountWechat_NewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/dsReBatCheck", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet dsReBatCheck(string[] ar, string time) {
            object[] results = this.Invoke("dsReBatCheck", new object[] {
                        ar,
                        time});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegindsReBatCheck(string[] ar, string time, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("dsReBatCheck", new object[] {
                        ar,
                        time}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EnddsReBatCheck(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void dsReBatCheckAsync(string[] ar, string time) {
            this.dsReBatCheckAsync(ar, time, null);
        }
        
        /// <remarks/>
        public void dsReBatCheckAsync(string[] ar, string time, object userState) {
            if ((this.dsReBatCheckOperationCompleted == null)) {
                this.dsReBatCheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OndsReBatCheckOperationCompleted);
            }
            this.InvokeAsync("dsReBatCheck", new object[] {
                        ar,
                        time}, this.dsReBatCheckOperationCompleted, userState);
        }
        
        private void OndsReBatCheckOperationCompleted(object arg) {
            if ((this.dsReBatCheckCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.dsReBatCheckCompleted(this, new dsReBatCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("Finance_HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/logOnUserHistory", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet logOnUserHistory(System.DateTime startDate, System.DateTime endDate, string qqid, string handid, int startIndex, int lenth, out string Msg) {
            object[] results = this.Invoke("logOnUserHistory", new object[] {
                        startDate,
                        endDate,
                        qqid,
                        handid,
                        startIndex,
                        lenth});
            Msg = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginlogOnUserHistory(System.DateTime startDate, System.DateTime endDate, string qqid, string handid, int startIndex, int lenth, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("logOnUserHistory", new object[] {
                        startDate,
                        endDate,
                        qqid,
                        handid,
                        startIndex,
                        lenth}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndlogOnUserHistory(System.IAsyncResult asyncResult, out string Msg) {
            object[] results = this.EndInvoke(asyncResult);
            Msg = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void logOnUserHistoryAsync(System.DateTime startDate, System.DateTime endDate, string qqid, string handid, int startIndex, int lenth) {
            this.logOnUserHistoryAsync(startDate, endDate, qqid, handid, startIndex, lenth, null);
        }
        
        /// <remarks/>
        public void logOnUserHistoryAsync(System.DateTime startDate, System.DateTime endDate, string qqid, string handid, int startIndex, int lenth, object userState) {
            if ((this.logOnUserHistoryOperationCompleted == null)) {
                this.logOnUserHistoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnlogOnUserHistoryOperationCompleted);
            }
            this.InvokeAsync("logOnUserHistory", new object[] {
                        startDate,
                        endDate,
                        qqid,
                        handid,
                        startIndex,
                        lenth}, this.logOnUserHistoryOperationCompleted, userState);
        }
        
        private void OnlogOnUserHistoryOperationCompleted(object arg) {
            if ((this.logOnUserHistoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.logOnUserHistoryCompleted(this, new logOnUserHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("Finance_HeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/logOnUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool logOnUser(string qqid, string reason, string user, string userIP, out string Msg) {
            object[] results = this.Invoke("logOnUser", new object[] {
                        qqid,
                        reason,
                        user,
                        userIP});
            Msg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginlogOnUser(string qqid, string reason, string user, string userIP, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("logOnUser", new object[] {
                        qqid,
                        reason,
                        user,
                        userIP}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndlogOnUser(System.IAsyncResult asyncResult, out string Msg) {
            object[] results = this.EndInvoke(asyncResult);
            Msg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void logOnUserAsync(string qqid, string reason, string user, string userIP) {
            this.logOnUserAsync(qqid, reason, user, userIP, null);
        }
        
        /// <remarks/>
        public void logOnUserAsync(string qqid, string reason, string user, string userIP, object userState) {
            if ((this.logOnUserOperationCompleted == null)) {
                this.logOnUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnlogOnUserOperationCompleted);
            }
            this.InvokeAsync("logOnUser", new object[] {
                        qqid,
                        reason,
                        user,
                        userIP}, this.logOnUserOperationCompleted, userState);
        }
        
        private void OnlogOnUserOperationCompleted(object arg) {
            if ((this.logOnUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.logOnUserCompleted(this, new logOnUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://tempuri.org/", IsNullable=false)]
    public partial class Finance_Header : System.Web.Services.Protocols.SoapHeader {
        
        private string userNameField;
        
        private string userIPField;
        
        private string szKeyField;
        
        private int operIDField;
        
        private string rightStringField;
        
        private string userPasswordField;
        
        private string sessionIDField;
        
        private string srcUrlField;
        
        private System.Xml.XmlAttribute[] anyAttrField;
        
        /// <remarks/>
        public string UserName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
        
        /// <remarks/>
        public string UserIP {
            get {
                return this.userIPField;
            }
            set {
                this.userIPField = value;
            }
        }
        
        /// <remarks/>
        public string SzKey {
            get {
                return this.szKeyField;
            }
            set {
                this.szKeyField = value;
            }
        }
        
        /// <remarks/>
        public int OperID {
            get {
                return this.operIDField;
            }
            set {
                this.operIDField = value;
            }
        }
        
        /// <remarks/>
        public string RightString {
            get {
                return this.rightStringField;
            }
            set {
                this.rightStringField = value;
            }
        }
        
        /// <remarks/>
        public string UserPassword {
            get {
                return this.userPasswordField;
            }
            set {
                this.userPasswordField = value;
            }
        }
        
        /// <remarks/>
        public string SessionID {
            get {
                return this.sessionIDField;
            }
            set {
                this.sessionIDField = value;
            }
        }
        
        /// <remarks/>
        public string SrcUrl {
            get {
                return this.srcUrlField;
            }
            set {
                this.srcUrlField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void CheckOldNameCompletedEventHandler(object sender, CheckOldNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckOldNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckOldNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string Msg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void modifyNameCompletedEventHandler(object sender, modifyNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class modifyNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal modifyNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getUserTypeCompletedEventHandler(object sender, getUserTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUserTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUserTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string userType {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string Msg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void changePwdInfoCompletedEventHandler(object sender, changePwdInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class changePwdInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal changePwdInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string Msg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void insertMediationCompletedEventHandler(object sender, insertMediationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class insertMediationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal insertMediationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string Msg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getAccInfoCompletedEventHandler(object sender, getAccInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAccInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAccInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string name {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string bankNo {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string Msg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void checkUserRegCompletedEventHandler(object sender, checkUserRegCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class checkUserRegCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal checkUserRegCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string Msg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void CheckRecoverUidCompletedEventHandler(object sender, CheckRecoverUidCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckRecoverUidCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckRecoverUidCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string Msg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string type {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void freezeTradeCompletedEventHandler(object sender, freezeTradeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class freezeTradeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal freezeTradeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void returnStaticStrCompletedEventHandler(object sender, returnStaticStrCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class returnStaticStrCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal returnStaticStrCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void freezeAccountCompletedEventHandler(object sender, freezeAccountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class freezeAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal freezeAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void freezePerAccountCompletedEventHandler(object sender, freezePerAccountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class freezePerAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal freezePerAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void FreezePerAccountWechatCompletedEventHandler(object sender, FreezePerAccountWechatCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FreezePerAccountWechatCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FreezePerAccountWechatCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void FreezePerAccountWechat_NewCompletedEventHandler(object sender, FreezePerAccountWechat_NewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FreezePerAccountWechat_NewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FreezePerAccountWechat_NewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UnFreezePerAccountWechat_NewCompletedEventHandler(object sender, UnFreezePerAccountWechat_NewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnFreezePerAccountWechat_NewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnFreezePerAccountWechat_NewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void dsReBatCheckCompletedEventHandler(object sender, dsReBatCheckCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class dsReBatCheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal dsReBatCheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void logOnUserHistoryCompletedEventHandler(object sender, logOnUserHistoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class logOnUserHistoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal logOnUserHistoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string Msg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void logOnUserCompletedEventHandler(object sender, logOnUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class logOnUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal logOnUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string Msg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
}

#pragma warning restore 1591